## jQueryとAjax
``Ajax``:inxx

web2pyは主にサーバーサイド開発向けですが、**welcome**雛形アプリは基本的なjQueryライブラリ``jquery``:cite、jQueryカレンダー(日付ピッカー(date picker)、 日付時間ピッカー(datetime picker)とクロック(clock))、"superfish.js"メニュー、そしていくつかのjQueryに基づく追加のJavaScriptを利用することができます。

PrototypeやExtJS、YUIといったそれ以外のAjax``ajax:w``:citeライブラリもweb2pyで使うことができますが、jQueryをパッケージすることに決めた理由は、他の同等なライブラリに比べて利用が簡単でかつ強力だからです。また機能的で簡潔であれというweb2py精神をよくとらえていると思うからです。

### web2py_ajax.html

雛形アプリのweb2pyアプリケーション"welcom"は次のファイルを含みます。

``
views/web2py_ajax.html
``:code

ファイルの中身はこのようになります：

``
{{
response.files.insert(0,URL('static','js/jquery.js'))
response.files.insert(1,URL('static','css/calenadar.css'))
response.files.insert(2,URL('static','js/calendar.js'))
response.include_meta()
response.include_files()
}}
<script type="text/javascript"><!--
    // These variables are used by the web2py_ajax_init
	// function in web2py.js (which is loaded below).
    var w2p_ajax_confirm_message =
        "{{=T('Are you sure you want to delete this object?')}}";
    var w2p_ajax_date_format = "{{=T('%Y-%m-%d')}}";
    var w2p_ajax_datetime_format = "{{=T('%Y-%m-%d %H:%M:%S')}}";
//--></script>
<script src="{{=URL('static','js/web2py.js')}}"
        type="text/javascript"></script>
``:code

このファイルはデフォルトの"layout.html"のHEADで付け加えられ、次のようなサービスを提供します：

- "static/jquery.js"を付け加える。
- "static/calendar.js"と"static/calendar.css"を付け加える。これらはポップアップ・カレンダーで使われます。
- すべての``response.meta``ヘッダを付け加える。
- すべての``response.files``（要求する CSS と JS、コードで宣言されたもの）を付け加える。
- フォーム変数の設定と"static/js/web2y.js"を付け加える

"web2py.js"は次のことを行います：

- （jQueryの$.ajaxに基づく）``ajax``関数の定義。
- クラス"error"のDIVの作成、あるいはクラス"flash"のタグ・オブジェクトのスライドダウン(slide down)。
- クラス"integer"のINPUTフィールドで無効な整数入力をエラーにする。
- クラス"doubles"のINPUTフィールドで無効な浮動少数入力をエラーにする。
- タイプ"date"タイプのINPUTフィールドとpopup date pickerを関連づける。
- タイプ"datetime"タイプのINPUTフィールドとpopup datetime pickerを関連づける。
- タイプ"time"のINPUTフィールドとpopup time pickerを関連づける。
- ``web2py_ajax_component``を定義する。これはとても重要なツールで、12章で説明します。
- ``web2py_comet``の定義。この関数はHTML5のwebsocket（ウェブソケット）のために用いられます。（この本では説明しませんが、"gluon/contrib/comet_messaging.py"のソースコードの例をみてください。） ``websockets``:inxx

また下位互換性のために``popup``、``collapse``、``fade``関数を付け加えます。

これはその他のエフェクトがどのように上手く連携しているかの例です。

次のモデルの**test**アプリケーションを考えてみましょう：
``
db = DAL("sqlite://db.db")
db.define_table('child',
     Field('name'),
     Field('weight', 'double'),
     Field('birth_date', 'date'),
     Field('time_of_birth', 'time'))

db.child.name.requires=IS_NOT_EMPTY()
db.child.weight.requires=IS_FLOAT_IN_RANGE(0,100)
db.child.birth_date.requires=IS_DATE()
db.child.time_of_birth.requires=IS_TIME()
``:code

この"default.py"コントローラーは：
``
def index():
    form = SQLFORM(db.child)
    if form.process().accepted:
        response.flash = 'record inserted'
    return dict(form=form)
``:code

そして"default/index.html"ビューは：
``
{{extend 'layout.html}}
{{=form}}
``:code

この"index"アクションは次のフォームを生成します：

[[image @///image/en7000.png center 480px]]

もし無効なフォームが送信されると、サーバーはエラー・メッセージを含む修正されたフォームのページを返します。エラー・メッセージはクラス"error"のDIVです。上記のweb2py.jpコードによって、エラーがスライドダウン・エフェクトで表示されます。：

[[image @///image/en7100.png center 480px]]

エラーの色は"layout.html"のCSSコードで指定されています。

web2py.jsコードは入力フィールドへの無効な値の入力を防ぎます。これはサーバーサイドの検証の前に行われます。付け加えますが、サーバーサイドの検証を置き換えるものではありません。

web2py.jsコードはクラス"date"のINPUTフィールドに入力したとき日付ピッカー(date picker)を表示し、そしてクラス"datetime"のINPUTフィールドに入力したとき日付時間ピッカー(datetime picker)を表示します。例を挙げると：

[[image @///image/en7200.png center 480px]]

またweb2py.jsコードはクラス"time"のINPUTフィールドの編集時に次ような時間ピッカー(time picker)を表示します：

[[image @///image/en7300.png center 480px]]

送信時に、コントローラー・アクションはresponse flashにメッセージ"record inserted"をセットします。デフォルト・レイアウトはid="flash"のDIVにこのメッセージをレンダリングします。web2py.jsコードはページ送信時のDIVの表示、非表示の役割を担っています：

[[image @///image/en7400.png center 480px]]

これらの、あるいはそれ以外のエフェクトはビューの中で、またコントローラーの中でヘルパを経由してプログラム的にアクセスできます。

### jQueryエフェクト
``effects``:inxx

ここで述べている基本的なエフェクトは追加のファイルを特に必要としません；必要なものは既にweb2py_ajax.htmlに含まれています。

HTML/XHTMLオブジェクトはそれらの要素（例：DIV）、クラス、idによって識別することができます。例を挙げると：
``
<div class="one" id="a">Hello</div>
<div class="two" id="b">World</div>
``:code

これらはそれぞれ"one"と"two"のクラスに属しています。また、idはそれぞれ"a"と"b"という値です。

jQueryでは前者を次のようなCSSに似た表記で参照できます。
``
jQuery('.one')    // クラスが"one"の要素を示す
jQuery('#a')      // id が"a"の要素を示す
jQuery('DIV.one') // クラスが".one"の要素"DIV"を示す
jQuery('DIV #a')  // idが".one"の要素"DIV"を示す
``:code

後者は次のように参照できます
``
jQuery('.two')
jQuery('#b')
jQuery('DIV.two')
jQuery('DIV #b')
``:code

両者を参照するには次のようにします
``
jQuery('DIV')
``:code

タグオブジェクトは"onclick"などのイベントに連携してます。jQueryはこれらのイベントとエフェクトを接続できます。"slideToggle"の例を挙げます：
``
<div class="one" id="a" onclick="jQuery('.two').slideToggle()">Hello</div>
<div class="two" id="b">World</div>
``:code

このとき、"Hello"をクリックすると"World”が消えます。もう一度クリックすると、"World"が再表示されます。hiddenクラスを付与するとタグをデフォルトで非表示にできます：

``
<div class="one" id="a" onclick="jQuery('.two').slideToggle()">Hello</div>
<div class="two hidden" id="b">World</div>
``:code

タグ自身の外部でアクションとイベントを接続することもできます。前のコードは次のように書き換えることができます：
``
<div class="one" id="a">Hello</div>
<div class="two" id="b">World</div>
<script>
jQuery('.one').click(function(){jQuery('.two').slideToggle()});
</script>
``:code

エフェクトは呼び出しオブジェクトを返すので、それらをチェイン(訳注：method chain)させることができます。

``click``にはクリック時に呼び出されるコールバック関数をセットします。``change``、``keyup``、``keydown``、``mouseover``などでも同様です。

ドキュメント全体がロードされた後にだけJavaScriptを実行したいことがよくあります。これは通常はBODYの``onload``属性で実現されますが、jQueryはレイアウトを編集する必要のない別の方法を提供します：
``
<div class="one" id="a">Hello</div>
<div class="two" id="b">World</div>
<script>
jQuery(document).ready(function(){
   jQuery('.one').click(function(){jQuery('.two').slideToggle()});
});
</script>
``:code

この無名関数の本体はドキュメントが完全にロードされ準備ができた時にだけ実行されます。

よく使うイベント名の一覧です：

##### フォームイベント
- onchange: 要素の変更時にスクリプトが実行される
- onsubmit: フォーム送信時にスクリプトが実行される
- onreset: フォームリセット時にスクリプトが実行される
- onselect: 要素選択時にスクリプトが実行される
- onblur: 要素がフォーカスを失った時にスクリプトが実行される
- onfocus: 要素がフォーカスされた時にスクリプトが実行される

##### キーボードイベント
- onkeydown: キーが押された時にスクリプトが実行される
- onkeypress: キーが押されて離された時にスクリプトが実行される
- onkeyup: キーが離された時にスクリプトが実行される

##### マウスイベント
- onclick: マウスクリック時にスクリプトが実行される
- ondblclick: マウスダブルクリック時にスクリプトが実行される
- onmousedown: マウスボタンが押された時にスクリプトが実行される
- onmousemove: マウスポインタが動いたときにスクリプトが実行される
- onmouseout: マウスポインタが要素の外に動いた時にスクリプトが実行される
- onmouseover: マウスポインタが要素上を動いた時にスクリプトが実行される
- onmouseup: マウスボタンが離された時にスクリプトが実行される

jQueryで定義されているよく使うエフェクトの一覧です：

##### エフェクト
- jQuery(...).attr(name): 属性名の値を返します（訳注：原文に誤り？）
- jQuery(...).attr(name, value): 属性名に値をセットします
- jQuery(...).show(): オブジェクトを表示します
- jQuery(...).hide(): オブジェクトを非表示にします
- jQuery(...).slideToggle(speed, callback): オブジェクトをスライドアップ、あるいはダウンします（訳注：トグル）
- jQuery(...).slideUp(speed, callback): オブジェクトをスライドアップします
- jQuery(...).slideDown(speed, callback): オブジェクトをスライドダウンします
- jQuery(...).fadeIn(speed, callback): オブジェクトをフェードインします
- jQuery(...).fadeOut(speed, callback): オブジェクトをフェードアウトします

speed引数は通常"slow"、"fast"もしくは省略（デフォルト）です。callbackはエフェクトが完了した際に実行されるオプション関数です：

jQueryエフェクトは簡単にヘルパに埋め込むこともできます。ビューの例を挙げます：
``
{{=DIV('click me!', _onclick="jQuery(this).fadeOut()")}}
``:code

jQueryはとてもコンパクトで簡潔なAjaxライブラリです。そのためweb2pyは（後述する``ajax``関数を除き）jQueryの上に追加の抽象化レイヤを必要としません。jQuery APIはそれらにネイティブな形で必要な時にアクセスでき手軽に利用できます。

エフェクトやその他のjQuery APIについての詳細はドキュメンテーションを参考にしてください。

jQueryライブラリはプラグインとユーザーインタフェースのウィジェットを使って拡張することができます。このトピックはここでは割愛します；参照``jquery:ui``:citeに詳細があります。

#### フォームの条件付フィールド

典型的なjQueryエフェクトのアプリケーションはフィールドの値によってその見た目を変えるフォームです。

これはweb2pyでは簡単です。なぜなら、SQLFROMヘルパが"CSSフレンドリー"なフォームを作成してくれるからです。フォームには列をともなうテーブルがあります。それぞれの列はラベル、入力フィールド、オプション的な第3のカラムからなります。フォームの項目はテーブル名とフィールド名で厳密に指定されたidを持ちます。

慣例として、全ての入力フィールドは``テーブル名_フィールド名``というidを持ち、``テーブル名_フィールド名_列``というidを持つ列(row)の一部になります。

例として、既婚者の場合のみ、納税者の名前とその扶養者の名前を入力するフォームを作成します。

次のモデルを持つテストアプリケーションを作成します：
``
db = DAL('sqlite://db.db')
db.define_table('taxpayer',
    Field('name'),
    Field('married', 'boolean'),
    Field('spouse_name'))
``:code

コントローラー"default.py"：
``
def index():
    form = SQLFORM(db.taxpayer)
    if form.process().accepted:
        response.flash = 'record inserted'
    return dict(form=form)
``:code

そしてビュー"default/index.html":
``
{{extend 'layout.html'}}
{{=form}}
<script>
jQuery(document).ready(function(){
   jQuery('#taxpayer_spouse_name__row').hide();
   jQuery('#taxpayer_married').change(function(){
        if(jQuery('#taxpayer_married').attr('checked'))
            jQuery('#taxpayer_spouse_name__row').show();
        else jQuery('#taxpayer_spouse_name__row').hide();});
});
</script>
``:code

ビューのスクリプトは扶養者名を含む列(row)を非表示にするエフェクトを持っています：

[[image @///image/en7500.png center 480px]]

納税者が"married"チェックボックスをチェックすると、扶養者名フィールドが再表示されます：

[[image @///image/en7600.png center 480px]]

"taxpayer_married"は"taxpayer"テーブルの"married"という"boolean"フィールドに関連しているチェックボックスです。"taxpayer_spouse_name__row"は"taxpayer"テーブルの"spouse_name"という入力フィールドを含む列(row)です。

#### 削除の確認
``confirmation``:inxx

もう一つの役立つアプリケーションは編集フォーム上の削除チェックボックスのように、"delete"チェックボックスをチェックしたときに確認を要求するものです。

先ほどの例に次のコントローラーアクションを追加してみましょう：
``
def edit():
    row = db.taxpayer[request.args(0)]
    form = SQLFORM(db.taxpayer, row, deletable=True)
    if form.process().accepted:
        response.flash = 'record updated'
    return dict(form=form)
``:code

対応するビュー"default/edit.html"
``
{{extend 'layout.html'}}
{{=form}}
``:code

``deletable``:inxx
SQLFORMコンストラクタの``deletable=True``引数は、web2pyが編集フォーム上に"delete"チェックボックスを表示するようにします。デフォルトは``False``です。

web2pyの"web2py.js"は次のコードを含みます：
``
jQuery(document).ready(function(){
   jQuery('input.delete').attr('onclick',
     'if(this.checked) if(!confirm(
        "{{=T('Sure you want to delete this object?')}}"))
      this.checked=false;');
});
``:code

慣例として、このチェックボックスは"delete"クラスを持ちます。上記のjQueryコードはチェックボックスのonclickイベントと確認ダイアログ（JavaScript標準）を関連付け、納税者が承認しない場合はチェックボックスのチェックを外します：

[[image @///image/en7700.png center 480px]]

### ``ajax``関数

web2py.jsの中で、web2pyは``ajax``という関数を定義しています。これは、jQuery関数``$.ajax``を基にしていますが、それと混同しないでください。後者(訳注：jQueryの$.ajax)は前者(訳注：web2py.jsのajax)より強力で、その使用方法については参照``jquery``:citeと参照``jquery:b``:citeを見てください。その一方で、前者は多くの複雑なタスクをこなすのに十分な機能を持ち、簡単に使用できます。

``ajax``関数はJavaScriptの関数で次のような構文になります：
``
ajax(url, [name1, name2, ...], target)
``:code

この関数は、url（第１引数）を非同期的に呼び出し、リスト（第２引数）のnameと同じnameを持つフィールドの値を渡し、そしてターゲット（第３引数）と同じ値のidを持つタグの内部要素に結果を保存します。

``default``コントローラーの例です：
``
def one():
    return dict()

def echo():
    return request.vars.name
``:code

対応する"default/one.html"ビュー：
``
{{extend 'layout.html'}}
<form>
   <input name="name" onkeyup="ajax('echo', ['name'], 'target')" />
</form>
<div id="target"></div>
``:code

INPUTフィールドに何か入力してキーを離す（onkeyup)と同時に、``ajax``関数が呼ばれ、``name="name"``フィールドの値が"echo"アクションに渡されます。このアクションはそのテキストをビューに送り返します。``ajax``関数はその結果を受け取り"target"のDIVにechoの結果を表示します。

#### Eval ターゲット

``ajax``関数の第３引数には文字列":eval"を指定できます。これは、サーバーから返された文字列がドキュメントに埋め込まれずに、代わりに評価されることを意味します。

``default``コントローラーの例：
``
def one():
    return dict()

def echo():
    return "jQuery('#target').html(%s);" % repr(request.vars.name)
``:code

対応する"default/one.html"ビュー：
``
{{extend 'layout.html'}}
<form>
   <input name="name" onkeyup="ajax('echo', ['name'], ':eval')" />
</form>
<div id="target"></div>
``:code

こうすることで複数のターゲット(訳注：対象)を更新でき、より複雑な結果を返せるようになります。

#### オートコンプリーション

web2pyにはFormsの章で説明したように組み込みのオートコンプリート・ウィジェットがあります。ここでは簡単なものをイチから作成してみます。

上記の``ajax``関数のもう一つの応用はオートコンプリートです。月名用の入力フィールドを作成し、訪問者が不完全な名前をタイプすると、Ajaxリクエスト経由でオートコンプリートを実施するようにします。応答すると、入力フィールドの下にオートコンプリートのドロップボックスが現れます。

次の``default``コントローラを経由して実現できます：
``
def month_input():
    return dict()

def month_selector():
    if not request.vars.month: return ''
    months = ['January', 'February', 'March', 'April', 'May',
              'June', 'July', 'August', 'September' ,'October',
              'November', 'December']
    month_start = request.vars.month.capitalize()
    selected = [m for m in months if m.startswith(month_start)]
    return DIV(*[DIV(k,
                     _onclick="jQuery('#month').val('%s')" % k,
                     _onmouseover="this.style.backgroundColor='yellow'",
                     _onmouseout="this.style.backgroundColor='white'"
                     ) for k in selected])
``:code

対応する"default/month_input.html"ビュー：
``
{{extend 'layout.html'}}
<style>
#suggestions { position: relative; }
.suggestions { background: white; border: solid 1px #55A6C8; }
.suggestions DIV { padding: 2px 4px 2px 4px; }
</style>

<form>
 <input type="text" id="month" name="month" style="width: 250px" /><br />
 <div style="position: absolute;" id="suggestions"
      class="suggestions"></div>
</form>
<script>
jQuery("#month").keyup(function(){
      ajax('month_selector', ['month'], 'suggestions')});
</script>
``:code

ビジターが"month"入力フィールドに何かタイプするたびに、ビューのjQueryスクリプトがAjaxリクエストを実行します。入力フィールドの値はAjaxリクエストによって"month_selector"アクションに送信されます。このアクションは送信された（選択された）テキストで始まる月名のリストを検索し、DIVのリスト（それぞれが候補の月名を含む）を作成し、シリアライズされたDIVの文字列を返します。ビューは返されたHTMLを"suggestions"DIVに表示します。"month_selector"アクションは候補とDIVに埋め込まれたJavaScriptコードの両方を作成します。JavaScriptコードはビジターがそれぞれの候補をクリックするたびに実行されます。例えば、ビジターが"M"とタイプすると、コールバックアクションは次の結果を返します：
``
<div>
     <div onclick="jQuery('#month').val('March')"
          onmouseout="this.style.backgroundColor='white'"
          onmouseover="this.style.backgroundColor='yellow'">March</div>
     <div onclick="jQuery('#month').val('May')"
          onmouseout="this.style.backgroundColor='white'"
          onmouseover="this.style.backgroundColor='yellow'">May</div>
</div>
``:code

最終的なエフェクトは：

[[image @///image/en7800.png center 480px]]

もし月名が次のようにデータベースのテーブルに保存されている場合は：
``
db.define_table('month', Field('name'))
``:code

then simply replace the ``month_selector`` action with:

簡単に``month_selector``アクションを次のように置き換えるだけです：
``
def month_input():
    return dict()

def month_selector():
    if not request.vars.month:
        return ''
    pattern = request.vars.month.capitalize() + '%'
    selected = [row.name for row in db(db.month.name.like(pattern)).select()]
    return ''.join([DIV(k,
                 _onclick="jQuery('#month').val('%s')" % k,
                 _onmouseover="this.style.backgroundColor='yellow'",
                 _onmouseout="this.style.backgroundColor='white'"
                 ).xml() for k in selected])
``:code

jQueryは追加機能を持つオプションのオートコンプリート・プラグインをもちますが、ここでは説明しません。

#### Ajaxフォーム送信
``asynchronous``:inxx

ページ全体をリロードしないでAjaxを利用してメッセージを送信できるページを考えてみましょう。12章で後述しますが、LOADヘルパを利用することで、web2pyはここで説明する内容よりもより良い仕組みを提供しています。ここではjQueryを使ったシンプルなやり方をお見せします。

フォーム"myform"と"target"DIVがあります。フォームが送信されると、サーバーはそれを許可（そしてデータベースへの挿入を実行する）するか、拒否（バリデーションをパスしなかったので）します。対応するメッセージがAjaxレスポンスで返され"target"DIVに表示されます。

次のモデルを持つtestアプリケーションを作成してください：
``
db = DAL('sqlite://db.db')
db.define_table('post', Field('your_message', 'text'))
db.post.your_message.requires = IS_NOT_EMPTY()
``:code

それぞれの投稿は"your_message"という入力が必須の単一フィールドを持つ点に注意してください。

``default.py``コントローラを編集して次の二つのアクションを書いてください：
``
def index():
    return dict()

def new_post():
    form = SQLFORM(db.post)
    if form.accepts(request, formname=None):
        return DIV("Message posted")
    elif form.errors:
        return TABLE(*[TR(k, v) for k, v in form.errors.items()])
``:code

最初のアクションは単にビューを返すだけです。

二つ目のアクションはAjaxのコールバックです。これは``request.vars``内のフォーム変数を待ち、それらを処理して、成功時には``DIV("Message posted")``を返し、失敗時にはエラーメッセージの``TABLE``を返します。

さあ、"default/index.html"ビューを編集してください：
``
{{extend 'layout.html'}}

<div id="target"></div>

<form id="myform">
  <input name="your_message" id="your_message" />
  <input type="submit" />
</form>

<script>
jQuery('#myform').submit(function() {
  ajax('{{=URL('new_post')}}',
       ['your_message'], 'target');
  return false;
});
</script>
``:code

この例はHTMLを利用して手書きでフォームが作成されていますが、フォームを表示しているのとは異なるアクションでSQLFORMによって処理されている点に注意してください。SQLFORMオブジェクトはHTMLにシリアライズされることはありません。この場合は``SQLFORM.accepts``はセッションを受け取らず``formname=None``をセットします、これは手書きのHTMLフォームにおいてフォーム名とフォームキーをセットしないようにしたからです。

ビューの下部にあるスクリプトは"myform"送信ボタンとインライン関数を関連付けています。このインライン関数は、web2pyの``ajax``関数を利用して``id="your_message"``を持つ入力フィールドを送信し、``id="target"``を持つDIVの中にその答えを表示します。

#### 投票と評価

もう一つのAjaxアプリケーションはページにおいてアイテムへ投票(訳注：Voting)または評価(訳注：Rating)するものです。投稿された画像にビジターが投票できるアプリケーションを考えてみます。そのアプリケーションは投票結果に応じてソートされた画像を表示する単一のページからなります。ここでは、ビジターが複数回投票できるようになっています。ただし、ビジターが認証されていればこのふるまいを変えるのは簡単です。データベースにある個別の投票を追跡して投票者の``request.env.remote_addr``に関連付ければいいのです。

簡単なモデルを示します：
``
db = DAL('sqlite://images.db')
db.define_table('item',
    Field('image', 'upload'),
    Field('votes', 'integer', default=0))
``:code

``default``コントローラ：
``
def list_items():
    items = db().select(db.item.ALL, orderby=db.item.votes)
    return dict(items=items)

def download():
    return response.download(request, db)

def vote():
    item = db.item[request.vars.id]
    new_votes = item.votes + 1
    item.update_record(votes=new_votes)
    return str(new_votes)
``:code

downloadアクションは、list_itemsビューが"uploads"フォルダに保存されている画像をダウンロードできるために必要です。voteアクションはAjaxのコールバックで使用されます。

"default/list_items.html"ビュー：
``
{{extend 'layout.html'}}

<form><input type="hidden" id="id" name="id" value="" /></form>
{{for item in items:}}
<p>
<img src="{{=URL('download', args=item.image)}}"
     width="200px" />
<br />
Votes=<span id="item{{=item.id}}">{{=item.votes}}</span>
[<span onclick="jQuery('#id').val('{{=item.id}}');
       ajax('vote', ['id'], 'item{{=item.id}}');">vote up</span>]
</p>
{{pass}}
``:code

ビジターが"[vote up"]をクリックすると、JavaScriptコードはitem.idの値を隠している"id"INPUTフィールドに保存し、Ajaxリクエストによってサーバーに値を送信します。サーバーは対応するレコードの投票カウンターを増やし、新しい投票カウンターを文字列で返します。そしてこの値が目標の``item{{=item.id}}`` SPANに挿入されます。

-------
Ajaxのコールバックはバックグラウンドでコンピュータ操作の実行に利用できますが、**cron**もしくは（4章で説明した）バックグラウンド処理の使用を推奨します。webサーバーがスレッドのタイムアウトを強要するからです。もし計算に時間がかかり過ぎると、webサーバーは処理を終了します。タイムアウト値のセット方法はあなたのwebサーバーのパラメータを参照してください。
-------

##### 第3版 - 翻訳: Omi Chiba　レビュー: 細田謙二
##### 第4版 - 翻訳: Mitsuhiro Tsuda　レビュー: Omi Chiba