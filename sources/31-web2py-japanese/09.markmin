## サービス
``Web Services``:inxx

W3Cではウェブサービスを"ネットワークを経由した機械同士の相互通信をサポートするために設計されたソフトウェアシステム"と定義しています。これは広義の意味であり、機械と人間の通信のために設計されたプロトコルを除く、XML、JSON、RSSなどの機械同士の通信の多くのプロトコルを含んでいます。

web2pyは標準でXML、JSON、RSS、CSV、XMLRPC、JSONRPC、AMFRPC、SOAPを含む多くのプロトコルをサポートしています。また、web2pyは標準外のプロトコルを追加して拡張することもできます。

それぞれのプロトコルは多様なサポートがされており、以下のように区別することにします：
- 指定されたフォーマットで対象機能の出力を表示（例：XML、JSON、RSS、CSV）
- リモートプロシージャコール（例：XMLRPC、JSONRPC、AMFRPC）

### 辞書のレンダリング

#### HTML, XML, and JSON
``XML``:inxx ``JSON``:inxx

次のアクションを考えてみてください：
``
def count():
    session.counter = (session.counter or 0) + 1
    return dict(counter=session.counter, now=request.now)
``:code

このアクションは訪問者がページをリロードするたびに一つずつ増加されたcounterの値と、現在のページリクエストのタイムスタンプを返します。

通常このページがリクエストされるのは：

``
http://127.0.0.1:8000/app/default/count
``:code

そしてHTMLでレンダリングされます。URLに拡張子を追加することで一つのコードも書かずにweb2pyに異なるプロトコルのページをレンダリングさせることができます。

``
http://127.0.0.1:8000/app/default/count.html
http://127.0.0.1:8000/app/default/count.xml
http://127.0.0.1:8000/app/default/count.json
``:code

アクションによって返される辞書はそれぞれHTML、XML、JSONになります。

これがXMLの出力結果です：
``
<document>
   <counter>3</counter>
   <now>2009-08-01 13:00:00</now>
</document>
``:code

これがJSONの出力結果です：
``
{ 'counter':3, 'now':'2009-08-01 13:00:00' }
``:code

date、time、dateimeオブジェクトがISOフォーマットの文字列でレンダリングされている点に注意してください。これはJSONの標準機能というよりweb2pyの仕様です。

#### 汎用ビュー

例えば".xml"拡張子が実行されたとき、web2pyは"default/count/xml"という名称のテンプレートファイルを参照し、見つからない場合は、"generic.xml"というテンプレートを参照します。"generic.html"、 "generic.xml"、 "generic.json"というファイルは雛形となるアプリケーションにて提供されていいます。それ以外の拡張子についてもユーザーによって簡単に定義可能です。

web2pyアプリケーションでこれらを有効にするには特に何も必要ありません。古いweb2pyアプリケーションで使用するには、"generic.*"ファイルを新しい雛形アプリケーション（バージョン1.60移行）からコピーする必要があるかもしれません。

これが"generic.html"のコードです
``
{{extend 'layout.html'}}

{{=BEAUTIFY(response._vars)}}

<button onclick="document.location='{{=URL("admin","default","design",
args=request.application)}}'">admin</button>
<button onclick="jQuery('#request').slideToggle()">request</button>
<div class="hidden" id="request"><h2>request</h2>{{=BEAUTIFY(request)}}</div>
<button onclick="jQuery('#session').slideToggle()">session</button>
<div class="hidden" id="session"><h2>session</h2>{{=BEAUTIFY(session)}}</div>
<button onclick="jQuery('#response').slideToggle()">response</button>
<div class="hidden" id="response"><h2>response</h2>{{=BEAUTIFY(response)}}</div>
<script>jQuery('.hidden').hide();</script>
``:code

これが"generic.xml"のコードです
``
{{
try:
   from gluon.serializers import xml
   response.write(xml(response._vars),escape=False)
   response.headers['Content-Type']='text/xml'
except:
   raise HTTP(405,'no xml')
}}
``:code

そしてこれが"generic.json"のコードです
``
{{
try:
   from gluon.serializers import json
   response.write(json(response._vars),escape=False)
   response.headers['Content-Type']='text/json'
except:
   raise HTTP(405,'no json')
}}
``:code

pythonの基本型（整数、浮動少数、文字、リスト、タプル、辞書）であればどのような辞書でもHTML、XML、JSONにレンダリングできます。``response._vars``はアクションによって返された辞書を含みます。

もしユーザー定義やweb2py独自のオブジェクトを辞書が含む場合は、カスタムビューにてレンダリングされる必要があります。

#### Rowsのレンダリング
``as_list``:inxx

select分によって返されたRowsセットをXMl、JSON、それ以外のフォーマットでレンダリングする必要がある場合は、まず始めに``as_list()``メソッドを利用してRowsオブジェクトを辞書のリストに変換します。

次の例を考えてみてください：
``
db.define_table('person', Field('name'))
``:code

次のアクションはHTMLにレンダリングできますがXMLやJSONにはできません：
``
def everybody():
    people = db().select(db.person.ALL)
    return dict(people=people)
``:code

しかし次のアクションの場合はXMLとJSONにレンダリングできます：

``
def everybody():
    people = db().select(db.person.ALL).as_list()
    return dict(people=people)
``:code

#### カスタムフォーマット

例えば、仮にPython pickle形式でアクションをレンダリングしたい場合は：

``
http://127.0.0.1:8000/app/default/count.pickle
``:code

単に以下のコードを含んだ"default/count.pickle"という新規ビューファイルを作成するだけでいいです：
``
{{
import cPickle
response.headers['Content-Type'] = 'application/python.pickle'
response.write(cPickle.dumps(response._vars),escape=False)
}}
``:code

もし任意のアクションをPickle化したファイルとしてレンダリングしたい場合は、上記のファイルを"generic.pickle"という名前で保存するだけでいいです。

全てのオブジェクトがPickle化できるわけでは無く、また元のオブジェクトに戻せるわけではありません。Pythonの基本型とその組み合わせを利用する方が無難です。ファイルストリームやデータベース接続への参照を持たないオブジェクトは通常はPickle化できますが、全てのPickle化したオブジェクトのクラスが事前に定義されている環境でしかPickle化から戻すことができません。

#### RSS
``RSS``:inxx

web2pyにはRSSフィードのアクションによって返された辞書の値をレンダリングできる"generic.rss"というビューがあります。

RSSフィードは固定のデータ構造（タイトル、リンク、説明、アイテム、等々）で動作するため、アクションによって返される辞書の値も適切な構造を持つ必要があります。
``
{'title'      : ",
 'link'       : ",
 'description': ",
 'created_on' : ",
 'entries'    : []}
``:code

そしてentries内のそれぞれのエントリが同じような構造を持ちます：

``
{'title'      : ",
 'link'       : ",
 'description': ",
 'created_on' : "}
``:code

例えば次のようなアクションはRSSフィードとしてレンダリングできます：
``
def feed():
    return dict(title="my feed",
                link="http://feed.example.com",
                description="my first feed",
                entries=[
                  dict(title="my feed",
                  link="http://feed.example.com",
                  description="my first feed")
                ])
``:code

以下のURLにアクセスするだけです：

``
http://127.0.0.1:8000/app/default/feed.rss
``:code

別の方法として、次のモデルも考えられます：
``
db.define_table('rss_entry',
    Field('title'),
    Field('link'),
    Field('created_on','datetime'),
    Field('description'))
``:code

次の方法もRSSフィードとしてレンダリングできます：

``
def feed():
    return dict(title="my feed",
                link="http://feed.example.com",
                description="my first feed",
                entries=db().select(db.rss_entry.ALL).as_list())
``:code

Rowsオブジェクトの``as_list()``メソッドはrowsを辞書のリストに変換します。

ここで明記されていないkey名が辞書のリストに存在する場合は、無視されます。

これがweb2pyで提供されている"generic.rss"ビューです：
``
{{
try:
   from gluon.serializers import rss
   response.write(rss(response._vars),escape=False)
   response.headers['Content-Type']='application/rss+xml'
except:
   raise HTTP(405,'no rss')
}}
``:code

もう一つのRSSアプリケーションの例として、"slashdot"フィードからデータを収集し新しいweb2py RSSフィードをレンダリングするRSSアグリゲーターを考えてみましょう。
``
def aggregator():
    import gluon.contrib.feedparser as feedparser
    d = feedparser.parse(
        "http://rss.slashdot.org/Slashdot/slashdot/to")
    return dict(title=d.channel.title,
                link = d.channel.link,
                description = d.channel.description,
                created_on = request.now,
                entries = [
                  dict(title = entry.title,
                  link = entry.link,
                  description = entry.description,
                  created_on = request.now) for entry in d.entries])
``:code

以下からアクセスできます：

``
http://127.0.0.1:8000/app/default/aggregator.rss
``:code

#### CSV
``CSV``:inxx

Comma Separated Values (CSV)フォーマットは表形式のデータを表すプロトコルです。

次のモデルを考えてみましょう：
``
db.define_model('animal',
    Field('species'),
    Field('genus'),
    Field('family'))
``:code

そしてアクション：
``
def animals():
    animals = db().select(db.animal.ALL)
    return dict(animals=animals)
``:code

web2pyには"generic.csv"が無いため、"default/animals.csv"というanimalsをCSVにシリアライズするカスタムビューを定義する必要があります。実装の例をあげると：
``
{{
import cStringIO
stream=cStringIO.StringIO()
animals.export_to_csv_file(stream)
response.headers['Content-Type']='application/vnd.ms-excel'
response.write(stream.getvalue(), escape=False)
}}
``:code

"generica.csv"を定義しておくことは可能ですが、シリアライズ化されるオブジェクト名（例の場合は"animals"）が明示される必要があります。このため"generic.csv"ファイルはweb2pyで提供されていません。

### リモートプロシージャコール
``RPC``:inxx

web2pyはどのような関数でもウェブサービスにする仕組みがあります。ここで言う仕組とは前述した仕組みと以下の場合で異なります:
- 関数が引数を持つ場合
- 関数がコントローラではなくモデルやモジュールで指定されている場合
- RPCメソッドでサポートされている明示的な記述が必要な場合
- より厳格なURLのネーミングが求められる場合
- 固定のプロトコルの組み合わせで動くことで高い機能を実現する場合。同様の理由で拡張性は悪い。

これらの機能を使うために：

まず始めに、サービスオブジェクトをインポートしてインスタンス化します。
``
from gluon.tools import Service
service = Service(globals())
``:code

-------
これは雛形となるアプリケーション内にある"db.py”というモデルファイルの中で実装済みです。
-------

二つ目に、コントローラー内でサービスハンドラを公開します：
``
def call():
    session.forget()
    return service()
``:code

-------
これは雛形となるアプリケーションのコントローラーにある"default.py"にて実装済みです。セッションクッキーを使用する場合は``session.forget()``を削除します。
-------

三つ目に、サービスとして公開したいそれらの関数を装飾する必要があります。以下が現在サポートされているデコレータです:
``
@service.run
@service.xml
@service.json
@service.rss
@service.csv
@service.xmlrpc
@service.jsonrpc
@service.amfrpc3('domain')
@service.soap('FunctionName',returns={'result':type},args={'param1':type,})
``:code

例として、以下のデコレータ関数を考えてみましょう：
``
@service.run
def concat(a,b):
    return a+b
``:code

この関数はモデルまたは``call``アクションが定義されているコントローラで定義できます。この関数は以下の２つの方法でリモートから実行できます。

``
http://127.0.0.1:8000/app/default/call/run/concat?a=hello&b=world
http://127.0.0.1:8000/app/default/call/run/concat/hello/world
``:code

どちらの場合もhttpリクエストは以下の値を返します：
``
helloworld
``:code

``@service.xml``デコレータが使用される場合は、以下のURL経由で実行されます：

``
http://127.0.0.1:8000/app/default/call/xml/concat?a=hello&b=world
http://127.0.0.1:8000/app/default/call/xml/concat/hello/world
``:code

そしてXML形式の戻り値が出力されます：
``
<document>
   <result>helloworld</result>
</document>
``:code

これがDAL Rowsオブジェクトだとしても関数の出力はシリアライズされ、実際、``as_list()``が自動で実行されます。

``@service.json``デコレータが使用される場合は、以下のURL経由で実行されます：

``
http://127.0.0.1:8000/app/default/call/json/concat?a=hello&b=world
http://127.0.0.1:8000/app/default/call/json/concat/hello/world
``:code

そしてJSON形式の戻り値が出力されます。

``@service.csv``デコレータが使用される場合は、サービスハンドラが、リストを含むリストのような反復可能オブジェクトを含む反復可能オブジェクトを、戻り値とする必要があります。例を挙げると：
``
@service.csv
def table1(a,b):
    return [[a,b],[1,2]]
``:code

このサービスは以下のどちらかのURLで実行されます：

``
http://127.0.0.1:8000/app/default/call/csv/table1?a=hello&b=world
http://127.0.0.1:8000/app/default/call/csv/table1/hello/world
``:code

そして戻り値は：
``
hello,world
1,2
``:code

``@service.rss``デコレータは前の章で説明した"generic.rss”と同様のフォーマトの値を見込んでいます。

それぞれの関数について複数のデコレータを持つことが可能です。

今までのところ、この章で説明した内容は前の章で説明した内容の単なる代替手段でしかありません。サービスオブジェクトの本当の力を発揮するのは後述するXMLRPC、JSONRPC、AMFRPCです。

#### XMLRPC
``XMLRPC``:inxx

例えば"default.py”コントローラに次のコードがあるとすると：
``
@service.xmlrpc
def add(a,b):
    return a+b

@service.xmlrpc
def div(a,b):
    return a/b
``:code

Pythonのシェルで以下のように実行できます
``
>>> from xmlrpclib import ServerProxy
>>> server = ServerProxy(
       'http://127.0.0.1:8000/app/default/call/xmlrpc')
>>> print server.add(3,4)
7
>>> print server.add('hello','world')
'helloworld'
>>> print server.div(12,4)
3
>>> print server.div(1,0)
ZeroDivisionError: integer division or modulo by zero
``:code

xmlrpclibモジュールはクライアントにXMLRPCプロトコルを提供します。web2pyはサーバーとして動作します。

クライアントはServerProxy経由でサーバーに接続しサーバー上のデコレータ関数をリモートから実行できます。データ(a、b)はGET/POST変数経由ではなくXMLRPCプロトコルにより正しくエンコードされた形で関数に渡され、また、そうすることでデータタイプ（int、String、その他）の情報が保持されています。戻り値についても同様のことが言えます。さらに、サーバー上で発生した例外処理もクライアントに送信されます。

多くのプログラミング言語（C、C++、Java、C#、Ruby、Perl）でXMLRPCライブラリは存在し、相互に使用されます。これは異なるプログラム言語間で通信をするアプリケーションを作成する場合に最適な方法のひとつです。

XMLRPCクライアントはweb2pyのアクション内で実行することもできます。そうすることで、あるアクションが別のweb2pyアプリケーション（同じインストレーションであっても）とXMLRPCを利用して通信することができます。この場合はセッションのデッドロックに注意してください。同じアプリケーション内でXMLRPCを利用してアクションを実行する場合は、実行前にセッションロックを開放しなければなりません。
``
session.forget()
session._unlock(response)
``:code

#### JSONRPC と Pyjamas
``JSONRPC``:inxx ``Pyjamas``:inxx

JSONRPCはXMLRPCにとてもよく似ていますが、XMLの代わりにJSONベースのプロトコルを利用してデータをエンコードします。このアプリーケーションの例として、Pyjamasを使った手法を説明します。PyjamasはGoogle Web　Toolkit（当初はJavaで書かれていた）のPython用ポートです。PyjamasによってPythonでクライアントアプリケーションを書くことができます。PyjamasはコードをJavaScriptに変換します。web2pyはJavaScriptを実行し、ユーザーのアクションによってクライアントから作成されたリクエストとAJAX経由で通信します。

ここではPyjamasをweb2py上でどのように動作させられるかを説明します。web2pyとPyjamas以外のライブラリは特に必要ありません。

JSONRPCを使ってサーバーと接続するPyjamasクライアント（全てJavaScript）を利用したシンプルな"todo”アプリケーションを作成していきます。

まずはじめに、"todo”という名称のアプリケーションを作成します。

二つ目に、"models/db.py"にて、次のコードを記述します：
``
    db=SQLDB('sqlite://storage.sqlite')
    db.define_table('todo', Field('task'))

    from gluon.tools import Service     # import rpc services
    service = Service(globals())
``:code

三つ目に、"contollers/default.py”にて、次のコードを記述します：
``
    def index():
    redirect(URL('todoApp'))

    @service.jsonrpc
    def getTasks():
        todos = db(db.todo.id>0).select()
        return [(todo.task,todo.id) for todo in todos]

    @service.jsonrpc
    def addTask(taskFromJson):
        db.todo.insert(task= taskFromJson)
        return getTasks()

    @service.jsonrpc
    def deleteTask (idFromJson):
        del db.todo[idFromJson]
        return getTasks()

    def call():
        session.forget()
        return service()

    def todoApp():
        return dict()
``:code

それぞれの関数の意味は明らかだと思います。

四つ目に、"view/default/todoApp.html"にて、次のコードを記述します：
``
<html>
  <head>
    <meta name="pygwt:module"
     content="{{=URL('static','output/todoapp')}}" />
    <title>
      simple todo application
    </title>
  </head>
  <body bgcolor="white">
    <h1>
      simple todo application
    </h1>
    <i>
      type a new task to insert in db,
      click on existing task to delete it
    </i>
    <script language="javascript"
     src="{{=URL('static','output/pygwt.js')}}">
    </script>
  </body>
</html>
``:code

このビューはまだ作成されていない"static/output/todoapp"のPyjamasコードを実行するだけです。

五つ目に、"static/TodoApp.py"（todoAppでは無くTodoAppであることに注意！）にて、次のコードを記述します：
``
from pyjamas.ui.RootPanel import RootPanel
from pyjamas.ui.Label import Label
from pyjamas.ui.VerticalPanel import VerticalPanel
from pyjamas.ui.TextBox import TextBox
import pyjamas.ui.KeyboardListener
from pyjamas.ui.ListBox import ListBox
from pyjamas.ui.HTML import HTML
from pyjamas.JSONService import JSONProxy

class TodoApp:
    def onModuleLoad(self):
        self.remote = DataService()
        panel = VerticalPanel()

        self.todoTextBox = TextBox()
        self.todoTextBox.addKeyboardListener(self)

        self.todoList = ListBox()
        self.todoList.setVisibleItemCount(7)
        self.todoList.setWidth("200px")
        self.todoList.addClickListener(self)
        self.Status = Label("")

        panel.add(Label("Add New Todo:"))
        panel.add(self.todoTextBox)
        panel.add(Label("Click to Remove:"))
        panel.add(self.todoList)
        panel.add(self.Status)
        self.remote.getTasks(self)

        RootPanel().add(panel)

    def onKeyUp(self, sender, keyCode, modifiers):
        pass

    def onKeyDown(self, sender, keyCode, modifiers):
        pass

    def onKeyPress(self, sender, keyCode, modifiers):
        """
        This function handles the onKeyPress event, and will add the
        item in the text box to the list when the user presses the
        enter key. In the future, this method will also handle the
        auto complete feature.
        """
        if keyCode == KeyboardListener.KEY_ENTER and \
           sender == self.todoTextBox:
            id = self.remote.addTask(sender.getText(),self)
            sender.setText("")
            if id<0:
                RootPanel().add(HTML("Server Error or Invalid Response"))

    def onClick(self, sender):
        id = self.remote.deleteTask(
                sender.getValue(sender.getSelectedIndex()),self)
        if id<0:
            RootPanel().add(
                HTML("Server Error or Invalid Response"))

    def onRemoteResponse(self, response, request_info):
        self.todoList.clear()
        for task in response:
            self.todoList.addItem(task[0])
            self.todoList.setValue(self.todoList.getItemCount()-1,
                                   task[1])

    def onRemoteError(self, code, message, request_info):
        self.Status.setText("Server Error or Invalid Response: " \
                            + "ERROR " + code + " - " + message)

class DataService(JSONProxy):
    def __init__(self):
        JSONProxy.__init__(self, "../../default/call/jsonrpc",
                           ["getTasks", "addTask","deleteTask"])

if __name__ == '__main__':
    app = TodoApp()
    app.onModuleLoad()
``:code

六つ目に、アプリケーションを実行する前にPyjamasを起動します：
``
cd /path/to/todo/static/
python /python/pyjamas-0.5p1/bin/pyjsbuild TodoApp.py
``:code

これによりPythonコードがJavaScriptに変換されるためブラウザ上で実行できるようになります。

アプリケーションは以下のURLより接続します：

``
http://127.0.0.1:8000/todo/default/todoApp
``:code

この小節はCasson Leighton（Pyjamas開発者）と共にChris Pironsが作成し、Alexei　Vinidiktovが更新しました。Pyjamasのバージョン0.5p1にてテストされています。このサンプルはDjangoの参照``blogspot1``:cite.を参考にしています。

#### AMFRPC
``PyAMF``:inxx ``Adobe Flash``:inxx

AMFRPCはフラッシュクライアントがサーバーと通信するために使用されているリモートプロシージャコールプロトコルです。web2pyはAMFRPCをサポートしていますが、PyAMFライブラリ導入済みのweb2pyをソースから実行する必要があります。LinuxやWindowsのシェルからこのコマンドを打てばインストールできます：
``
easy_install pyamf
``:code

（詳細ついてはPyAMFドキュメントを参考にしてください）

この小節では読者が既にActionScript言語をよく理解している前提で進めます。

2つの数字の値を引数とし、それらを足し算し、集計結果を返すシンプルなサービスを作成します。このweb2pyアプリケーションの名称を"pyamf_test"とし、``addNumbers``を実行します。

まず始めに、Adobe Flash（MX2004以降のいずれかのバージョン）を利用して、Flash FLA ファイルの新規作成からフラッシュクライアントアプリケーションを作成します。ファイルの最初のフレームに、以下のコードを記述します。
``
import mx.remoting.Service;
import mx.rpc.RelayResponder;
import mx.rpc.FaultEvent;
import mx.rpc.ResultEvent;
import mx.remoting.PendingCall;

var val1 = 23;
var val2 = 86;

service = new Service(
    "http://127.0.0.1:8000/pyamf_test/default/call/amfrpc3",
    null, "mydomain", null, null);

var pc:PendingCall = service.addNumbers(val1, val2);
pc.responder = new RelayResponder(this, "onResult", "onFault");

function onResult(re:ResultEvent):Void {
    trace("Result : " + re.result);
    txt_result.text = re.result;
}

function onFault(fault:FaultEvent):Void {
    trace("Fault: " + fault.fault.faultstring);
}

stop();
``:code

このコードでフラッシュクライアントは"/pyamf_test/default/gateway"ファイルにある"addNumbersという関数に対応するサービスに接続することができます。フラッシュのリモート処理を有効にするためにActionScriptバージョン2 MXをインポートしておく必要があります。Adobe Flash IDEのクラスパス設定にこれらのクラスのパスを追加しておくか、単純に新規作成ファイルに"mx"フォルダを追加してください。

サービスコンストラクタの引数に注意してください。最初の引数はこれから作成するサービスに対応するURLです。三つ目の引数はサービスのドメイン名です。"mydomain"と呼ぶことにします。

二つ目に、"txt_result"というダイナミックフィールドを作成してステージ上に配置します。
"txt_result" and place it on the stage.

三つ目に、上記のフラッシュクライアントと通信できるweb2pyゲートウェイをセットアップします。

新しいサービスとフラッシュクライアント用のAMFゲートウェイをホストする``pyamf_test``という新規のweb2pyアプリケーションを作成します。"default.py"コントローラーを以下のように編集してください。
``
@service.amfrpc3('mydomain')
def addNumbers(val1, val2):
    return val1 + val2

def call(): return service()
``:code

四つ目に、フラッシュアプリケーションをコンパイルして``pyamf_test.swf``という名称でエクスポート/パブリッシュし、"pyamf_test"という新規に作成したゲートウェイをホスティングするアプライアンスの中の"static"フォルダに"pyamf_test.amf"、 "pyamf_test.html"、 "AC_RunActiveContent.js"、"crossdomain.xml"を入れます。

以下のURLでテストできます：

``
http://127.0.0.1:8000/pyamf_test/static/pyamf_test.html
``:code

ゲートウェイはクライアントがaddNumbersに接続した際にバックグラウンドで実行されます。

もしAMF3の代わりにAMF0を使用している場合は：
``
@service.amfrpc
``:code

の代わりに：
``
@service.amfrpc3('mydomain')
``:code

この場合はサービスURLも変更する必要があります：

``
http://127.0.0.1:8000/pyamf_test/default/call/amfrpc
``:code

#### SOAP
``SOAP``:inxx

web2pyにはMariano Reingartが作成したSOAPクライアントとサーバーがあります。XML-RPCとほとんど同じように使うことができます：

次のコードを考えてみましょう、例えば"default.py"コントローラーにて：
``
@service.soap('MyAdd',returns={'result':int},args={'a':int,'b':int,})
def add(a,b):
    return a+b
``:code

そしてpythonシェルで以下を実行できます：
``
>>> from gluon.contrib.pysimplesoap.client import SoapClient
>>> client = SoapClient(wsdl="http://localhost:8000/app/default/call/soap?WSDL")
>>> print client.MyAdd(a=1,b=2)
{'result': 3}
``:code

テキストの値を取得する際に適切なエンコーディングをするには、u'proper utf8 text'を指定してください。

そのサービスのWSDLは：

``
http://127.0.0.1:8000/app/default/call/soap?WSDL
``:code

そして公開されているメソッドのドキュメントを取得するには：

``
http://127.0.0.1:8000/app/default/call/soap
``:code

### 低レベル API とその他のレシピ

#### simplejson
``JSON``:inxx ``simplejson``:inxx

web2pyにはBob Ippolitoが開発したgluon.contrib.simplejsonがあります。このモジュールは最も標準的なPython-JSONのエンコーダ・デコーダを提供します。

SimpleJSONは二つの機能から構成されています：
- ``gluon.contrib.simplesjson.dumps(a)``はPythonオブジェクト``a``をJSONにエンコードします。
- ``gluon.contrib.simplejson.loads(b)``はJavaScriptオブジェクト``b``をPtyhonオブジェクトにデコードします。

シリアライズされるオブジェクト型には基本型、リスト、辞書があります。複合的なオブジェクトはユーザ定義クラスを除きシリアライズできます。

これは低レベルAPIを使った曜日を含むPythonリストをシリアライズする簡単なアクション（例:コントローラー"default.py"）です：
``
def weekdays():
    names=['Sunday','Monday','Tuesday','Wednesday',
           'Thursday','Friday','Saturday']
    import gluon.contrib.simplejson
    return gluon.contrib.simplejson.dumps(names)
``:code

以下はAjaxリクエストを上記のアクションに送信し、JSONメッセージを受信しリストを対応するJavaScript変数に保存するHTMLのサンプルです。
``
{{extend 'layout.html'}}
<script>
$.getJSON('/application/default/weekdays',
          function(data){ alert(data); });
</script>
``:code

このコードはAjaxの実行、応答時に、ローカルJavaScript変数``data``にある曜日の名称を保存してその変数をコールバック関数に返す働きをする``$.getJSON``というjQuery関数を使用しています。この例ではコールバック関数が訪問者にデータが受信されたことを知らせます。

#### PyRTF
``PyRTF``:inxx ``RTF``:inxx

ウェブサイトでよく必要になる他の機能としてWordで読み込むことができるテキスト文書の作成があります。一番簡単な方法はRich Text Format (RTF) を使うことです。このフォーマットはMicrosoftによって発明されて、それからは標準のフォーマットになりました。

web2pyにはSimon Cusackによって開発されGrant Edwardsによって改良されたgluon.contrib.pyrtfがあります。このモジュールは色付きのテキストや画像を含むRTF文書をプログラム的に作成することができます。

次の例では二つの標準的なRTFクラスDocumentとSectionをインスタンス化し、後者を前者に追加し後者にダミーテキストを挿入しています。
``
def makertf():
    import gluon.contrib.pyrtf as q
    doc=q.Document()
    section=q.Section()
    doc.Sections.append(section)
    section.append('Section Title')
    section.append('web2py is great. '*100)
    response.headers['Content-Type']='text/rtf'
    return q.dumps(doc)
``:code

Documentの最後は``q.dumps(doc)``によってシリアライズされます。RTF文書を返す前にヘッダーにcontent-typeを指定する必要があることに注意してください、そうしないとブラウザーはファイルをどのように処理していいか分かりません。

ブラウザの設定によって、ファイルを保存するかテキストエディタで開くかを聞かれます。

#### ReportLab と PDF
``ReportLab``:inxx ``PDF``:inxx

web2pyは"ReportLab"``ReportLab``:citeという追加ライブラリでPDFドキュメントを作成することもできます。
web2py can also generate PDF documents, with an additional library called "ReportLab"``ReportLab``:cite .

ソースからweb2pyを実行しているのであれば、ReportLabが既にインストールされている可能性が高いです。Windowsバイナリディストリビューションの場合は、ReportLabを"wb2py/"フォルダに解凍する必要があります。Macバイナリディストリビューションの場合は、以下のフォルダに解凍する必要があります。
``
web2py.app/Contents/Resources/
``:code

ReportLabがインストールされてweb2pyがそれを実行できる状態であるとします。PDFドキュメントを作成する"get_me_a_pdf"という簡単な関数を作成して行きましょう：
``
from reportlab.platypus import *
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.rl_config import defaultPageSize
from reportlab.lib.units import inch, mm
from reportlab.lib.enums import TA_LEFT, TA_RIGHT, TA_CENTER, TA_JUSTIFY
from reportlab.lib import colors
from uuid import uuid4
from cgi import escape
import os

def get_me_a_pdf():
    title = "This The Doc Title"
    heading = "First Paragraph"
    text = 'bla '* 10000

    styles = getSampleStyleSheet()
    tmpfilename=os.path.join(request.folder,'private',str(uuid4()))
    doc = SimpleDocTemplate(tmpfilename)
    story = []
    story.append(Paragraph(escape(title),styles["Title"]))
    story.append(Paragraph(escape(heading),styles["Heading2"]))
    story.append(Paragraph(escape(text),styles["Normal"]))
    story.append(Spacer(1,2*inch))
    doc.build(story)
    data = open(tmpfilename,"rb").read()
    os.unlink(tmpfilename)
    response.headers['Content-Type']='application/pdf'
    return data
``:code

``tmpfilename``という仮のファイル名でPDFを作成し、そのファイルから作成されたPDFを読み込み削除している点に注意してください。

ReportLab APIについての詳細はReportLabドキュメントを参照してください。``Paragraph``や``Spacer``などを利用できるReportLabのPlatypus APIはお勧めです。

### サービスと認証
``Authentication``:inxx

前の章で次のようなデコレータについて説明をしました：
``
@auth.requires_login()
@auth.requires_membership(...)
@auth.requires_permission(...)
``:code

通常のアクション（サービスとしてのデコレータではない）では、これらのデコレータをHTML以外のフォーマットにレンダリングすることもできます。

サービスとして定義された関数と``@service...``や``@auth...``デコレータは使用されるべきではありません。異なる二つのタイプのデコレータを混在させることはできません。もし認証が実行された場合、その``call``アクションはデコレータされる必要があります。
``
@auth.requires_login()
def call(): return service()
``:code

複数のサービスオブジェクトをインスタンス化し、それらを同様の異なる関数に登録し、その片方を権限付きで公開するということが可能である点に注意してください。
``
public_services=Service(globals())
private_services=Service(globals())

@public_service.jsonrpc
@private_service.jsonrpc
def f(): return 'public'

@private_service.jsonrpc
def g(): return 'private'

def public_call(): return public_service()

@auth.requires_login()
def private_call(): return private_service()
``:code

これは呼び出し元がHTTPヘッダー（前章で記述された有効なセッションクッキーやBasic認証を利用して）にクレデンシャルを渡すことを前提にしています。クライアントはそれをサポートしている必要があります：一部のクライアントはサポートしていません。
