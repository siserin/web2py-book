## はじめに
web2py``web2py``:citeは、セキュアなデータベース駆動型のWebアプリケーションをアジャイルで開発するための、フリーでオープンなWebフレームワークです。フレームワーク自身がPythonでかかれていて、かつPython``python``:citeでプログラムする事ができます。web2pyはフルスタックフレームワークです、つまり完全なWebアプリケーションの開発に必要なすべてのコンポーネントを含んでいます。

web2pyは、Web開発者をソフトウェア開発の良いプラクティス、いわゆるモデル／ビュー／コントローラ (MVC)パターンに導くためのガイドとなるよう、デザインされています。web2pyは、 データの構造の表現(モデル)を、データの見せ方の表現(ビュー)やアプリケーションのロジックやワークフロー(コントローラ)から分離します。web2pyは 開発者を助けるために、それら3つの構成に対して、それぞれ、設計、実装、テストできるようなライブラリを提供し、協調して動作させることができます。

web2pyは、セキュリティを考慮して構築されています。つまり、確立された手法に沿った形で、セキュリティの脆弱性につながるような問題を解決しています。たとえばこのフレームワークでは、すべての入力を検証し(インジェクションを防ぐため）、すべての出力をエスケープし（クロスサイトスクリプティングを防ぐため）、アップロードしたファイル名を変更します（ディレクトリトラバーサルを防ぐため）。web2pyはアプリケーション開発者に対して、セキュリティを考慮した実装をせざるをえないようにします。

web2pyには、開発者がSQLを記述しなくてもよいようにするために、SQL``sql:w``:citeを動的に作成するデータベース抽象レイヤ(DAL)が含まれています。DALは、SQLite``sqlite``:cite、MySQL``mysql``:cite、PostgreSQL``postgres``:cite、MSSQL``mssql``:cite、Firebird``firebird``:cite、Oracle``oracle``:cite、IBM DB2``db2``:cite、Informix``informix``:cite、そしてIngres``ingresdb``:citeについて、それぞれのデータベースに依存しない透過的なSQLを生成することができます。さらに、Google App Engine(GAE)``gae``:cite上で動いている時は、Google BigTableに対する関数呼び出しも生成することができます。一旦、データベースのテーブルを定義すると、データベースとテーブルにアクセスできる十分な機能を持ったWebベースのデータベース管理インターフェースが生成されます。

web2pyは、Webはコンピュータである、というWeb2.0のパラダイムを完全に取り入れるための最適なフレームワークという点で、他のWebフレームワークとは異なります。実際、web2pyにはインストールや設定などはありません。Pythonが実行できる任意のアーキテクチャ(Windows、Windows CE、Mac OS X、iOS、Unix / Linux)で動作します。そして開発、デプロイ、メンテナンスといったアプリケーション開発の各フェーズに対して、ローカルやリモートから操作のできるWebのインターフェイスを提供しています。web2pyはCPython（Cによる実装）およびJython（Java実装）で動きます。動作させられるバージョンは2.4、2.5、2.6および2.7がありますが、"正式"には2.5のみを対象内として、その他のバージョンについては下位互換性の確認も含めてテストは行っていません。

web2pyは、チケットシステムを提供しています。エラーが発生した場合、チケットが発行され、エラーが管理者用に記録されます。

web2pyはオープンソースであり、GPL2.0ライセンスの下に公開されています。ただし、web2pyで開発されたアプリケーションは、どのライセンス制約にも縛られません。アプリケーションがweb2pyのソースコードを含んでいない限り、"派生物"としてはみなされません。web2pyは、アプリケーションが実行時にweb2pyを必要とする場合でも、それをバイトコードにコンパイルし、そしてソースを公開せずに配布する事を、開発者に対して認めています。web2pyのライセンスには、事前コンパイルされたweb2pyのバイナリを含みつつソースコードを含まない形で製品を出荷する事も例外的に認めています。

web2pyのもう1つの特徴は、将来のバージョンにおいて後方互換性を維持することを誓っていることです。web2pyは2007年10月に初めて公開されました。新機能が追加されてバグも修正されていますが、しかしweb2py1.0で動いているプログラムは、最新版でも動きます。

さてここで、web2pyの記述の強力さとシンプルさを示すいくつかの例を示します。次のコードをみてください：
``
db.define_table('person', Field('name'), Field('image', 'upload'))
``:code

このコードは、"name"という文字列、"image"というアップロードが必要なもの（実際の画像）、という二つのフィールドを持つ"person"というテーブルを、データベースに作成します。テーブルがすでに存在しているが定義と一致しない場合には、適切に変更されます。

上記のようにテーブルが定義されている場合、次のコードを見てください：
``
form = crud.create(db.person)
``:code

このコードは、画像もアップロードすることのできるpersonテーブル用の登録フォームを作成します。このコードはまた、送信されたフォームを検証し、アップロードされた画像を安全な方法でリネームし、画像をファイルに保存し、対応するレコードをデータベースに挿入し、二重投稿を防ぎ、送信データの検証が通らない場合にエラーメッセージをフォームに追加して最終的に修飾されるようにします。

次のコードを見てください。
``
@auth.requires_permission('read','person')
def f(): ....
``:code

このコードは、訪問者が"person"テーブルのレコードを"read"できる権限を持つグループのメンバーでない限り、関数fへアクセスを拒否します。もし訪問者がログインをしていない場合、ログインページ（web2pyのデフォルトとして提供されている）にリダイレクトされます。

次のコードは、ページのコンポーネントをコードに埋め込んでいます。
``
{{=LOAD('other_controller','function.load',ajax=True, ajax_trap=True)}}
``:code

このコードはweb2pyに対して、ビューの中に 他のコントローラー関数（これは任意の関数で動作)によって生成されたコンテンツをロードするように指示します。コンテンツは Ajax を介してを読み込まれ、現在のページ(現在のレイアウトが使用されます。other_controllerの 関数のレイアウトは使用されません)に埋め込まれます。また 読み込まれたコンテンツに含まれるすべてのフォームの送信処理をトラップするので、ページをリロードすることなくAjax 経由で送信できます。非 web2py アプリケーションからコンテンツを読み込むことができます。

LOADヘルパーは、アプリケーションをモジュール化されたデザインにすることを助けます。本書の最後の章でくわしく解説します。

### 原則

Pythonのプログラミングは、主として、以下の基本原則に従います：
- 同じことを繰り返さない (DRY)
- あることを実現する方法は一通りだけである
- 暗黙的よりも明示的を良しとする

web2pyは、最初の2つの原則は十分に取り入れています。コードの重複を抑制するようなソフトウェアエンジニアリングの健全なプラクティスの使用を促しています。また、Webアプリケーションの開発に共通するほぼすべてのタスク（フォームの作成や操作、セッション管理、クッキー、エラーなど）について指針を示します。

``request``:inxx 
web2pyが他のフレームワークと異なるのは、3つ目の原則に関してです。これは最初の2つの原則と時々競合する事があります。特に、web2pyはユーザーアプリケーションをインポートするのではなく、事前定義されたコンテキストの上でそれらを実行します。このコンテキストでは、Pythonのキーワードだけでなく、web2pyのキーワードも公開されています。

これらの機能は魔法のように見えるかもしれませんが、そうではありません。簡単に言うと、実際には、いくつかのモジュールはすでにインポートされ、あなたはそれをする必要がありません。他のフレームワークの面倒な特性である、すべてのモデルやコントローラの先頭に同じモジュールをインポートすることを強いることを避けるようにしています。

web2pyは、独自のモジュールをインポートすることにより、時間を節約し、ミスを防ぎます。このことは、「おなじ事を繰り返さない」、「あることを実現する方法は一通りだけである」という精神に基づいています。

他のPythonモジュールやサードパーティ製のモジュールを使用したい場合は、他のPythonプログラムと同様に、それらのモジュールを明示的にインポートしなければなりません。

### Webフレームワーク
``PHP``:inxx ``ASP``:inxx ``JSP``:inxx

最も基本的なレベルでは、Webアプリケーションは、対応するURLが訪問されたときに実行されるプログラム(または関数)の集合からなります。プログラムの出力は訪問者に返され、ブラウザでレンダリングされます。

Webフレームワークの目的は、新しいアプリケーションを、迅速かつ、容易に、ミスなく構築できるようにすることです。これは、APIやツールを提供することによって行われます。それにより、必要とされるコードの量が減り、単純化されます。

Webアプリケーションの開発には2つの古典的なアプローチがあります：
- HTML``html:w,html:o``:citeをプログラムで生成する
- HTMLページにコードを埋め込む

第1のモデルは、初期のCGIスクリプトなどが従うものです。第2のモデルは、PHP``php``:cite(コードはC言語に似たPHP)、ASP（コードはVisual Basic）、JSP（コードはJava）などが従うものです。

ここでは、実行時にデータベースからデータを取得し、選択したレコードを表示するHTMLページを返すPHPプログラムの例を示します：
``
<html><body><h1>Records</h1><?
  mysql_connect(localhost,username,password);
  @mysql_select_db(database) or die( "Unable to select database");
  $query="SELECT * FROM contacts";
  $result=mysql_query($query);
  mysql_close();
  $i=0;
  while ($i < mysql_numrows($result)) {
    $name=mysql_result($result,$i,"name");
    $phone=mysql_result($result,$i,"phone");
    echo "<b>$name</b><br>Phone:$phone<br /><br /><hr /><br />";
    $i++;
  }
?></body></html>
``:code

このアプローチの問題は、HTMLにコードが埋め込まれる際、非常に同じようなコードが、追記するHTMLを生成するのに、また、データベースに問い合わせるSQL文を生成するのに必要となることです。それにより、アプリケーションの複数のレイヤーが絡み合って可読性や保守性が困難になります。この状況はAjaxアプリケーションにおいてより悪化します。さらに、アプリケーションを構成するページ(ファイル)の数とともに複雑さが増加します。

上記の例の機能は、web2pyを使うと2行のPythonコードで表現できます：
``
def index():
    return HTML(BODY(H1('Records'), db().select(db.contacts.ALL)))
``:code

この単純な例では、HTMLページの構造が、``HTML``、``BODY``、``H1``オブジェクトを用いてプログラム的に表現されています。データベース ``db`` は ``select`` コマンドによって問い合わせられ、最終的にすべてHTMLへと加工されます。なお、``db`` はキーワードではなく、ユーザー定義変数です。本書では、曖昧を避けるため、この名前をデータベースコネクションとして一貫して参照します。

Webフレームワークは典型的に2つのタイプに分類されます：1つは、いくつかのサードパーティのコンポーネントを組み立てて(接合して)構築された「グルー（接着）」フレームワークです。もう一つは、緊密に組み合わせされて協調して動作するように特別に設計されたコンポーネントを組み合わせて構築された「フルスタック」フレームワークです。

web2pyはフルスタックフレームワークです。ほぼすべてのコンポーネントは、スクラッチで構築され一体となって動作するように設計されています。ただし、それらはweb2pyフレームワーク全体の外でも同様に機能します。たとえば、データベース抽象化レイヤ（DAL）や言語テンプレートは、web2pyフレームワークと独立に使用することができます。これは、独自のPythonアプリケーションに``gluon.sql``や``gluon.template``をインポートする事によって可能です。``gluon`` はweb2pyのモジュールの名前で、システムライブラリを含んでいます。いくつかのweb2pyのライブラリは、たとえばデータベースのテーブルからフォームを構築し処理する機能などは、別のweb2pyの一部に依存しています。web2pyはまた、他のテンプレート言語やDALなどのサードパーティー製のPythonのライブラリとともに動作させることも可能です。しかし、それらはオリジナルのコンポーネントほどには緊密に連携することはないでしょう。

### モデル、ビュー、コントローラ
``Model-View-Controller``:inxx
web2pyでは、データ表現（モデル）、データの表示（ビュー）、アプリケーションの作業手順（コントローラ）を分離することを奨励しています。前述の例をもう一度考えて、web2pyのアプリケーションが、この点でどのように構築されるのかを見てみましょう。ここで示すのは、web2pyのMVCを編集するインターフェイスの例です：

[[image @///image/en0.png center 480px]]

次図は、web2pyのリクエストに対する典型的な実行順序を示したものです：

[[image @///image/en100.png center 480px]]

この図において：
- Serverは、web2py内蔵のWebサーバー、もしくは、Apacheなどのサードパーティ製のサーバーにすることができます。Serverはマルチスレッドで処理します。
- "main"は、メインのWSGIアプリケーションです。これは、すべての共通タスクを実行し、ユーザーアプリケーションを制御します。クッキー、セッション、トランザクション、URLのルーティングと逆ルーティング、ディスパッチ処理を扱います。
Webサーバー側ですでに行われていなくても、静的ファイルを仲介し送信することができます。
- モデル、ビュー、コントローラのコンポーネントは、ユーザーアプリケーションを構成します。
- 複数のアプリケーションは、同じweb2pyのインスタンスでホストすることができます。
- 破線の矢印は、（単一/複数の）データベースエンジンとの通信を表しています。データベースへの問い合わせは、SQLで直接（非推奨）、もしくは、web2pyのデータベース抽象化レイヤーを利用（推奨）して記述することができます。後者の場合、web2pyのアプリケーションコードは特定のデータベースエンジンに依存しないものとなります。
- ディスパッチャーは、リクエストされたURLをコントローラの関数呼び出しにマッピングします。関数の実行結果は、文字列かまたは複数のシンボルからなる辞書（ハッシュテーブル）として返すことができます。辞書内のデータはビューによって表示されます。HTMLページをリクエストした場合(デフォルトの挙動)、辞書はHTMLページの中でレンダリングされます。同じページをXMLとしてリクエストした場合、web2pyは辞書をXMLとして表示することができるビューを探します。開発者はすでにサポートされるプロトコル（HTML、XML、JSON、RSS、CSV、RTF）や、追加のカスタムプロトコルで、ページを表示するビューを作成することができます。
- すべての呼び出しはトランザクション内で操作され、キャッチされない例外が発生した場合はどれも、トランザクションがロールバックされます。リクエストが成功した場合は、トランザクションがコミットされます。
- web2pyはまた、セッションとセッションのクッキーを自動的に処理し、トランザクションがコミットされるときに、特に指定がない場合、セッションも同時に保存されます。
- (cronによる)定期タスクを登録し、予定された時刻に、または/かつ、特定のアクションが完了した後に実行することができます。この方法により、時間のかかるタスクやコンピュータ負荷の高いタスクを、操作性を落とすことなくバックグラウンドで実行することが可能になります。

次に示すのは、最小限かつ完結したMVCアプリケーションです。3つのファイルから構成されています：

-----
"db.py"はモデルです：
-----

``
db = DAL('sqlite://storage.sqlite')
db.define_table('contacts',
   Field('name'),
   Field('phone'))
``:code

ここでは、データベース（この例では``storage.sqlite``ファイルに保存されるSQLite）に接続し、``contacts``というテーブルを定義しています。テーブルが存在しない場合は、web2pyがそれを作成します。そして、透過的に、裏では、利用するデータベースエンジン固有の適切な文法においてSQLコードを生成します。生成されたSQLを見ることできますが、データベースを、デフォルトのSQLiteから、MySQLや、PostgreSQL、MSSQL、Firebird、Oracle、DB2、Informix、Interbase、Ingress、さらに、Google App EngineのGoogle BigTableに置き換えてもコードを変更する必要はありません。

一旦、テーブルが定義され作成されると、**appadmin**と呼ばれるデータベースやテーブルにアクセスするために十分な機能を持つWebベースのデータベース管理インターフェイスが利用できます。

-----
"default.py"はコントローラです：
-----

``
def contacts():
    return dict(records=db().select(db.contacts.ALL))
``:code

web2pyにおいて、URLはPythonモジュールと関数呼び出しにマッピングされます。この例では、コントローラーが``contacts``という単一の関数(または"アクション")を持っています。アクションは文字列(返されるWebページ)かPythonの辞書(``key:value`` ペアの集合)を返すことになります。関数が辞書を返す場合は、コントローラ/関数と同じ名前のビューに渡され、結果的にページがレンダリングされます。この例では、``contacts``関数は、データベースを``select``し、結果のレコードを、辞書の``records``キーに関連付けられた値として返しています。

-----
"default/contacts.html"はビューです：
-----

``
{{extend 'layout.html'}}
<h1>Records</h1>
{{for record in records:}}
{{=record.name}}: {{=record.phone}}<br />
{{pass}}
``:code

このビューは、関連するコントローラ・関数(アクション)が実行された後に、web2pyによって自動的に呼び出されます。このビューの目的は、``records=...``として返された辞書内の変数をHTMLにレンダリングすることです。ビューのファイルはHTMLで書かれますが、``{{`` と ``}}`` の特殊文字で区切られたPythonコードを埋め込みます。これは、PHPコードのサンプルとは大きく異なります。なぜなら、HTMLに埋め込まれているコードは"プレゼンテーション層"のコードだけだからです。ビューの先頭で参照されている"layout.html"ファイルは、web2pyによって提供されたもので、すべてのweb2pyアプリケーションのための基本的なレイアウトを定めます。レイアウトファイルは簡単に修正したり置き換えたりすることができます。

### なぜweb2pyか

web2pyは数あるWebアプリケーションの中の1つですが、魅力的でユニークな特徴を持っています。web2pyは、元々、次のような主要な動機に従いながら、教育用ツールとして開発されました。
- サーバーサイドのWeb開発について、機能の妥協なしに、簡単に学ぶことができます。この理由から、web2pyはインストールと設定を必要とせず、依存性がなく(ただし、配布したソースコードはPython2.5とその標準ライブラリを必要とします)、大抵の機能はWebブラウザのインターフェースを介して利用することができます。
- web2pyは当初から安定してます。なぜなら、トップダウンの設計に従っているからです。つまり、APIは実装される前に設計されました。新しい機能が追加されてきても、web2pyは後方互換性を破りませんでしたし、これから機能追加しても破ることはないでしょう。
- web2pyは最も重要なセキュリティの問題に積極的に取り組んでいます。それらは多くのモダンなWebアプリケーションを悩ませるもので、後述するOWASP``owasp``:citeによって定められています。
- web2pyは軽量です。コアライブラリは、データベース抽象化レイヤ、テンプレート言語、すべてのヘルパーを含んで、合計1.4MBです。すべてのソースコードは、サンプルアプリケーションや画像を含んで、合計10.4MBです。
- web2pyは必要なメモリ量が小さく、非常に高速に動作します。Timothy Farrellによって開発されたRocket``rocket``:cite WSGI Webサーバーを使用しています。これは、mod_proxyを利用したApacheよりも30%ほど高速です。我々のテストでは、平均的なPCで、データベースにアクセスしない平均的な動的ページにおいて約10ms抑えることが示されています。DALは極めて低いオーバーヘッドしかなく、通常は3％未満です。

``wsgi:w,wsgi:o``:cite 
WSGI(Web Server Gateway Interface)は、WebサーバーとPythonアプリケーション間を通信するためのPython標準として取り上げらています。

これは、メインとなるweb2pyの**admin**インターフェースのスクリーンショットです：

[[image @///image/en200.png center 480px]]

### セキュリティ
``security``:inxx
The Open Web Application Security Project ``owasp``:cite(OWASP)は、アプリケーションソフトウェアのセキュリティを向上させることに焦点を置いた、自由で開かれた世界的なコミュニティです。

OWASPでは、Webアプリケーションのリスクとなるセキュリティ問題のトップ10を挙げています。ここではこのリストを、web2pyがどのようにこれらの問題を解決しているかという説明とともに、再掲します：
- ``cross site scripting``:inxx  "クロスサイトスクリプティング（XSS）：アプリケーションがユーザからデータを受信して、そのデータに対して検証やエンコードを行わずにブラウザに送信した時には、常にXSSの脆弱性が発生します。XSSは、セッションのハイジャック、Webサイトの改ざん、ワーム侵入の許可を可能にするような、犠牲となるブラウザ上で動くスクリプトを攻撃者が実行できるようにしてしまいます"。web2pyはデフォルトで、ビューに表示されるすべての変数をエスケープすることでXSSを防ぎます。
- ``injection flaws``:inxx "インジェクションフロー：インジェクションフロー、特にSQLインジェクションは、Webアプリケーションで一般的なものです。インジェクションは、ユーザーが入力したデータをコマンドまたはクエリの一部としてインタプリタに送信するときに発生します。攻撃者の不正なデータはインタプリタに対して意図しないコマンドやデータの変更を実行させます"。web2pyには、データベース抽象化レイヤが含まれてて、それがSQLインジェクションを防ぎます。通常は、SQL文は開発者によって書かれません。代わりにSQLはDALによって動的に生成され、すべての挿入データが適切にエスケープされることを保証します。
- ``malicious file execution``:inxx "悪意のあるファイルの実行：脆弱なコードによるリモートファイルのインクルード（RFI）は、悪意のあるコードやデータを持ち込ませることを許し、サーバー全体を危険にさらすような破壊的な攻撃につながります"。web2pyは公開するコードのみ実行を許可し、悪意のあるファイルの実行を防止します。インポートされた関数は決して公開されません。つまり、アクションのみが公開されます。Webベースの管理インターフェースを用いると、何が公開されているのか、いないのかを把握するのが容易になります。
- ``insecure object reference``:inxx "安全でない直接オブジェクト参照：直接オブジェクト参照とは、開発者が内部実装のオブジェクト、たとえば、ファイル、ディレクトリ、データベースのレコード、キーなどへの参照を、URLやフォームのパラメータとして公開したときに起こるものです。攻撃者は、それらの参照を操作することができ、認証なしに他のオブジェクトにアクセスすることができます"。web2pyはいかなる内部オブジェクトも公開しません。さらに、すべてのURLを検証し、ディレクトリ走査の攻撃を防ぎます。web2pyはまた、すべての入力値を自動的に検証するフォームを作成するメカニズムを提供します。
- ``CSRF``:inxx  "クロスサイトリクエストフォージェリ（CSRF）：CSRF攻撃はログイン処理が行われた犠牲者のブラウザに、事前に認証されたリクエストを、脆弱なWebアプリケーションに送信させます。これにより、犠牲者のブラウザは、攻撃者の利益となる悪意のあるアクションを実行させられます。CSRFは攻撃を行うWebアプリケーションと同じくらい強力です"。web2pyはCSRFとともに、偶発的なフォームの二重投稿も防ぎます。これは、一度きりのランダムトークンを各フォームに対して割り当てることで実現されます。さらに、web2pyはUUIDをセッションCookieとして使用しています。
- ``information leakage``:inxx ``improper error handling``:inxx 情報漏洩と、不適切なエラー処理：アプリケーションは、設定や内部資料などの情報を意図せず漏洩したり、さまざまなアプリケーションの問題によりプライバシーの侵害を起こす恐れがあります。攻撃者はこの弱点を利用して機密データを盗み、より深刻な攻撃を実施します"。web2pyはチケットシステムを持っています。どんなエラーでも、コードがユーザーにさらされることはありません。すべてのエラーはログに記録され、エラーの追跡を可能するためのチケットがユーザーに発行されます。しかし、エラーとソースコードに対しては管理者しかアクセスできません。
- "不適切な認証やセッション管理：アカウントのトークンやセッションのトークンは、しばしば適切に保護されません。攻撃者はパスワード、キー、認証トークンなどを侵害し、他のユーザーに成りすまします"。web2pyでは、管理者認証のための組み込み機構を提供します。そこでは、アプリケーションごとにセッションが独立に管理されます。管理インターフェイスでは、"localhost"からではないクライアントからの接続には、セキュアなセッションクッキーの使用を強制します。アプリケーションに対しては、強力なロールベースのアクセスコントロールAPIを用意しています。
- ``cryptographic store``:inxx  "安全でない暗号保存：Webアプリケーションにおいて、データや機密情報を保護するための暗号化関数を適切に利用しているものはほとんどありません。攻撃者は、弱く保護されたデータから、身元情報の盗難や、クレジットカード詐欺などの他の犯罪を実施します"。web2pyでは、保存したパスワードを保護するために、MD5やHMAC+SHA-512のハッシュアルゴリズムを使用しています。他のアルゴリズムも利用可能です。
- ``secure communications``:inxx "安全でない通信：アプリケーションは、機密情報の通信を保護する必要になったとき、ネットワークトラフィックの暗号化をたびたび怠ることがあります"。web2pyは、SSL``ssl``:citeが有効なRocket WSGI サーバーを用意していますが、SSLの暗号化通信を提供するApacheやLigthttpdとmod_sslを用いることができます。
- ``access restriction``:inxx "URLアクセス制限の失敗：よく見かけるのは、重要な機能を、非認証ユーザーに対して、リンクやURLの表示を防ぐだけで保護しているものです。攻撃者はこの弱点を利用することができ、URLを直接叩くことで、認証されていない操作にアクセスし実行します"。web2pyはURLリクエストをPythonのモジュールと関数へ対応付けします。そして、どの関数が公開され、どれが認証や権限が必要かを宣言するメカニズムを用意しています。組み込みのロールベースのアクセスコントロールAPIは、任意の関数へのアクセスを、ログインやグループメンバーシップ、グループベースの権限に基づいて制限することを可能にします。その権限はとても細かい粒度で行われ、また、CRUDと組み合わせて、たとえば、特定のテーブル、または/かつ、レコードへのアクセス権限を与えることができます。

web2pyはセキュリティに対する論評を受けています。その評価は参照``pythonsecurity``:citeで見ることができます。

### 内部構造

web2pyは公式サイトからダウンロードすることができます：

``
http://www.web2py.com
``:code

web2pyは、以下のコンポーネントで構成されています：
- **libraries**: web2pyのコア機能を提供し、プログラムからアクセスできます。
- **web server**: Rocket WSGI Webサーバーです。
- the **admin** application: 他のweb2pyアプリケーションを作成、設計、管理するために利用します。web2pyアプリケーションを構築するための、完結的なWebベースの統合開発環境（IDE）を提供します。また、WebベースのテストやWebベースのシェルなどの他の機能も用意されています。
- the **examples** application: ドキュメントとインタラクティブな例を含んでいます。 exapmles は公式のweb2py.com Webサイトのクローンで、epydoc ドキュメンテーションを盛り込んでいます。
- the **welcome** application: その他すべてのアプリケーションのための、基本的な雛形となるテンプレートです。デフォルトでは、純粋なCSSによるカスケードメニューとユーザー認証（第8章で解説）が含まれます。

web2pyはソースコード版のほか、Microsoft Windows用や、Mac OS X用のバイナリ形式で公開されています。

配布されたソースコードは、Pythonが動くプラットフォームならどこでも利用可能で、また、上記のコンポーネントを含んでいます。ソースコードを実行するには、Python2.5があらかじめシステムにインストールされている必要があります。また、サポートされているデータベースエンジンの1つがインストールされている必要があります。テスト目的や軽めの要望のアプリケーションには、Python 2.5に含まれているSQLiteデータベースを使用するのもいいでしょう。

バイナリ版のweb2py（Windows用およびMac OS X 用）には、Python 2.5インタプリタとSQLiteデータベースが含まれます。技術的には、これら2つはweb2pyのコンポーネントではありません。これらをバイナリ配布に含めることで、web2pyを難しい設定など無しにすぐに実行することが可能になります。

次の図は、全体的なweb2pyの構造を描いたものです：

[[image @///image/en300.png center 480px]]

### ライセンス
``license``:inxx

web2pyはGPLのバージョン2でライセンスされています。ライセンスの全文は、参照``gpl2``:citeに用意されています。

ここにはライセンスが含まれていますが、次の条項に限定されません：

1. それぞれの複製物において適切な著作権表示と保証の否認声明(disclaimer of warranty)を目立つよう適切に掲載し、またこの契約書および一切の保証の不在に触れた告知すべてをそのまま残し、そしてこの契約書の複製物を『プログラム』のいかなる受領者にも『プログラム』と共に頒布する限り、あなたは『プログラム』のソースコードの複製物を、あなたが受け取った通りの形で複製または頒布することができる。媒体は問わない。

[...]

4. あなたは『プログラム』を、この契約書において明確に提示された行為を除き複製や改変、サブライセンス、あるいは頒布してはならない。他に『プログラム』を複製や改変、サブライセンス、あるいは頒布する企てはすべて無効であり、この契約書の下でのあなたの権利を自動的に終結させることになろう。

[...]

11. 『プログラム』は代価無しに利用が許可されるので、適切な法が認める限りにおいて、『プログラム』に関するいかなる保証も存在しない。書面で別に述べる場合を除いて、著作権者、またはその他の団体は、『プログラム』を、表明されたか言外にかは問わず、商業的適性を保証するほのめかしやある特定の目的への適合性(に限られない)を含む一切の保証無しに「あるがまま」で提供する。『プログラム』の質と性能に関するリスクのすべてはあなたに帰属する。『プログラム』に欠陥があると判明した場合、あなたは必要な保守点検や補修、修正に要するコストのすべてを引き受けることになる。

12. 適用法による要請がない限りまたは書面での同意いかなる場合も、著作権、および/または変更することができるか、プログラムを再頒布、上記の規定に従い、損害あなたに責任を負わないものと、を含め、その他の第三者損害、特別、または付随的一般または使用不能に起因する必然的な損害は、（不正確なレンダリングされているまたは損失は、お客様または第三者もしくは他のプログラムと一緒に動作するプログラムの障害によって被った含むが、データやデータの損失の限定）プログラムを使用しても場合はその保有者、またはその他の第三者がそのような損害の可能性について知らされている。

- web2pyにはいくつかのサードパーティー製のコードが含まれています（たとえばPythonインタプリタ、RocketWebサーバー、いくつかのJavaScriptライブラリなどです）。それぞれの作者やライセンスは、公式Webサイト``web2py``:citeと自身のコードに記載されています。
- web2pyで開発されたアプリケーションは、web2pyのソースコードが含まれていないかぎり、派生物とは見なされません。これは、それらがGPLv2のライセンスに縛られないことを意味します。あなたはクローズドソースや商用ライセンスを含む任意のライセンスの下で、開発したアプリケーションを配布することができます。

**商用ライセンスに関する例外**

web2pyライセンスには、商用向けの例外を含みます：

あなたは、web2pyを使って開発したアプリケーションを、公式なバイナリ形式で公開されたweb2pyを修正せずに、オフィシャルWebサイトからダウンロードしたままの状態で、どのファイルがアプリケーションに属し、どのファイルがweb2pyに属しているかを明確に区別できる状態であれば、配布する事ができます。

### 謝辞

web2pyは、Massimo Di Pierroによって元々作成され、著作権が取得されています。最初のバージョン（1.0）は2007年10月にリリースされました。それ以来多くのユーザーに受け入れられ、その中の幾人かは、バグレポート、テスト、デバッグ、パッチやこの本の校正に貢献してきました。

主な貢献者を、アルファベット順で紹介します：

Alexey Nezhdanov,
Alvaro Justen,
Attila Csipa,
Bill Ferrett,
Boris Manojlovic,
Brian Meredyk,
Bruno Rocha,
Carsten Haese,
Chris Clark,
Chris Steel,
Christian Foster Howes,
Christopher Smiga,
CJ Lazell,
Craig Younkins,
Daniel Lin,
David Harrison
Denes Lengyel,
Douglas Soares de Andrade,
Fran Boon,
Francisco Gama,
Fred Yanowski,
Graham Dumpleton,
Gyuris Szabolcs,
Hamdy Abdel-Badeea,
Hans Donner,
Hans Murx,
Hans C. v. Stockhausen,
Ian Reinhart Geiser,
Jonathan Benn,
Jonathan Lundell,
Josh Goldfoot,
Jose Jachuf,
Keith Yang,
Kyle Smith,
Limodou,
Marcel Leuthi,
Marcello Della Longa,
Mariano Reingart,
Mark Larsen,
Mark Moore,
Markus Gritsch,
Martin Hufsky,
Mateusz Banach,
Michael Willis,
Michele Comitini,
Miguel Lopez,
Nathan Freeze,
Niall Sweeny,
Niccolo Polo,
Nicolas Bruxer,
Ondrej Such,
Pai,
Phyo Arkar Lwin,
Ramjee Ganti,
Robin Bhattacharyya,
Ruijun Luo (Iceberg),
Scott Roberts, 
Sergey Podlesnyi,
Sharriff Aina,
Sriram, Durbha,
Sterling Hankins,
Stuart Rackham,
Telman Yusupov,
Thadeus Burgess,
Tim Michelsen,
Timothy Farrell,
Vidul Nikolaev Petrov,
Yair Eshel,
Yarko Tymciurak,
Younghyun Jo,
Zahariash.

この他で貢献者を載せ忘れていることは確かだと思うので、謝罪します。

私は特に、Jonathan, Nathan, Thadeus, Tim, Iceberg, Denes, Hans and Fran for their major contributions to web2py and Alvaro, Bruno, Denes, Felipe, Graham, Jonathan, Hans, Kyle, Mark, Michele, Richard, Robin, Roman, Scott, Shane, Sharriff, Sriram, Sterling, Stuart, Thadeus, Yarko、といった方々が、この本のさまざまなバージョンを校正してくれたことに感謝します。彼らの貢献は非常に貴重でした。この本の中にあるすべての間違いについては、その責はすべて私にあります。おそらく最後の編集によって混入されたのでしょう。また、この本の初版の発行を助けてくれた、Wiley Custom Learning SolutionsのRyan Steffenに感謝します。

web2pyは次の作者によるコードを含んでいます。彼らに感謝します：

Python``python``:citeのGuido van Rossum、Rocket``rocket``:cite web serverのPeter Hunt、Richard Gordon、Timothy Farrell、EditArea``editarea``:citeのChristopher Dolivet、simplejson``simplejson``:citeのBob Ippolito、pyRTF``pyrtf``:citeのSimon Cusack、 Grant Edwards、pyRSS2Gen``pyrss2gen``:citeのDalke Scientific Software、 feedparser``feedparser``:citeのMark Pilgrim, markdown2``markdown2``:citeのTrent Mick、fcgi.pyのAllan Saddi、Python memcache module``memcache``:citeのEvan Martin、jQuery``jquery``:citeのJohn Resig。

この本の表紙で使われているロゴは、Young Designersに所属するPeter Kirchnerがデザインしています。

Helmut Epp（DePaul Universityの学長）、David Miller（the College of Computing and Digital Media of DePaul Universityの学部長）、Estia Eichten（MetaCryption LLCの会員）、彼らの継続的な信頼と支持に感謝します。

最後に、私が多くの時間をweb2pyの開発、ユーザーとのメールの交換や共同作業、そしてこの本の執筆に費やしていることに忍耐強く我慢してくれている、妻のClaudiaと息子のMarcoに感謝しています。この本は彼らに捧げます。

### 本書について

この本は、このイントロダクションを除いて、以下の章を収録しています：
- 第2章はPythonの最小限の導入です。ここでは、手続き型とオブジェクト指向プログラミングの両方のコンセプト、たとえば、ループや条件、関数呼び出しやクラスといったものの知識を前提に、基本的なPythonの構文を説明します。また、本書を通じて使用されるPythonモジュールの例を説明します。Pythonについてすでに知っている場合は、第2章は飛ばしてもかまいません。
- 第3章では、web2pyを開始する方法を示し、管理インターフェースについて説明し、少しずつ複雑にしていったさまざまな例を通して読者を案内します。文字列を返すアプリケーションから、数を数えるアプリケーション、画像付きブログ、そして、画像アップロードやコメントを可能にし、認証、権限、Webサービス、RSSフィードを提供する本格的なwikiアプリケーションまで例示します。この章を読むときは、一般的なPythonの構文のために第2章を、利用されている関数についてのより詳細なレファレンスのために続きの章を参照する必要があるかもしれません。
- 第4章では、より体系的にコアとなる構造とライブラリについて説明します。URLのマッピング、リクエスト、レスポンス、セッション、キャッシュ、クーロン、国際化、一般的なワークフローについて説明します。
- 第5章はビューを構築するために用いられるテンプレート言語に対するレファレンスです。ここでは、PythonコードをどのようにHTMLに埋め込むのか、またヘルパー（HTMLを生成できるオブジェクト）を使用したデモを紹介します。
- 第6章では、データベース抽象化レイヤ、すなわちDALを説明します。 DALの構文は、一連の例によって示されます。
- 第7章はフォーム、フォームの検証、フォームの処理について説明します。FORMは、フォームを構築するための低レベルのヘルパーです。SQLFORMは、高レベルのフォームビルダーです。第7章ではまた、Create/Read/Update/Delete (CRUD)について論じます。
- 第8章では、web2pで使用可能な、認証、権限、拡張可能なロールベースのアクセス制御機構を扱います。メールの設定やCAPTCHAについても、認証でよく使われるので、ここで議論します。本の第3版では、サードパーティー製の認証機構、たとえば、OpenID、OAuth、Google、Facebook、LinkedInなどとの統合に関する広範囲な説明も加えました。
- 第9章はweb2pyにおいてWebサービスを作成する方法についてです。Google Web ToolkitをPyjamasから使う例や、Adobe FlashをPyAMFから使う例を示します。
- 第10章は、web2pyとjQueryのレシピについてです。web2pyは、主にサーバーサイドのプログラミングとして設計されていますが、jQueryを内包しています。なぜならそれが、エフェクトやAjaxのために利用可能なベストなオープンソースのJavascriptライブラリだと分かったからです。この章では、web2pyとともにjQueryを効果的に使用する方法を議論します。
- 第11章はweb2pyアプリケーションの本番デプロイについてです。 主に3つの可能な本番シナリオに取り組みます：LinuxのWebサーバーまたはサーバーセットにデプロイし（主要となるデプロイの選択肢と思います）、Microsoft Windows環境上にサービスとして動かし、Google Applications Engine（GAW）上にデプロイします。この章ではまた、セキュリティやスケーラビリティの問題について議論します。
- 第12章は、さまざまな特定のタスクを解決するレシピを掲載します。アップグレードや、ジオコーディング、ページ処理、TwitterのAPIなどです。
- 第13章では、本の第三版で新しく追加されたもので、モジュール化したアプリケーションを構築する方法として、web2pyのコンポーネントやプラグインについて説明します。 広く共通して利用される機能、たとえば、チャート、コメント、タグ付け、wikiなどを実装するプラグインの例を示します。

この本では、web2pyの基本的機能とweb2pyとともに公開されるAPIしかカバーしません。web2pyのappliances（すなわち、既製のアプリケーション）については説明しません。

web2pyのappliancesは、適切なWebサイト``appliances``:citeからダウンロードすることができます。

追加トピックに関しては、AlterEgo``alterego``:citeや対話的なweb2py FAQで議論されいて、見つけることができます。

この本はmarkmin構文``MARKMIN``:inxxを用いて書かれていて、自動的にHTMLやLaTeX、PDFに変換されます。

### 要素のスタイル

PEP8``style``:citeは、Pythonでプログラミングをする時の良いスタイルのプラクティスが含まれています。web2pyはこれらのプラクティスにすべて従ってるわけではないことに気づくでしょう。これは省略や手抜きのためではありません。web2pの利用者はこれらのルールに従うべきであると信じていますし、それを奨励しています。我々は、これらのルールの内いくつかに従わないことを選択しました。web2pyのヘルパーオブジェクトがユーザー定義オブジェクトに対して名前競合を起こす確率を最小限にしようとして定義したときにです。

たとえば、``<div>``を表現するクラスは``DIV``ですが、Pythonのスタイルレファレンスによれば、``Div``とするべきです。我々は、この特定の例については、すべて大文字の"DIV"を使用するほうがより自然な選択だと考えています。さらに、このアプローチでは、必要とあればプログラマが"Div"クラスを自由に作ることができます。これらの構文はほとんどのブラウザのDOM表記法に自然にマッピングされます（たとえばFirefoxなどを含みます）。

Pythonのスタイルガイドによると、すべて大文字の文字列は、変数ではなく定数として使用するべきとあります。先の例を続けると、``DIV``がクラスであることを考慮しても、それは二度と修正されるべきない特別なクラスになります。そうでないと、他のweb2pyアプリケーションが動かなくなるからです。このことから``DIV``クラスは定数のように扱われるべきものとして適格であり、我々はこの表記の選択が正当化されると信じています

要約すると、次のような慣例に従います：
- HTMLヘルパーとバリデータは、上記の議論の通りすべて大文字です(たとえば、``DIV``, ``A``, ``FORM``, ``URL``)
- 翻訳オブジェクトの``T``は、クラス自身ではなくクラスのインスタンスであるという事実にもかかわらず、大文字で表されます。論理的に、翻訳オブジェクトは、HTMLヘルパーと似た動作を行い、プレゼンテーションの一部の表示に影響します。また、 ``T``はコード内で検索しやすい必要がある同時に、短かい名前を持つ必要があります。
- DALのクラスは、Pythonのスタイルガイド（先頭文字を大文字にする）に従います。たとえば、``Table``、``Field``、``Query`` 、``Row``、``Rows``などがあります。

他のすべてのケースでは、我々は、可能な限りPythonのスタイルガイド（PEP8）に従ってきたと信じています。たとえば、すべてのインスタンスオブジェクトは小文字（request、response、session、cache）であり、すべての内部クラスは大文字で始まっています。

この本のすべての例において、web2pyのキーワードは太字で、文字列やコメントはイタリック体で記載されています。
