## ビュー
``views``:inxx ``template language``:inxx

web2pyはモデル、コントローラ、ビューのためにPythonを使用しています。ただし、ビューにおいては若干修正したPython構文を用いています。これにより、適切なpythonの利用に制約をかけることなく、より可読性のあるコードが書けるようになっています。

ビューの目的は、HTMLドキュメント内にPythonコードを埋め込むことです。一般的に、これはいくつかの問題を引き起こします：
- 埋め込まれたコードは、エスケープすべきか？
- インデントはPythonかHTMLのどちらのルールに基づいてされるべきか？

web2py は``{{...}}``をHTMLに埋め込んだPythonコードをエスケープするために使用しています。中括弧を山括弧の代わりに用いる利点は、すべての一般 的なHTMLエディタにおいて分かりやすいからです。これによりそれらのエディタでweb2pyのビューを作成することが可能になります。

開発者はHTMLにPythonコードを埋め込むので、ドキュメントはPythonのルールでなく、HTMLのルールに従ってインデントされる必要があります。そのため、web2pyでは、``{{ ... }}``のタグの中でインデント不要のPythonを書けるようにしています。Pythonは通常、コードのブロックを区切るためインデントを使用していますが、ここでは別の方法が要求されます。このような理由で、web2pyのテンプレート言語はPythonキーワードの``pass``を活用しています。

-------
コードブロックは、コロンで終わる行から始まり、``pass``で始まる行で終わります。キーワード``pass``はブロックの終わりがコンテキストから明白な場合は必要ではありません。
-------

これはその例です:

``
{{
if i == 0:
response.write('i is 0')
else:
response.write('i is not 0')
pass
}}
``:code

``pass``はPythonのキーワードで、web2pyのキーワードではないことに注意してください。EmacsなどのいくつかのPythonエディタは、``pass``キーワードを用いてブロックの区切りを示し、自動的にコードを再インデントします。

web2pyのテンプレート言語は、Pythonと全く同じことをします。次のような記述は：

``
<html><body>
{{for x in range(10):}}{{=x}}hello<br />{{pass}}
</body></html>
``:code

テンプレート言語により、次のようなプログラムに変換されます：
``
response.write("""<html><body>""", escape=False)
for x in range(10):
    response.write(x)
    response.write("""hello<br />""", escape=False)
response.write("""</body></html>""", escape=False)
``:code

``response.write``は、``response.body``に書き込みます。

web2pyのビューにエラーがある場合、エラーレポートには、開発者が書いた実際のビューではなく、生成されたコードが表示されます。これにより、実行された実際のコードをハイライトしてコードをデバッグすることが容易になります(そのコードはHTMLエディタやブラウザのDOMインスペクタを使用してデバッグすることができるものです)。

また注意する点として：
``
{{=x}}
``code

これは以下ものを生成します
``response.write``:inxx ``escape``:inxx
``
response.write(x)
``:code

このようにHTMLに注入された変数は、デフォルトでエスケープされます。もし``x``が``XML``オブジェクトなら、escapeを``True``にしても、エスケープは無視されます。

ここで示すのは、``H1``ヘルパーの利用例です：
``
{{=H1(i)}}
``:code

これは、以下のものに変換されます：
``
response.write(H1(i))
``:code

上記の評価では、``H1``オブジェクトとその要素は再帰的にシリアライズされ、エスケープされ、response.bodyに書かれます。``H1``と内部HTMLによって生成されたタグはエスケープされません。この仕組みによって、Webページ上に表示されるすべてのテキスト--そしてテキストのみ--が、常にエスケープされ、それによりXSS脆弱性を防ぐことを保証します。同時に、コードはシンプルでデバッグし易いものとなります。

``response.write(obj, escape=True)``のメソッドは、書かれるオブジェクトとエスケープされるかどうか(デフォルトは``True``)という2つの引数を取ります。``obj``が``.xml()``メソッドを持つ場合、それが呼ばれ、その結果がresponseのbodyに書かれます(``エスケープ``引数は無視されます)。それ以外の場合は、オブジェクトの``__str__``メソッドがシリアライズするのに用いられ、エスケープ引数が``True``ならばエスケープされます。すべての組み込みのヘルパーオブジェクト(``H1``など)は、``.xml()``メソッドを介して自分自身をシリアライズする方法を知っています。

これは、すべて透過的に行われます。``response.write``メソッドを明示的に呼び出す必要は決してありません(呼び出すべきではないです)。

### 基本構文

web2pyのテンプレート言語は、すべてのPythonの制御構造をサポートしています。ここでは、それらのそれぞれの例を示します。それらは通常のプログラミングのプラクティスに準じてネストさせることができます。

#### ``for...in``
``for``:inxx

テンプレートでは、任意の反復可能オブジェクトに対してループを回すことができます：
``
{{items = ['a', 'b', 'c']}}
<ul>
{{for item in items:}}<li>{{=item}}</li>{{pass}}
</ul>
``:code

これは次のようになります：
``
<ul>
<li>a</li>
<li>b</li>
<li>c</li>
</ul>
``:code

ここで、``item``は任意のiterableオブジェクトです。これは、Pythonのリスト、Pythonのタプル、Rowsオブジェクト、イテレータとして実装された任意のオブジェクトなどです。表示されるオブジェクトは初めにシリアライズされ、エスケープされます。

#### ``while``
``while``:inxx

whiteキーワードを用いてループを作成できます：
``
{{k = 3}}
<ul>
{{while k > 0:}}<li>{{=k}}{{k = k - 1}}</li>{{pass}}
</ul>
``:code

これは次のようになります：
``
<ul>
<li>3</li>
<li>2</li>
<li>1</li>
</ul>
``:code

#### ``if...elif...else``
``if``:inxx ``elif``:inxx ``else``:inxx

条件句を使用できます：
``
{{
import random
k = random.randint(0, 100)
}}
<h2>
{{=k}}
{{if k % 2:}}is odd{{else:}}is even{{pass}}
</h2>
``:code

これは次のようになります：
``
<h2>
45 is odd
</h2>
``:code

``else``が最初の``if``ブロックを閉じることは明らかなため、ここでは``pass``文は必要なく、その使用は不適切です。しかし、``else``ブロックは``pass``文とともに明示的に閉じなければなりません。

Pythonでは"else if"を``elif``と書くことに留意して、次の例を見てください：
``
{{
import random
k = random.randint(0, 100)
}}
<h2>
{{=k}}
{{if k % 4 == 0:}}is divisible by 4
{{elif k % 2 == 0:}}is even
{{else:}}is odd
{{pass}}
</h2>
``:code

これは次のようになります：
``
<h2>
64 is divisible by 4
</h2>
``:code

#### ``try...except...else...finally``
``try``:inxx ``except``:inxx ``else``:inxx ``finally``:inxx

``try...except``文をビューの中で使用することもできます。ただし、ある注意があります。次の例を考えてください：
``
{{try:}}
Hello {{= 1 / 0}}
{{except:}}
division by zero
{{else:}}
no division by zero
{{finally}}
<br />
{{pass}}
``:code

これは次のような出力を生成します：
``
Hello
division by zero
<br />
``:code

この例は、例外が発生する前のすべての出力が、tryブロック内でレンダリングされること示しています(例外の前の出力もレンダリングされます)。"Hello"は例外の前にあるので書かれます。

#### ``def...return``
``def``:inxx ``return``:inxx

web2pyのテンプレート言語では、任意のPythonオブジェクトやtext/html文字列を返す関数を定義し実装することができます。ここでは、2つの例を考えます：
``
{{def itemize1(link): return LI(A(link, _href="http://" + link))}}
<ul>
{{=itemize1('www.google.com')}}
</ul>
``:code

これは次のような出力を生成します：
``
<ul>
<li><a href="http:/www.google.com">www.google.com</a></li>
</ul>
``:code

関数``itemize1``は関数が呼ばれた場所に挿入されるヘルパーオブジェクトを返します。

次のコードを検討してください：
``
{{def itemize2(link):}}
<li><a href="http://{{=link}}">{{=link}}</a></li>
{{return}}
<ul>
{{itemize2('www.google.com')}}
</ul>
``:code

これは上記と全く同じ出力を生成します。この場合、関数``itemize2``は、関数が呼ばれた場所でweb2pyのタグが置換されることになるHTMLの一部を表現します。``itemize2``の呼び出しの手前に'='がないことに注意してください。これは、関数が文字列を返すのではなく、直接レスポンスに書き込んでいるからです。

1つの注意点は、ビュー内で定義された関数はreturn文で終了しなければならないことです。そうしないと自動インデントが失敗します。

### HTMLヘルパー
``helpers``:inxx

次のようなビューのコードを考えます：
``
{{=DIV('this', 'is', 'a', 'test', _id='123', _class='myclass')}}
``:code

これは次のようにレンダリングされます：
``
<div id="123" class="myclass">thisisatest</div>
``:code

``DIV``はヘルパークラスです。つまり、HTMLをプラグラム的に構築するために使われるものです。これは、HTMLの``<div>``タグに対応します。

位置引数は開始タグと終了タグの間に含まれるオブジェクトとして解釈されます。アンダースコアで始まる名前付き引数は、HTMLタグの(アンダースコアなしの)属性として解釈されます。いくつかのヘルパーは、アンダースコアで始まらない名前付き数をもち、それらの引数はタグ固有のものです。

以下のヘルパーのセットは：

``A``, ``B``, ``BEAUTIFY``, ``BODY``, ``BR``, ``CENTER``, ``CODE``, ``DIV``, ``EM``, ``EMBED``, ``FIELDSET``, ``FORM``, ``H1``, ``H2``, ``H3``, ``H4``, ``H5``, ``H6``, ``HEAD``, ``HR``, ``HTML``, ``I``, ``IFRAME``, ``IMG``, ``INPUT``, ``LABEL``, ``LEGEND``, ``LI``, ``LINK``, ``OL``, ``UL``, ``MARKMIN``, ``MENU``, ``META``, ``OBJECT``, ``ON``, ``OPTION``, ``P``, ``PRE``, ``SCRIPT``, ``OPTGROUP``, ``SELECT``, ``SPAN``, ``STYLE``, ``TABLE``, ``TAG``, ``TD``, ``TEXTAREA``, ``TH``, ``THEAD``, ``TBODY``, ``TFOOT``, ``TITLE``, ``TR``, ``TT``, ``URL``, ``XHTML``, ``XML``, ``xmlescape``, ``embed64``

XML``xml:w``:cite ``xml:o``:citeへとシリアライズできる複雑な表現を構築するのに使用することができます。たとえば：
``
{{=DIV(B(I("hello ", "<world>"))), _class="myclass")}}
``:code

これは次のようにレンダリングされます：
``
<div class="myclass"><b><i>hello <world></i></b></div>
``:code

``Document Object Model (DOM)``:inxx
web2pyのヘルパーの仕組みは、文字列の連結なしにHTMLを生成するシステム以上のものです。これは、サーバーサイドのドキュメントオブジェクトモデル(DOM)表現を提供します。

コンポーネントのオブジェクトはその位置を介して参照でき、ヘルパーはそれらコンポーネントに対してリストのように機能します。
``
>>> a = DIV(SPAN('a', 'b'), 'c')
>>> print a
<div><span>ab</span>c</div>
>>> del a[1]
>>> a.append(B('x'))
>>> a[0][0] = 'y'
>>> print a
<div><span>yb</span><b>x</b></div>
``:code

ヘルパーの属性は名前で参照することができ、ヘルパーはそれら属性に対して辞書のように機能します：
``
>>> a = DIV(SPAN('a', 'b'), 'c')
>>> a['_class'] = 's'
>>> a[0]['_class'] = 't'
>>> print a
<div class="s"><span class="t">ab</span>c</div>
``:code

#### ``XML``
``XML``:inxx

``XML``はエスケープされるべきでないテキストを封入するために使用するオブジェクトです。テキストは有効なXMLが含まれる場合もあれば、そうでない場合もあります。たとえば、JavaScriptを含むことができます。

次の例のテキストはエスケープされますが：
``
>>> print DIV("<b>hello</b>")
&lt;b&gt;hello&lt;/b&gt;
``:code

次のように``XML``を使用してエスケープを防ぐことができます：
``
>>> print DIV(XML("<b>hello</b>"))
<b>hello</b>
``:code

時々、変数に格納されたHTMLをレンダリングしたい場合があります。しかし、HTMLはスクリプトなどの安全でないタグが含まれている可能性があります：
``
>>> print XML('<script>alert("unsafe!")</script>')
<script>alert("unsafe!")</script>
``:code

このようなエスケープされてない実行可能な入力(たとえば、ブログのコメント本文への入力)は、安全ではありません。これを利用して、そのページの他の訪問者に対してクロスサイトスクリプティング(XSS)攻撃を生み出すことができるからです。

``sanitize``:inxx
web2pyの``XML``ヘルパーはインジェクションを防ぐためにテキストをサニタイズすることができ、明示的に許可してないものでない限りすべてのタグをエスケープします。これはその例です:
``
>>> print XML('<script>alert("unsafe!")</script>', sanitize=True)
&lt;script&gt;alert(&quot;unsafe!&quot;)&lt;/script&gt;
``:code

``XML``のコンストラクタは、デフォルトでは、いくつかのタグの中身とそれらのいくつかの属性が安全であると想定します。このデフォルトは、``permitted_tags``と``allowd_attributes``というオプション引数で上書きすることができます。以下に示すのは、``XML``ヘルパーのオプション引数のデフォルトの値です。
``
XML(text, sanitize=False,
    permitted_tags=['a', 'b', 'blockquote', 'br/', 'i', 'li',
       'ol', 'ul', 'p', 'cite', 'code', 'pre', 'img/'],
    allowed_attributes={'a':['href', 'title'],
       'img':['src', 'alt'], 'blockquote':['type']})
``:code

#### 組み込みヘルパー

##### ``A``

このヘルパーは、リンクを構築するために使用されます。

``A``:inxx
``
>>> print A('<click>', XML('<b>me</b>'),
            _href='http://www.web2py.com')
<a href='http://www.web2py.com'>&lt;click&gt;<b>me/b></a>
``:code

このヘルパーは、``cid``という特殊な引数を取ります。これは次のように動作します：
``
<div id="myid"></div>
{{=A('linked page',_href='http://example.com',cid='myid')}}
``:code

そして、このリンクをクリックすると、そのdivに中身がロードされるようになります。これには、レイアウトのヘッドに``{{include 'web2py_ajax.html'}}``が必要です。

``cid``の詳細については第13章でコンポーネントの文脈において説明します。


##### ``B``
``B``:inxx

このヘルパーは、その中身を太字にします。
``
>>> print B('<hello>', XML('<i>world</i>'), _class='test', _id=0)
<b id="0" class="test">&lt;hello&gt;<i>world</i></b>
``:code

##### ``BODY``
``BODY``:inxx
このヘルパーは、ページのbodyを作成します。
``
>>> print BODY('<hello>', XML('<b>world</b>'), _bgcolor='red')
<body bgcolor="red">&lt;hello&gt;<b>world</b></body>
``:code

##### ``CENTER``
``CENTER``:inxx

このヘルパーは、その中身を中央に配置します。
``
>>> print CENTER('<hello>', XML('<b>world</b>'),
>>>              _class='test', _id=0)
<center id="0" class="test">&lt;hello&gt;<b>world</b></center>
``:code

##### ``CODE``
``CODE``:inxx

このヘルパーは、Python、C、C++、HTML、そして、web2pyのコードに対して構文のハイライトを実現します。これは、コードの列挙に関して``PRE``よりも望ましい選択肢です。``CODE``はまた、web2pyのAPIドキュメントへのリンクを作成する機能があります。

ここでは、Pythonコードのセクションをハイライトする例を示します：
``
>>> print CODE('print "hello"', language='python').xml()
<table><tr valign="top"><td style="width:40px; text-align: right;"><pre style="
        font-size: 11px;
        font-family: Bitstream Vera Sans Mono,monospace;
        background-color: transparent;
            margin: 0;
            padding: 5px;
            border: none;
        background-color: #E0E0E0;
        color: #A0A0A0;
    ">1.</pre></td><td><pre style="
        font-size: 11px;
        font-family: Bitstream Vera Sans Mono,monospace;
        background-color: transparent;
            margin: 0;
            padding: 5px;
            border: none;
            overflow: auto;
    "><span style="color:#185369; font-weight: bold">print </span>
    <span style="color: #FF9966">"hello"</span></pre></td></tr>
</table>
``:code

HTMLに対して同様の例を示します。
``
>>> print CODE(
>>>   '<html><body>{{=request.env.remote_add}}</body></html>',
>>>   language='html')
``:code
``
<table>...<code>...
<html><body>{{=request.env.remote_add}}</body></html>
...</code>...</table>
``:code

以下に示すのは``CODE``ヘルパーのデフォルトの引数です：
``
CODE("print 'hello world'", language='python', link=None, counter=1, styles={})
``:code

``language``引数でサポートされている値は、"python"、"html_plain"、"c"、"cpp"、"web2py"、"html"です。"html"言語では、{{と}}のタグ は"web2py"のコードとして解釈されます。一方、"html_plain"ではそのように解釈されません。

``link``の値が指定される場合、たとえば、"/examples/global/vars/"とされている場合、コード内のweb2pyのAPIレファレンスがそ のリンクURLのドキュメントへリンクされます。たとえば、"request"は"/examples/global/vars/request"へリン クされます。上記の例では、リンクURLは、"global.py"コントローラの"var"アクションによって処理されます。"global.py"は、web2pyの"examples"アプリケーションの一部として配布されています。

``counter``引数は行番号のために使用されます。これは3種類の値のいずれかを取ります。``None``にすると行番号は表示されません。数字にすると、始まりの番号を指定します。counterが文字列の場合は、プロンプトとして解釈され、行番号は表示されません。カウンタが文字列に設定されている場合、それは、プロンプトとして解釈され、行番号があります。

##### ``DIV``
``XML``以外のすべてのヘルパーは``DIV``から派生し、その基本メソッドを継承しています。

``DIV``:inxx
``
>>> print DIV('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<div id="0" class="test">&lt;hello&gt;<b>world</b></div>
``:code

##### ``EM``

中身を強調します。

``
>>> print EM('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<em id="0" class="test">&lt;hello&gt;<b>world</b></em>
``:code

##### ``FIELDSET``
``FIELDSET``:inxx

入力フィールドをラベルと共に作成するために使用されます。
``
>>> print FIELDSET('Height:', INPUT(_name='height'), _class='test')
<fieldset class="test">Height:<input name="height" /></fieldset>
``:code

##### ``FORM``
``FORM``:inxx

これは最も重要なヘルパーの1つです。単純なフォームでは、単に``<form>...</form>``タグを作り出すだけですが、ヘルパーはオブジェクトで、かつ、その中身に関する情報を持っているので、フォームの投稿処理を行うことができます(たとえば、フィールドの検証など)。詳細は第7章で説明します。
``
>>> print FORM(INPUT(_type='submit'), _action=", _method='post')
<form enctype="multipart/form-data" action="" method="post">
<input type="submit" /></form>
``:code

"enctype"はデフォルトでは"multipart/form-data"です。

``hidden``:inxx
``FORM``と``SQLFORM``のコンストラクタは、``hidden``という特別な引数を取ることができます。辞書が``hidden``として渡される場合、その項目は"hidden"INPUTフィールドへと変換されます。たとえば次のようになります:
``
>>> print FORM(hidden=dict(a='b'))
<form enctype="multipart/form-data" action="" method="post">
<input value="b" type="hidden" name="a" /></form>
``:code

##### ``H1``, ``H2``, ``H3``, ``H4``, ``H5``, ``H6``
``H1``:inxx

これらのヘルパーは、段落の見出しと小見出しに利用します：
``
>>> print H1('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<h1 id="0" class="test">&lt;hello&gt;<b>world</b></h1>
``:code

##### ``HEAD``

HTMLページのHEADをタグ付けに利用します。

``HEAD``:inxx
``
>>> print HEAD(TITLE('<hello>', XML('<b>world</b>')))
<head><title>&lt;hello&gt;<b>world</b></title></head>
``:code

##### ``HTML``
``HTML``:inxx ``XHTML``:inxx

このヘルパーは少し異なります。``<html>``タグの作成に加えて、doctype文字列をそのタグの前に付与します``xhtml:w,xhtml:o,xhtml:school``:cite。
``
>>> print HTML(BODY('<hello>', XML('<b>world</b>')))
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
                      "http://www.w3.org/TR/html4/loose.dtd">
<html><body>&lt;hello&gt;<b>world</b></body></html>
``:code

HTMLヘルパーは、いくつかの追加のオプション引数を取り、次のようなデフォルト値を持ちます：
``
HTML(..., lang='en', doctype='transitional')
``:code

doctypeは 'strict'、'transitional'、'frameset'、'html5'、または、完全なdoctype文字列にすることができます。

##### ``XHTML``
``XHTML``:inxx

XHTMLはHTMLに似ていますが、代わりにXHTMLのdoctypeを作成します。
``
XHTML(..., lang='en', doctype='transitional', xmlns='http://www.w3.org/1999/xhtml')
``:code

doctypeは、'strict'、'transitional'、'frameset'、または、完全なdoctype文字列にすることができます。

##### ``INPUT``
``INPUT``:inxx

``<input.../>``タグを作成します。inputタグは、他のタグを含まないので、``>``ではなく、``/>``で閉じられます。inputタグは、オプション属性``_type``を持ち、"text" (デフォルト)や、"submit"、"checkbox",、"radio" に設定できます。
``
>>> print INPUT(_name='test', _value='a')
<input value="a" name="test" />
``:code

これはまた、"value"という"_value"とは異なる特別なオプション引数を取ります。後者は、inputフィールドに対してデフォルト値を設定します。一方、前者は現在の値を設定します。"text"タイプの入力の場合、前者は後者を上書きします：
``
>>> print INPUT(_name='test', _value='a', value='b')
<input value="b" name="test" />
``:code

ラジオボタンの場合、``INPUT``は選択的に"checked"属性を設定します：

``radio``:inxx
``
>>> for v in ['a', 'b', 'c']:
>>>     print INPUT(_type='radio', _name='test', _value=v, value='b'), v
<input value="a" type="radio" name="test" /> a
<input value="b" type="radio" checked="checked" name="test" /> b
<input value="c" type="radio" name="test" /> c
``:code

チェックボックスに対しても同様です：

``checkbox``:inxx
``
>>> print INPUT(_type='checkbox', _name='test', _value='a', value=True)
<input value="a" type="checkbox" checked="checked" name="test" />
>>> print INPUT(_type='checkbox', _name='test', _value='a', value=False)
<input value="a" type="checkbox" name="test" />
``:code

##### ``IFRAME``

このヘルパーは、現在のページに別のWebページを取り込みます。他のページのURLは"_src"属性で指定されます。

``IFRAME``:inxx
``
>>> print IFRAME(_src='http://www.web2py.com')
<iframe src="http://www.web2py.com"></iframe>
``:code

##### ``IMG``
``IMG``:inxx

HTMLに画像を埋め込むために使用されます：

``
>>> IMG(_src='http://example.com/image.png',_alt='test')
<img src="http://example.com/image.ong" alt="rest" />
``:code

次に示すのは、AとIMGとURLのヘルパーを組み合わせて、リンク付きの静的画像を取り込んだものです：

``
>>> A(IMG(_src=URL('static','logo.png'), _alt="My Logo"),
      _href=URL('default','index'))
<a href="/myapp/default/index">
  <img src="/myapp/static/logo.png" alt="My Logo" />
</a>
``:code

##### ``LABEL``

INPUTフィールドのためのLABELタグを作成するために使用されます。

``LABEL``:inxx
``
>>> print LABEL('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<label id="0" class="test">&lt;hello&gt;<b>world</b></label>
``:code

##### ``LI``

リスト項目を作成します。``UL``まはた``OL``タグの中に含めるべきです。

``LI``:inxx
``
>>> print LI('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<li id="0" class="test">&lt;hello&gt;<b>world</b></li>
``:code

##### ``LEGEND``

フォームの中のフィールドに対する凡例タグを作成するために使用されます。

``LEGEND``:inxx
``
>>> print LEGEND('Name', _for='myfield')
<legend for="myfield">Name</legend>
``:code

##### ``META``

``HTML``のヘッドにて``META``タグを構築するために使用されます。例:

``META``:inxx
``
>>> print META(_name='security', _content='high')
<meta name="security" content="high" />
``:code

##### ``MARKMIN``

markminのwiki構文を実装します。これは、後述の例で説明されているmarkminのルールに従って入力テキストを出力htmlに変換します：

``MARKMIN``:inxx
``
>>> print MARKMIN("'this is **bold** or ''italic'' and this [[a link http://web2py.com]]"')
<p>this is <b>bold</b> or <i>italic</i> and
this <a href="http://web2py.com">a link</a></p>
``:code

markmin構文は、web2pyに付属している次のファイルに説明されています：
``
http://127.0.0.1:8000/examples/static/markmin.html
``:code

いくつかの例は、第13章で、MARKMINを多用するplugin_wikiの文脈において示します

##### ``OBJECT``

HTMLにオブジェクト(たとえば、flashプレーヤーなど)を埋め込むために使用されます。

``OBJECT``:inxx
``
>>> print OBJECT('<hello>', XML('<b>world</b>'),
>>>              _src='http://www.web2py.com')
<object src="http://www.web2py.com">&lt;hello&gt;<b>world</b></object>
``:code

##### ``OL``

順序付きリストを表します。リストはLIタグを含める必要があります。``LI``オブジェクトでない``OL``の引数は、自動的に``<li>...</li>``タグで囲まれます。

``OL``:inxx
``
>>> print OL('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<ol id="0" class="test"><li>&lt;hello&gt;</li><li><b>world</b></li></ol>
``:code

##### ``ON``

これは、後方互換のためにあり、単に``True``の別名となります。これは、チェックボックスにおいて利用されますが、``True``のほうがよりPython的なので非推奨になっています。

``ON``:inxx
``
>>> print INPUT(_type='checkbox', _name='test', _checked=ON)
<input checked="checked" type="checkbox" name="test" />
``:code

##### ``OPTGROUP``

SELECT内の複数のオプションをグループ化することを可能にします。CSSでフィールドをカスタマイズするのに便利です。

``OPTGROUP``:inxx
``
>>> print SELECT('a', OPTGROUP('b', 'c'))
<select>
  <option value="a">a</option>
  <optgroup>
    <option value="b">b</option>
    <option value="c">c</option>
  </optgroup>
</select>
``:code

##### ``OPTION``

SELECT/OPTIONの組み合わせの一部としてのみ使用されるものです。

``OPTION``:inxx
``
>>> print OPTION('<hello>', XML('<b>world</b>'), _value='a')
<option value="a">&lt;hello&gt;<b>world</b></option>
``:code

``INPUT``の場合のように、web2pyは"_value"(OPTIONの値)と"value"(囲み内の選択肢の現在の値)を区別することができます。もしそれらが等しい場合、オプションは"selected"になります。

``selected``:inxx
``
>>> print SELECT('a', 'b', value='b'):
<select>
<option value="a">a</option>
<option value="b" selected="selected">b</option>
</select>
``:code

##### ``P``
``P``:inxx

段落のタグ付けに利用します。
``
>>> print P('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<p id="0" class="test">&lt;hello&gt;<b>world</b></p>
``:code

##### ``PRE``
``PRE``:inxx

事前に書式設定されたテキストを表示するための``<pre>...</pre>``タグを生成します。``CODE``ヘルパーのほうが、コードの列挙には一般に望ましいです。
``
>>> print PRE('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<pre id="0" class="test">&lt;hello&gt;<b>world</b></pre>
``:code

##### ``SCRIPT``
``SCRIPT``:inxx

JavaScriptなどのスクリプトを組み込む、または、リンクします。タグ間の内容は、とても古いブラウザのために、HTMLのコメントとして表示されます。
``
>>> print SCRIPT('alert("hello world");', _language='javascript')
<script language="javascript"><!--
alert("hello world");
//--></script>
``:code

##### ``SELECT``
``SELECT``:inxx

``<select>...</select>``タグを作成します。これは、``OPTION``ヘルパーとともに使用されます。``OPTION``オブジェクト以外の``SELECT``引数は、自動的にoptionに変換されます。
``
>>> print SELECT('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<select id="0" class="test">
   <option value="&lt;hello&gt;">&lt;hello&gt;</option>
   <option value="&lt;b&gt;world&lt;/b&gt;"><b>world</b></option>
</select>
``:code

##### ``SPAN``
``SPAN``:inxx

``DIV``と似ていますが、(ブロックよりも)インラインのコンテンツをタグ付けするのに使用されます。
``
>>> print SPAN('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<span id="0" class="test">&lt;hello&gt;<b>world</b></span>
``:code

##### ``STYLE``
``STYLE``:inxx

scriptと似ていますが、CSSコードを組み込む、もしくは、リンクするために使用されます。次に示すのは、CSSを組み込んだ例です：
``
>>> print STYLE(XML('body {color: white}'))
<style><!--
body { color: white }
//--></style>
``:code

また、リンクする例です：
``
>>> print STYLE(_src='style.css')
<style src="style.css"><!--
//--></style>
``:code

##### ``TABLE``, ``TR``, ``TD``
``TABLE``:inxx ``TR``:inxx ``TD``:inxx

これらのタグは(オプション的な``THEAD``、``TBODY``、``TFOOTER``ヘルパーとともに)HTMLテーブルを構築するために使用されます。
``
>>> print TABLE(TR(TD('a'), TD('b')), TR(TD('c'), TD('d')))
<table><tr><td>a</td><td>b</td></tr><tr><td>c</td><td>d</td></tr></table>
``:code

``TR``は``TD``が来ることを想定しています。つまり、``TD``オブジェクトでない引数は自動的に変換されます：
``
>>> print TABLE(TR('a', 'b'), TR('c', 'd'))
<table><tr><td>a</td><td>b</td></tr><tr><td>c</td><td>d</td></tr></table>
``:code

Pythonの配列のHTMLテーブルへの変換は、Pythonの*関数引数の表記を使用すると、リスト要素が位置関数引数にマッピングされ、容易に実現することができます。

次の例では、行単位でそれを行っています：
``
>>> table = [['a', 'b'], ['c', 'd']]
>>> print TABLE(TR(*table[0]), TR(*table[1]))
<table><tr><td>a</td><td>b</td></tr><tr><td>c</td><td>d</td></tr></table>
``:code

次の例では、一度にすべての行でそれを行っています：
``
>>> table = [['a', 'b'], ['c', 'd']]
>>> print TABLE(*[TR(*rows) for rows in table])
<table><tr><td>a</td><td>b</td></tr><tr><td>c</td><td>d</td></tr></table>
``:code

##### ``TBODY``
``TBODY``:inxx

テーブルのボディーに含まれる行の集合をタグ付けするのに使用されます。ヘッダーやフッターの行の集合と対置します。これは付加的なものです。
``
>>> print TBODY(TR('<hello>'), _class='test', _id=0)
<tbody id="0" class="test"><tr><td>&lt;hello&gt;</td></tr></tbody>
``:code

##### ``TEXTAREA``
``TEXTAREA``:inxx

``<textarea>...</textarea>``タグを作成するヘルパーです。
``
>>> print TEXTAREA('<hello>', XML('<b>world</b>'), _class='test')
<textarea class="test" cols="40" rows="10">&lt;hello&gt;<b>world</b></textarea>
``:code

唯一の注意点は、そのオプション的な"value"が、その内容(内部HTML)を上書きすることです。
``
>>> print TEXTAREA(value="<hello world>", _class="test")
<textarea class="test" cols="40" rows="10">&lt;hello world&gt;</textarea>
``:code

##### ``TFOOT``
``TFOOT``:inxx

テーブルのフッターの行集合をタグ付けするのに使用されます。
``
>>> print TFOOT(TR(TD('<hello>')), _class='test', _id=0)
<tfoot id="0" class="test"><tr><td>&lt;hello&gt;</td></tr></tfoot>
``:code

##### ``TH``
``TH``:inxx

テーブルのヘッダーにおいて、``TD``の代わりに使用されます。
``
>>> print TH('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<th id="0" class="test">&lt;hello&gt;<b>world</b></th>
``:code

##### ``THEAD``
``THEAD``:inxx

テーブルのヘッダーの行集合をタグ付けするために使用されます。
``
>>> print THEAD(TR(TD('<hello>')), _class='test', _id=0)
<thead id="0" class="test"><tr><td>&lt;hello&gt;</td></tr></thead>
``:code

##### ``TITLE``
``TITLE``:inxx

HTMLヘッダーにて、ページのタイトルをタグ付けするのに使用されます。
``
>>> print TITLE('<hello>', XML('<b>world</b>'))
<title>&lt;hello&gt;<b>world</b></title>
``:code

##### ``TR``
``TR``:inxx

テーブルの行をタグ付けします。テーブルの内部で表示され、かつ、``<td>...</td>``タグを含む必要があります。``TD``オブジェクト以外の``TR``の引数は自動的に変換されます。
``
>>> print TR('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<tr id="0" class="test"><td>&lt;hello&gt;</td><td><b>world</b></td></tr>
``:code

##### ``TT``
``TT``:inxx

タイプライタ(固定幅)テキストとしてのテキストをタグ付けします。
``
>>> print TT('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<tt id="0" class="test">&lt;hello&gt;<b>world</b></tt>
``:code

##### ``UL``

順不同リストを示します。LIの項目を含める必要があります。中身がLIとしてタグ付けされていない場合は、ULは自動的にそれを行います。

``UL``:inxx
``
>>> print UL('<hello>', XML('<b>world</b>'), _class='test', _id=0)
<ul id="0" class="test"><li>&lt;hello&gt;</li><li><b>world</b></li></ul>
``:code

#### カスタム・ヘルパー
``TAG``:inxx

独自のXMLタグを生成したい場合があるかもしれません。web2pyは、普遍的なタグ生成機として``TAG``を提供しています。
``
{{=TAG.name('a', 'b', _c='d')}}
``:code
これは、次のようなXMLを生成します
``
<name c="d">ab</name>
``:code

引数"a"、"b"、"d"は自動的にエスケープされます。この挙動を抑えるには``XML``ヘルパーを用いてください。``TAG``を用いて、APIに提供されていないHTML/XMLタグを生成することができます。TAGはネストさせることができ、``str()``によってシリアライズすることができます。同等の構文は次の通りです：
``
{{=TAG['name']('a', 'b', c='d')}}
``:code

なお、``TAG``はオブジェクトであり、``TAG.name``まはた``TAG['name']``は、一時的なヘルパークラスを返す関数であることです。

##### ``MENU``
``MENU``:inxx

MENUヘルパーは、(第4章で説明されいる)``response.menu``の形式のリストのリストを受け取り、メニューを表現する順不同リストを用いてツリー型の構造を生成します。たとえば次のようになります:
``
>>> print MENU([['One', False, 'link1'], ['Two', False, 'link2']])
<ul class="web2py-menu web2py-menu-vertical">
  <li><a href="link1">One</a></li>
  <li><a href="link2">Two</a></li>
</ul>
``:code

各メニュー項目はネスとされるサブメニューを第4引数に持つことができます(また再帰的に同様です)：
``
>>> print MENU([['One', False, 'link1', [['Two', False, 'link2']]]])
<ul class="web2py-menu web2py-menu-vertical">
  <li class="web2py-menu-expand">
     <a href="link1">One</a>
     <ul class="web2py-menu-vertical">
        <li><a href="link2">Two</a></li>
     </ul>
  </li>
</ul>
``:code

MENUヘルパーは次のオプション引数を取ります：
- ``_class``: 外側のUL要素のクラスを設定します。デフォルトは"web2py-menu web2py-menu-vertical"です。
- ``ul_class``: 内側のUL要素のクラスを設定します。デフォルトは "web2py-menu-vertical"です。
- ``li_class``: 内側のLI要素のクラスを設定します。デフォルトは"web2py-menu-expand"です。

雛形となるアプリケーションの"base.css"は、次のメニューの基本タイプを理解します： "web2py-menu web2py-menu-vertical"と"web2py-menu web2py-menu-horizontal"。

### ``BEAUTIFY``
``BEAUTIFY``は、リストやタプル、辞書などの複合的なオブジェクトのHTML表現を構築するために使用されます：
``
{{=BEAUTIFY({"a":["hello", XML("world")], "b":(1, 2)})}}
``:code

``BEAUTIFY``はXMLへとシリアライズされるXML風のオブジェクトを、コンストラクタの引数の見栄えの良い表現とともに返します。この場合、次のようなXML表現は：
``
{"a":["hello", XML("world")], "b":(1, 2)}
``:code

次のようにレンダリングされます：
``
<table>
<tr><td>a</td><td>:</td><td>hello<br />world</td></tr>
<tr><td>b</td><td>:</td><td>1<br />2</td></tr>
</table>
``:code

#### サーバーサイドの''DOM''と構文解析
``element``:inxx ``elements``:inxx

#### elements

DIVヘルパーとそのすべての派生ヘルパーは、検索メソッドの``element``と``elements``を提供します。

``element``は、指定した条件にマッチする最初の子要素を返します(マッチするものがない場合、Noneを返します)。

``elements``は、すべてのマッチした子のリストを返します。

**element**と**elements**はマッチ条件を指定するのに同じ構文を用います。それは、混合して照合することのできる3種類の選択肢があります：jQuery風の表現と、正確に属性値と照合するものと、正規表現を使用して照合するものです。

ここでは簡単な例を示します：
``
>>> a = DIV(DIV(DIV('a', _id='target',_class='abc')))
>>> d = a.elements('div#target')
>>> d[0][0] = 'changed'
>>> print a
<div><div><div id="target" class="abc">changed</div></div></div>
``:code

要素の無名引数は、次のものを含む文字列です：タグの名前、ポンド記号が前に付くタグのID、ドットが前に付くクラス、角括弧内にある属性の明示的な値です。

ここでは、前述のタグをIDで検索するための4つの同等な方法を示します：
``
>>> d = a.elements('#target')
>>> d = a.elements('div#target')
>>> d = a.elements('div[id=target]')
>>> d = a.elements('div',_id='target')
``:code

ここでは、前述のタグをクラスで検索するための4つの同等な方法を示します：
``
>>> d = a.elements('.abc')
>>> d = a.elements('div.abc')
>>> d = a.elements('div[class=abc]')
>>> d = a.elements('div',_class='abc')
``:code

任意の属性は、要素の場所を特定するのに用いることができます(``id``や``class``だけではありません)。複数の属性(element関数は複数の名前つき引数を取ることができます)も用いることができますが、最初にマッチした要素だけが返されます。

jQueryの構文"div#target"を用いて、スペースで区切られた複数の検索条件を指定することも可能です：
``
>>> a = DIV(SPAN('a', _id='t1'),DIV('b',_class='c2'))
>>> d = a.elements('span#t1, div#c2')
``:code

または次のように書けます
``
>>> a = DIV(SPAN('a', _id='t1'),DIV('b',_class='c2'))
>>> d = a.elements('span#t1','div#c2')
``:code

検索属性の値が名前つき引数で指定されている場合、それは文字列か正規表現を取ることができます：
``
>>> a = DIV(SPAN('a', _id='test123'),DIV('b',_class='c2'))
>>> d = a.elements('span',_id=re.compile('test\d{3}')
``:code

DIV(とその派生)ヘルパーの特別な名前つき引数は``find``です。これは、タグのテキストの内容における、検索の値、または、検索の正規表現を指定するために用いられます。たとえば次のようになります:
``
>>> a = DIV(SPAN('abcde'),DIV('fghij'))
>>> d = a.elements(find='bcd')
>>> print d[0]
<span>abcde</span>
``:code

または
``
>>> a = DIV(SPAN('abcde'),DIV('fghij'))
>>> d = a.elements(find=re.compile('fg\w{3}'))
>>> print d[0]
<div>fghij</div>
``:code

#### ``components``
html文字列のすべての要素を列挙する例を示します：
``
html = TAG('<a>xxx</a><b>yyy</b>')
for item in html.components: print item
``:code

#### ``parent``
``parent``は、現在の要素の親を返します。
``
>>> a = DIV(SPAN('a'),DIV('b'))
>>> d = a.element('a').parent()
>>> d['_class']='abc'
>>> print a
<div class="abc"><span>a</span><div>b</div></div>
``:code

#### ``flatten``

flattenメソッドは、再帰的に、与えられた要素の子要素の中身を標準の(タグなし)テキストにシリアライズします：
``
>>> a = DIV(SPAN('this',DIV('is',B('a'))),SPAN('test'))
>>> print a.flatten()
thisisatest
``:code

flattenには、オプション引数の``render``を渡すことができます。それは、異なるプロトコルを使用して中身をレンダリング/フラット化する関数です。次に示すのは、いくつかのタグをMarkminのwiki構文へとシリアライズする例です：
``
>>> a = DIV(H1('title'),P('example of a ',A('link',_href='#test')))
>>> from gluon.html import markmin_serializer
>>> print a.flatten(render=markmin_serializer)
## titles

example of [[a link #test]]
``:code

書き込む際には、``markmin_serializer``と``markdown_serializer``が用意されています。

#### 構文解析

TAGオブジェクトはXML/HTMLの構文解析器でもあります。テキストを読み込んで、ヘルパーのツリー構造へと変換することができます。これにより、上記のAPIを利用した操作を可能にします：
``
>>> html = '<h1>Title</h1><p>this is a <span>test</span></p>'
>>> parsed_html = TAG(html)
>>> parsed_html.element('span')[0]='TEST'
>>> print parsed_html
<h1>Title</h1><p>this is a <span>TEST</span></p>
``:code

### ページレイアウト
``page layout``:inxx ``layout.html``:inxx ``extent``:inxx ``include``:inxx

ビューは、ツリー風の構造において他のビューを拡張、または、取り込むことができます。

たとえば、"layout.html"を拡張し、"body.html"を取り込んだ"index.html"というビューを考えることができます。同時に、"layout.html"は、"header.html"や"footer.html"を取り込むこともあります。

ツリーのルートは、レイアウトビューと呼ばれます。他のTHMLテンプレートファイルと同様に、web2pyの管理インタフェースを用いてそれを編集することができます。ファイル名"layout.html"は単なる慣例です。

ここでは、"layout.html"ビューを拡張し、"page.html"ビューを取り込んだ最小のページを示します：

``
{{extend 'layout.html'}}
<h1>Hello World</h1>
{{include 'page.html'}}
``:code

この拡張したレイアウトファイルは、たとえば次のように、``{{include}}``指示文を必ず含まなければなりません：
``
<html><head><title>Page Title</title></head>
  <body>
    {{include}}
  </body>
</head>
``:code

ビューが呼び出されると、拡張した(レイアウト)ビューが呼び出され、呼び出したビューはレイアウト内部の``{{include}}``指示文を置換します。この処理は再帰的に、すべてのextendとinclude指示文が処理されるまで、行われます。そして、結果のテンプレートは、Pythonコードに変換されます。

-------
``extend``と``include``はテンプレート固有の指示文で、Pythonのコマンドではありません。
-------

``response.menu``:inxx ``menu``:inxx ``response.meta``:inxx ``meta``:inxx

レ イアウトは、ページの共通特徴(ヘッダー、フッター、メニュー)を包含するために使用されます。それらは、義務的なものではないですが、アプリケーション を書きやすく保守しやすくします。とりわけ、コントローラで設定することのできる次のような変数を活用するレイアウトを書くことを推奨します。これらのよく知られた変数を用いることは、レイアウトを交換可能にするのに役立ちます：
``
response.title
response.subtitle
response.meta.author
response.meta.keywords
response.meta.description
response.flash
response.menu
response.files
``:code

``menu``と``files``を除いて、これらのすべての文字列と意味は明白なものです。

``response.menu``のメニューは、3-タプル、または、4-タプルからなるリストです。その3つの要素は、リンクの名前、リンクがアクティブ(現在のリンク)かどうかを示すブール値、リンク先のページのURLです。たとえば次のようになります:
``
response.menu = [('Google', False, 'http://www.google.com',[]),
                 ('Index',  True,  URL('index'), [])]
``:code

``sub-menu``:inxx
第4のタプル要素は、オプション的なサブメニューです。

``response.files``は、あなたのページで必要となるCSSとJSファイルのリストです。

ここではまた、次のものをHTMLのヘッドで使用することを推奨しています：

``
{{include 'web2py_ajax.html'}}
``:code

これによって、特殊効果やAjaxのための、jQueryライブラリといくつかの後方互換なJavaScript関数の定義が組み込まれるからで す。"web2py_ajax.html"は``response.meta``タグやjQeuryのベース、jQueryのカレンダーをビューの中に組み込み、すべての要求されたCSSとJSの``response.files``を組み込みます。

#### デフォルトのページのレイアウト
``superfish``:inxx ``ez.css``:inxx

ここで示すのは、web2pyの雛形アプリケーションwelcomeに付属する最小の"views/layout.html"です。また、新規のアプリケーションはどれも、同様のデフォルトレイアウトを持っています：

``
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="{{=T.accepted_language or 'en'}}">
  <head>
    <title>{{=response.title or request.application}}</title>
    <link rel="shortcut icon"
      href="{{=URL(request.application,'static','favicon.ico')}}"
      type="image/vnd.microsoft.icon">
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

    {{######  require CSS and JS files for this page (read info in base.css) }}
    {{response.files.append(URL(request.application,'static/css','base.css'))}}
    {{response.files.append(URL(request.application,'static/js','superfish.js'))}}

    {{###### include web2py specific js code (jquery, calendar, form stuff) }}
    {{include 'web2py_ajax.html'}}
  </head>
  <body>
    <div class="flash">{{=response.flash or ''}}</div>
    <div class="ez-mr wrapper" id="layout">

      {{###### Layout 3 from http://www.ez-css.org/layouts }}
      <div class="ez-wr">
 <div class="ez-box" id="header">

   {{try:}}{{=auth.navbar(action=URL(request.application,'default','user'))}}{{except:pass}}
          <h1>
            <a href="">{{=response.title or 'response.title'}}</a>
          </h1>
          <h2>
        {{=response.subtitle or 'response.subtitle'}}
      </h2>
    </div>
    <div class="ez-box" id="statusbar">

      {{###### superfish menu }}
   {{=MENU(response.menu,_class='sf-menu')}}

          <script>
        jQuery(document).ready(function(){
              jQuery('ul.sf-menu').superfish({delay:400});});
      </script>
    </div>
    <div class="ez-wr">
      <div class="ez-fl ez-negmx">
            <div class="ez-box" id="left_sidebar">{{###### unused space}}</div>
   </div>
   <div class="ez-fl ez-negmr">
            <div class="ez-box" id="content">{{include}}</div>
      </div>
      <div class="ez-last ez-oh">
            <div class="ez-box" id="right_sidebar">{{###### unused space}}</div>
   </div>
 </div>
 <div class="ez-box" id="footer">
          {{=T('Copyright')}} © 2010 -
          {{=T('Powered by')}} <a href="http://www.web2py.com">web2py</a>
    </div>
      </div>
    </div>
  </body>
</html>
``:code

このデフォルトのレイアウトにはちょっとした特徴があり、非常に使いやすく、カスタマイズしやすいようになっています：

- ``{{#...}}``はHTMLページには現れない特別なコメントです。
- モデルで設定することのできる``response.title``と``response.subtitle``を表示します。設定されていない場合は、アプリケーションの名前がタイトルとして採用されます。
- ``web2py_ajax.html``ファイルをヘッダーに組み込みます。
- "base.css"と"superfish.js"という2つのファイルを明示的に要求します。前者は、そのページに対する完全なCSSを含み、とてもよくドキュメント化されていて、カスタマイズ可能です。後者は、デフォルトのカスケードするメニューのためのJSが書かれています。
- ``{{=auth.navbar(...)}}``は、現在のユーザーへの歓迎文を表示するとともに、login、logout、register、change passwordなどのauth関数へのリンクを、文脈に応じて設けます。authが定義されていないときのために、``{{try:}}...{{except:pass}}``の中に置かれています。
- ``{{=MENU(response.menu)``は、メニュー構造を``<ul>...</ul>``として表示します。
- スーパーフィッシュ・カスケード・メニューをアクティブにする明示的なスクリプトがあります。不要な場合は削除することができます。
- ``{{include}}``は、ページがレンダリングされるときに、拡張するビューの内容に置き換えらます。
- デフォルトでは、3列のページレイアウトを用いています。そして、次のDIVのIDを使用していま す："header"、"left_sidebar"、"content"、"right_sidebar"、"footer" です。ただし、用意された"base.css"では、サイドバーの横幅が0に設定されています。
- レイアウトのCSSの命名のために、参照``ezcss``:citeで定義されているez.cssの慣例規則を使用しています。特に、レイアウト番号3を使用しています。最小化したez.cssは"base.css"に含まれています。

#### デフォルトレイアウトのカスタマイズ

編集なしにデフォルトレイアウトをカスタマイズするのはとても簡単です。"static/css/base.css"ファイルが、よくドキュメント化されているからです。

特に、以下に示すサブセクションで構成されています：

- [[ez.css http://www.ez-css.org/layouts]]
- 共通タグをリセットする
- デフォルトのフォントを選択する
- リンクのスタイルを選択する
- テーブルの行に基本線を追加する
- 太字で、場合によっては中央に配置して、ラベルづけする
- すべての入力フィールドを同じサイズにする
- h1-h6とテキストの間に適切な距離間隔を追加する
- 常に最初の行をインデントし、段落の下にスペースを追加する
- 箇条書きと段落番号のスタイルとインデント
- フォームとテーブルのパディング
- コー​​ドブロック
- 引用符で囲まれたテキストへの左右のパディング
- ページレイアウトの配置、幅、パディング(スペースのためにこれを変更してください)
- 列の幅(left_sidebarとright_sidebarを使用するにはこれを変更してください)
- 背景画像と色(色のためにこれを変更してください)
- メニュースタイル(superfish.js用)
- web2py固有のもの(.flash、.error)

left_sidebar、content、right_sidebarの横幅を変更するには、単純に"base.css"の一部を編集します：

``
/*********** column widths ***********/
#left_sidebar { width: 0px; }
#content { width: 840px; }
#right_sidebar { width: 0px; }
``:code

色や背景画像を変更するには、単純に以下の部分を編集します：
``
/*********** backrgound images and colors ***********/
body { background: url('/book/static/book_images_png/background.png') repeat-x #3A3A3A; }

a { color: #349C01; }
.auth_navbar {
   top: 0px;
   float: right;
   padding: 3px 10px 3px 10px;
   font-size: 0.9em;
}
code { color: green; background: black; }
input:focus, textarea:focus { background: #ccffcc; }
#layout { background: white; }
#header, #footer { color: white; background: url('/book/static/book_images_png/header.png') repeat #111111;}
#header h1 { color: #349C01; }
#header h2 { color: white; font-style: italic; font-size: 14px;}
#statusbar { background: #333333; border-bottom: 5px #349C01 solid; }
#statusbar a { color: white; }
#footer { border-top: 5px #349C01 solid; }
``:code

メニューは色に依存しない方法で構築されますが、それも変更することができます。

もちろん、"layout.html"や"base.css"ファイルを自分のものに完全に置き換えることもできます。

### ビュー内の関数

次の"layout.html"を考えます：

``
<html>
  <body>
    {{include}} <!-- must come before the two blocks below -->
    <div class="sidebar">
      {{if 'mysidebar' in globals():}}{{mysidebar()}}{{else:}}
        my default sidebar
      {{pass}}
    </div>
  </body>
</html>
``:code

そして、次の拡張ビューも考えます

``
{{def mysidebar():}}
my new sidebar!!!
{{return}}
{{extend 'layout.html'}}
Hello World!!!
``:code

ここで、関数が``{{extend...}}``文の前に定義されていることに注意してください。また、関数が、拡張元のビューにおいて ``=`` プレフィックスが付かずに組み込まれていることに注意してください。

このコー​​ドは次のような出力を生成します：

``
<html>
  <body>
    Hello World!!!
    <div class="sidebar">
        my new sidebar!!!
    </div>
  </body>
</html>
``:code

この関数が(Pythonコードを含みますが)HTMLの中で定義されることで、``response.write``がその内容を書くために使用されていることに注意してください(関数はその内容を返しません)。このような理由で、レイアウトでは、``{{=mysidebar()}}``ではなく``{{mysidebar()}}``を用いてビュー関数を読んでいます。このような方法で定義された関数は、引数を取ることができます。

### ビュー内のブロック
``block``:inxx

ビューをよりモジュール化するためのもう1つの方法は``{{block...}}``を用いることです。この仕組は、上記の節で説明した仕組みの代替案になります。

次の"layout.html"を考えます：

``
<html>
  <body>
    {{include}} <!-- must come before the two blocks below -->
    <div class="sidebar">
      {{block mysidebar}}
        my default sidebar
      {{end}}
    </div>
  </body>
</html>
``:code

そして、次の拡張ビューも考えます。
``
{{extend 'layout.html'}}
Hello World!!!
{{block mysidebar}}
my new sidebar!!!
{{end}}
``:code

これは次のような出力を生成します：

``
<html>
  <body>
    Hello World!!!
    <div class="sidebar">
        my new sidebar!!!
    </div>
  </body>
</html>
``:code

ブロックは複数定義することができます。拡張元のビューに置いてブロックが提示されているが、拡張先のビューではされていない場合、拡張元のビューの内容が使用されます。

### テンプレートシステムを用いたEメール生成
``emails``:inxx

Eメールを生成するためにテンプレートシステムを利用することは可能です。たとえば、次のようなデータベーステーブルを考えます。
``
db.define_table('person', Field('name'))
``:code

このとき、データベースのすべてpersonに、ビューファイル"message.html"に保存されている次のようなメッセージを送りたいとします：
``
Dear {{=person.name}},
You have won the second prize, a set of steak knives.
``:code

これは次のような方法で実現できます
``
>>> from gluon.tool import Mail
>>> mail = Mail(globals())
>>> mail.settings.server = 'smtp.gmail.com:587'
>>> mail.settings.sender = '...@somewhere.com'
>>> mail.settings.login = None or 'username:password'
>>> for person in db(db.person.id>0).select():
>>>     context = dict(person=person)
>>>     message = response.render('message.html', context)
>>>     mail.send(to=['who@example.com'],
>>>               subject='None',
>>>               message=message)
``:code

この作業のほとんどは、次の文で行われます
``
response.render('message.html', context)
``:code

これは、ビューの"message.html"を辞書の"context"で定義された変数とともにレンダリングします。そして、レンダリングされたEメールのテキストからなる文字列を返します。contextはテンプレートファイルで利用可能な変数が含まれている辞書です。

メッセージが ``<html>``で始まり、``</html>``で終わる場合、EメールはHTMLのEメールになります。

Eメールを生成に使用したものと同じ仕組は、SMSやテンプレートに基づいた他のタイプのメッセージを生成するために使用することも可能です。

