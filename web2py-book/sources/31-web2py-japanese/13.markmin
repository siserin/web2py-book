## コンポーネントとプラグイン
``component``:inxx
``plugin``:inxx

コンポーネントとプラグインは比較的新しいweb2pyの機能です。それが何なのか、どうあるべきかに関して開発者の間では論争があります。多くの混乱は、他のソフトウェア・プロジェクトにおける異なるユーザーのこれらの用語に由来し、また、開発者が未だその仕様をまとめようと務めていることに由来しています。

しかしながら、プラグインのサポートは重要な機能であり、我々はいくつかの定義を提供する必要があります。これらの定義は最終的なものではなく、単に、本章で説明するプログラミング・パターンに従ったものです。

ここでは次の2つの問題を扱いたいと思います：

- サーバーの負荷を最小化し、コードの再利用を最大化するモジュール化されたアプリケーションをどのように構築できるか？
- ほぼプラグイン・アンド・プレイ形式でコードの一部をどのように配布できるか？

''コンポーネント''は第1の問題を、''プラグイン''は第2の問題を扱います。

### コンポーネント
``load``:inxx
``LOAD``:inxx
``Ajax``:inxx

------
**コンポーネント**は、ウェブページの機能的に自律した部品です。
------

コンポーネントは、モジュール、コントローラ、ビューから構成されることになります。しかし、ウェブページに埋め込まれたとき、HTMLのタグ(たとえば、DIV、SPAN、IFRAMEなど)のなかに局所化されなければならないこと、また、残りのページとは独立にタスクを実行しなければならないこと、以外は厳密な要求はありません。ここでは特に、ページ内でロードされ、Ajaxを介してコンポーネントのコントローラ関数と交信するコンポーネントに注目します。

コンポーネントの1つの例は、DIVの中に保持され、ユーザーのコメントと新規コメントをポストするフォームを表示する"コメント・コンポーネント"です。フォームがサブミットされるとき、フォームはAjaxを介してサーバーに送られ、リストが更新され、コメントはデータベースにおいてサーバーサイドに保存されます。DIVの中身は残りのページをリロードすることなく更新されます。

web2pyのLOAD関数は、明示的なJavaScript/Ajaxの知識やプログラミンなしに、容易にそれを行うことを可能にします。

ここでの目的は、コンポーネントをページレイアウトへと組み立てて、ウェブアプリケーションを開発できるようになることです。

デフォルトの雛形アプリを拡張子した"test"というweb2pyのアプリを考えます。これは、"models/db_comments.py"ファイルにおいて次のような独自モデルを持ちます：

``
db.define_table('comment',
   Field('body','text',label='Your comment'),
   Field('posted_on','datetime',default=request.now),
   Field('posted_by',db.auth_user,default=auth.user_id))
db.comment.posted_on.writable=db.comment.posted_on.readable=False 
db.comment.posted_by.writable=db.comment.posted_by.readable=False 
``:code

"controllers/comments.py"における1つのアクションです

``
@auth.requires_login()
def post():
    return dict(form=crud.create(db.comment),
                comments=db(db.comment.id>0).select())
``:code

そして、対応する"views/comments/post.html"です

``
{{extend 'layout.html'}}
{{for comment in comments:}}
<div class="comment">
  on {{=comment.posted_on}} {{=comment.posted_by.first_name}}
  says <span class="comment_body">{{=comment.body}}</span>
</div>
{{pass}}
{{=form}}
``:code

通常と同じようにアクセス可能です：

``
http://127.0.0.1:8000/test/comments/post
``:code

[[image @///image/en8900.png center 480px]]

これまでは、このアクションにおいて特別なことは行っていません。しかし、レイアウトを拡張しない".load"拡張子の付いた新しいビューを定義することにより、これをコンポーネントに替えることができます。

そこで、"views/comments/post.load"を作成します：

``
{{#extend 'layout.html' <- notice this is commented out!}}
{{for comment in comments:}}
<div class="comment">
  on {{=comment.posted_on}} {{=comment.posted_by.first_name}} 
  says <span class="comment_body">{{=comment.body}}</span>
</div>
{{pass}}
{{=form}}
``:code

これには次のURLでアクセスできます

``
http://127.0.0.1:8000/test/comments/post.load
``:code

これは次のように表示されます：

[[image @///image/en9000.png center 480px]]

これは、単に次のようにするだけで任意のページに埋め込むことができるコンポーネントです。

``
{{=LOAD('comments','post.load',ajax=True)}}
``:code

たとえば"controllers/default.py"において次のように編集し、

``
def index():
    return dict()
``:code

対応するビューにおいて、そのコンポーネントを次のように加えます：

``
{{extend 'layout.html'}}
<p>{{='bla '*100}}</p>
{{=LOAD('comments','post.load',ajax=True)}}
``:code

このページに訪れると

``
http://127.0.0.1:8000/test/default/index
``:code

通常のコンテンツとコメントのコンポーネントが表示されます：

[[image @///image/en9100.png center 480px]]

``{{=LOAD(...)}}``コンポーネントは次のようにレンダリングされます：

``
<script type="text/javascript"><!--
web2py_component("/test/comment/post.load","c282718984176")
//--></script><div id="c282718984176">loading...</div>
``:code

(実際に生成されるコードは、LOAD関数に渡されるオプションに依存します)。

``web2py_component(url,id)``関数は "web2py_ajax.html"において定義されていて、すべての魔法を実行します。これは``url``をAjaxを介して呼び出し、そのレスポンスを対応する``id``のあるDIVに埋め込みます。そして、すべてのフォームのサブミットをDIVに補足し、Ajaxを介してそれらフォームをサブミットします。Ajaxのターゲットは常にそのDIV自身です。

LOADヘルパーのすべての用法は以下の通りです：

``
LOAD(c=None, f='index', args=[], vars={},
     extension=None, target=None,
     ajax=False, ajax_trap=False,
     url=None):
``:code

ここでは：
- 最初の2つの引数``c``と``f``はそれぞれ呼び出したいコントローラと関数です。
- ``args``と``vars``は関数に渡したい引数と変数です。前者はリスト、後者は辞書です。
- ``extension``は省略可能な拡張子です。なお、拡張子は、``f='index.load'``のように、関数の一部としても渡すことができます。
- ``target``はターゲットとなるDIVの``id``です。指定されていない場合は、ランダムなターゲット``id``が生成されます。
- ``ajax``は、DIVがAjaxを介して書き込まれる場合に``True``を設定します。現在のページが返される前に書きこむ必要がある場合は``False``にします(Ajax呼び出しをさけることになります)。
- ``ajax_trap=True``は、DIV内の任意のフォームのサブミットが補足されAjaxを介してサブミットされ、レスポンスがそのDIV内でレンダリングされることを意味します。``ajax_trap=False``は、フォームが通常どおりサブミットされ、したがって、ページ全体がリロードされるを示しています。``ajax=True``の場合は、``ajax_trap``は無視され、``True``として想定されます。
- ``url``が、もし指定されているならば、``c``、``f``、``args``、``vars``、``extension``の値を上書きし、``url``にあるコンポーネントをロードします。他のアプリケーションによって供給されるコンポーネント・ページをロードするのに使用されます(web2pyによって作例されているかは問いません)。

``.load``ビューが指定されていない場合には、アクションによって返される辞書をレイアウトなしにレンダリングする``generic.load``があります。これが最もよく機能するのは、単一のアイテムを保持する辞書の場合においてです。

``.load``拡張子を持ち、他のアクション(たとえばログインフォーム)へリダイレクトするコントローラ関数を持つコンポーネントをLOADする場合、``.load``拡張子は継承され、新しいurl(リダイレクト先)もまた``.load``拡張子を持つようになります。

*以下のことに留意してください：*Ajaxのポストはマルチパートのフォーム、つまり、ファイルアップロードをサポートしていないことから、アップロードフィールドはLOADコンポーネントでは機能しません。個別の.loadビューからPOSTが行われた場合、アップロードフィールドは通常どおり機能するので、これが機能するかのようにだまされるかもしれません。代わりに、アップロードはajax互換のサードパーティ製ウィジェットとweb2pyの手動アップロードを行うstoreコマンドによって行われます。


#### クライアント-サーバー・コンポーネントの通信

コンポーネントのアクションがAjaxを介して呼ばれるとき、web2pyはリクエストにおいて2つのHTTPヘッダを渡します：

``
web2py-component-location
web2py-component-element
``:code

これは次の変数を介してアクションでアクセスできます：

``
request.env.http_web2py_component_location
request.env.http_web2py_component_element
``:code

後者はまた次のようにアクセスできます： ``request.cid``:inxx

``
request.cid
``:code

前者は、コンポーネントのアクションを呼んだページのURLを保持します。
後者はレスポンスを包含することになるDIVの``id``を保持します。

コンポーネントのアクションはまた、2つの特別なHTTPレスポンスのヘッダにおいてデータを保存します。これらは、レスポンス上の全体のページによって解釈されます。それは次の通りです：

``
web2py-component-flash
web2py-component-command
``:code

これらは、次のものを介して設定することができます：

``
response.headers['web2py-component-flash']='....'
response.headers['web2py-component-command']='...'
``:code

または、(アクションがコンポーネントによって呼び出されたなら)自動的に次のようにすることもできます：

``
response.flash='...'
response.js='...'
``:code

前者はレスポンス上でフラッシュさせたいテキストを保持します。
後者はレスポンス上で実行させたいJavaScriptを保持します。改行文字を含むことはできません。

例として、ユーザーが質問できるような連絡フォームを"controllers/contact/ask.py"に定義しましょう。コンポーネントは、システム管理者に質問をメールし、"thank you"メッセージをフラッシュし、ページからそのコンポーネントを取り除きます。

``
def ask():
    form=SQLFORM.factory(
        Field('your_email',requires=IS_EMAIL()),
        Field('question',requires=IS_NOT_EMPTY()))
    if form.accepts(request.vars,session):
        if mail.send(to='admin@example.com',
                  subject='from %s' % form.vars.your_email,
                  message = form.vars.question):
            response.flash = 'Thank you'
            response.js = "jQuery('#%s').hide()" % request.cid
        else:
            form.errors.your_email = "Unable to send the email"
    return dict(form=form)
``:code

最初の4行はフォームを定義し、それを受理します。送信するためのメールオブジェクトはデフォルトの雛型アプリケーションにおいて定義されています。最後の4行は、HTTPリクエストヘッダからデータを取得し、HTTPリクエストヘッダを設定することによって、コンポーネント固有のロジックを実装します。

これで、この連絡フォームを次のようにして任意のページに埋め込むことができるようになります

``
{{=LOAD('contact','ask.load',ajax=True)}}
``:code

この``ask``コンポーネントに対して``.load``ビューを定義しなかったことに気づいてください。なぜならこれは単一のオブジェクト(form)を返し、したがって、"generic.load"で十分なので、そうする必要がありません。

#### 捕捉されたAjaxリンク ``A``:inxx ``Ajax links``:inxx

通常、リンクは捕捉されません。したがって、コンポーネント内のリンクをクリックすると、リンクしたページ全体がロードされます。時として、リンクしたページがコンポーネント内にロードされるようにしたい場合があります。これは次のように``A``ヘルパを用いて実現することができます：


``
{{=A('linked page',_href='http://example.com',cid=request.cid)}}
``:code

``cid``が指定される場合、リンクしたページはAjaxを介してロードされます。
``cid``はロードしたページの中身を置くための場所であるhtml要素の``id``です。
この例では、``request.cid``、すなわち、リンクを生成したコンポーネントの``id``を設定しています。リンクされたページは、URLコマンドを用いて生成された内部URLにすることが可能で、普通はそうします。

関数へのアクセスをコンポーネントのajax呼び出し以外からブロックすることができます。これは、次のような``cid``を参照するデコレータを用います：

``
@auth.requires(request.cid)
``:code

### プラグイン

-------
**プラグイン**はアプリケーションのファイルのサブセットです。
-------

そして、''他にも''この様な意味があります:

- プラグインはモジュール、モデル、コントローラ、ビューではなく、むしろモジュール、モデル、コントローラとビューの両方またはいずれか一方を含んだものです。
- プラグインは機能的に自律的である必要はありませんし、他のプラグインや特定のユーザが作った関数に依存してもかまいません。
- ''プラグイン''は''プラグインシステム''では無いため、ある程度の独立を実現するためのルールを決めようとしていますが、登録や独立といった概念はありません。
- あなたのアプリケーション用のプラグインについて説明しており、web2pyのプラグインではありません。

では、なぜ''プラグイン''と呼ばれているのでしょうか？それは、アプリケーションのサブセットをパッキングし他のアプリケーション上にアンパック（つまり''プラグイン''）するメカニズムを提供するからです。この定義に基づき、あなたのアプリケーション中のファイルはプラグインとして扱われます。

アプリケーションが配布されるとき、そのプラグインはパックされ、それと一緒に配布されます。

プラクティスで、**admin**はアプリケーションから独立してパッキングやアンパッキングするためのインターフェイスを提供します。接頭語``plugin_``''name''の名前をもつアプリケーションのファイルとフォルダは:

``web2py.plugin.``''name''``.w2p``

というファイルへ格納され一緒に配布されます。

[[image @///image/en9200.png center 480px]]

**admin**がそれらのファイルは一緒に配布されるべきであることを理解し、異なるページに表示することを除いて、プラグインを含むファイルはweb2pyによって他のファイルと同様に扱われます。

[[image @///image/en9300.png center 480px]]

しかし実際は、上記の定義によると、これらのプラグインは**admin**などによって認知されたプラグインより一般的です。

実際、私たちは2つのタイプのプラグインだけ考えることにします:

- ''コンポーネントプラグイン''。これは前節で定義されたようなコンポーネントを含んだプラグインです。コンポーネントプラグインは1つ以上のコンポーネントを含めることができます。上記の''comments''コンポーネントを含んだ''plugin_comments''の例で考えることができます。他の例は''tagging''コンポーネントとプラグインによって定義されたいくつかのデータベーステーブルを共有する''tag-cloud''コンポーネントを含んだ``plugin_tagging``などです。
- ''レイアウトプラグイン''。これはレイアウトビューとそれに必要な静的なファイルを含んだプラグインです。プラグインが適用されるとアプリケーションに新しい印象と見栄えを与えます。

上記の定義により、前節で製作された、例えば"controllers/contact.py"はプラグインです。それらを1つのアプリケーションから他のアプリケーションに移動することができ、それらが定義したコンポーネントを使用できます。まだ、それらは**admin**によりそういうものとして認められていません。解決するべき2つの問題があります:

- 慣例に従いプラグインファイルに名前を付けることで**admin**は同じプラグインの属するものとして認識できます。
- もしモデルファイルがプラグインにあったら、慣例を決めることで名前空間を汚さず、互いに衝突することを避けることをできます。

''name''と呼ばれるプラグインを前提としましょう。ここには従われるべきルールがあります:

**ルール 1**:
プラグインモデルとコントローラはそれぞれ以下のように呼ばれる必要があり

- ``models/plugin_``''name''``.py``
- ``controllers/plugin_``''name''``.py``

そして、それぞれのフオルダ内にあるプラグインビュー、モデル、staticとprivateファイルは以下のように呼ばれる必要があります:

- ``views/plugin_``''name''``/``
- ``modules/plugin_``''name''``/``
- ``static/plugin_``''name''``/``
- ``private/plugin_``''name''``/``

**ルール 2**:
プラグインモデルは下記の名前で始まるオブジェクトを定義するだけで可能です。
- ``plugin_``''name''
- ``Plugin``''Name''
- ``_``

**ルール 3**:
プラグインモデルは下記の名前から始まるsession変数を定義するだけでできます。
- ``session.plugin_``''name''
- ``session.Plugin``''Name''

**ルール 4**:
ルール 4: プラグインはライセンスとドキュメントを含まなくてはなりません。ここに置かれるべきです:
- ``static/plugin_``''name''``/license.html``
- ``static/plugin_``''name''``/about.html``

**ルール 5**:
プラグインは"db.py"雛形で定義されたグローバルオブジェクトだけに依存できます。すなわち

- ``db``というデータベースのコネクション
- ``auth``という``Auth``インスタンス
- ``crud``という``Crud``インスタンス
- ``service``という``Service``インスタンス

さらに洗練され1つ以上のdbインスタンスが存在する場合のパラメータ設定を持っているプラグインもあります。

**ルール 6**:
もしプラグインにパラメータを設定する必要があるならば、以下で説明するPluginManagerで設定されるべきです。
``PluginManager``:inxx

上記のルールによって以下を確実にすることができます:
- **admin**は全ての``plugin_``''name''ファイルと単一の部品としてのフォルダを認識する。
- プラグインはお互いに干渉しない。

上記のルールはプラグインのバージョンと依存関係の問題を解決しません。この本の範囲を超えています。

#### コンポーネントプラグイン
``component plugin``:inxx

コンポーネントプラグインはコンポーネントを定義するプラグインです。コンポーネントは通常データベースに接続し独自のモデルを定義します。

ここで前に書いたコードと同様だが前述のルールに従い、``comments``コンポーネントを``comments_plugin``に変えます。

1つ目に、"models/plugin_comments.py"と呼ばれるモデルを作成します:

``
db.define_table('plugin_comments_comment',
   Field('body','text', label='Your comment'),
   Field('posted_on', 'datetime', default=request.now),
   Field('posted_by', db.auth_user, default=auth.user_id))
db.plugin_comments_comment.posted_on.writable=False
db.plugin_comments_comment.posted_on.readable=False 
db.plugin_comments_comment.posted_by.writable=False
db.plugin_comments_comment.posted_by.readable=False 

def plugin_comments():
    return LOAD('plugin_comments','post',ajax=True)
``:code
(プラグインの組み込みを単純化する関数を定義する最後の2行に注意してください。)

2つ目は、"controllers/plugin_comments.py"を定義します:

``
@auth.requires_login()
def post():
    comment = db.plugin_comments_comment
    return dict(form=crud.create(comment),
                comments=db(comment.id>0).select())
``:code

3つ目は"views/plugin_comments/post.load"と呼ばれるビューを作成します:

``
{{for comment in comments:}}
<div class="comment">
  on {{=comment.posted_on}} {{=comment.posted_by.first_name}} 
  says <span class="comment_body">{{=comment.body}}</span>
</div>
{{pass}}
{{=form}}
``:code

そして、**admin**使用して配布用のプラグインをパックできます。管理者はこのプラグインを以下のように保存できます:

``
web2py.plugin.comments.w2p
``:code

**admin**の**edit**ページで以下を自分が作成したビューに追加してプラグインをインストールするだけで、どのビューでもプラグインを使用することができます。

``
{{=plugin_comments()}}
``:code

もちろんパラメータを取得しオプションを設定したコンポーネントを用いることでより洗練されたプラグインを製作できます。コンポーネントがより複雑になればなるほど、名前の衝突を避けるのが難しくなります。以下に記載されたプラグインマネージャーはこの問題を回避するように設計さいれています。

#### プラグインマネージャー

``PluginManager``は``gluon.tools``で定義されたクラスです。内部でどの様に動作するかを説明する前に、使用方法を説明します。

前述の``comments_plugin``を改善してみます。プラグインコード自身を編集しないで:

``
db.plugin_comments_comment.body.label
``:code

カスタマイズできるようにしたいからです。

その方法を示します:

始めに、このように"models/plugin_comments.py"プラグインを書き換えてください:

``
db.define_table('plugin_comments_comment',
   Field('body','text',label=plugin_comments.comments.body_label),
   Field('posted_on', 'datetime', default=request.now),
   Field('posted_by', db.auth_user, default=auth.user_id))

def plugin_comments()
    from gluon.tools import PluginManager
    plugins = PluginManager('comments', body_label='Your comment')

    comment = db.plugin_comments_comment
    comment.label=plugins.comments.body_label
    comment.posted_on.writable=False
    comment.posted_on.readable=False 
    comment.posted_by.writable=False
    comment.posted_by.readable=False 
    return LOAD('plugin_comments','post.load',ajax=True)
``:code

テーブル定義を除く全てのコードがどの様にして単一の関数内で定義されるかに注意してください。また、``PluginManager``のインスタンスがどの様にして作られるかにも注意してください。

あなたのアプレケーション内のそれ以外のモデル、例えば"models/db.py"で、次のようにこのプラグインを設定してください:

``
from gluon.tools import PluginManager
plugins = PluginManager()
plugins.comments.body_label = T('Post a comment')
``:code

-----
``plugins``オブジェクトは"models/db.py"のデフォルトとなる雛形アプリケーションですでにインスタンスを作成されています。
-----

PluginManagerオブジェクトはStorageオブジェクトのスレッドレベルでインスタンスを1つしか生成しないStorageオブジェクトです。それは同じアプリケーション内に好きなだけインスタンスを作成できることを意味しますが、(それらが同じ名前を持っていようがいまいが)それらはたった1つのPluginManager インスタンスであるかのように振る舞います。

具体的には、どのプラグインファイルも独自のPluginManagerオブジェクトを作成し、それ自身とデフォルトパラメータを設定できます:

``
plugins = PluginManager('name', param1='value', param2='value')
``:code

このコード以外の場所(例えば"models/db.py"へ)にそれらのパラメータを上書きできます:

``
plugins = PluginManager()
plugins.name.param1 = 'other value'
``:code

1つの場所で複数のプラグインを設定できます。

``
plugins = PluginManager()
plugins.name.param1 = '...'
plugins.name.param2 = '...'
plugins.name1.param3 = '...'
plugins.name2.param4 = '...'
plugins.name3.param5 = '...'
``:code

-----
プラグインが定義されたとき、PluginManagerは引数を取らなくてはなりません: プラグイン名とオプションでデフォルトパラメータの名前付き引数があります。しかしながら、プラグインが設定されたときに、PluginManagerコンストラクタは引数を取りません。その設定はプラグインの定義の前にされなければなりません(つまり、アルファベット順で最初に来るモデルファイルであるべきです)。
-----

#### レイアウトプラグイン
``layout plugin``:inxx

普通レイアウトプラグインはコードを含まずビューと静的ファイルだけなので、レイアウトプラグインはコンポーネントプラグインより単純です。とはいえ、良いプラクティスに従うべきです:

まず始めに、"static/plugin_layout_''name''/"(この名前はあなたのレイアウトの名前です) というフォルダを作り、そこにあなたの静的ファイルを配置してください。

2つ目は、あなたのレイアウトと画像へのリンクを含んだ"views/plugin_layout_''name''/layout.html"というレイアウトファイルを作り、CSSとJavaScriptファイルを"static/plugin_layout_''name''/"に入れてください。

3つ目は、単純に読めるように"views/layout.html"を修正してください:

``
{{include 'plugin_layout_name/layout.html'}}
``:code

この設計の利点ははこのプラグインのユーザが複数のレイアウトをインストールできることと、ただ単に"views/layout.html"を編集することでどのデザインを適用すべきかを選択できることです。加えて、"views/layout.html"はプラグインと一緒に**admin**によりパックされませんので、インストール済みレイアウトのユーザコードをプラグインが上書きする心配はありません。

### ``plugin_wiki``
``plugin_wiki``:inxx ``wiki``:inxx

-----
免責条項: plugin_wikiはまだかなり頻繁に開発を行っており、従って、web2pyのコア関数と同じレベルの後方互換性を約束しません。
-----

**plugin_wiki**は強化されたプラグインです。この意味は複数の役立つコンポーネントを定義しアプリケーションの開発方法を変えるかもしれないということです:

plugin_wikiはここからダウンロードできます:

``
http://web2py.com/examples/static/web2py.plugin.wiki.w2p
``:code

**plugin_wiki**の背景には、ほとんどのアプリケーションがセミスタティックなページを含んでいるということです。これらは複雑なカスタムロジックを含んでいないページです。それらは構造化テキスト(ヘルプページを彷彿させるもの)、画像、音楽、ビデオ、crudフォームや標準コンポーネントのセット(コメント、タグ、図、案内図)、などを含んでいます。これらのページは公開されているか、ログインや他の認証制限を必要とします。これらのページはメニューでリンクされるかもしれませんし、ウィザードフォームを通じて辿りつけるだけかもしれません。plugin_wikiはあなたがよく利用するweb2pyアプリケーションへこの様なページを追加する簡単な方法を提供します。

具体的に**plugin_wiki**が提供するのは:
``plugin_wikiのウィジェット``:inxx

- あなたのアプリケーションにページを追加したりスラグによって参照を許可するwikiの様なインターフェイス。これらのページ(wikiページとして参照される)はバージョンを持っておりデータベースに保存されます。
- 公開と非公開ページ(ログインを要求)。ページがログインを要求するなら、ユーザが特別なグループメンバーシップを持つことを要求するでしょう。
- 3段階:1,2,3. レベル1はテキスト、画像、音楽と動画だけを含むページです。レベル2はウィジェット(wikiページに組み込められる前述で定義されたコンポーネント)を含むページです。レベル3はweb2pyのテンプレートコードも含めることができるページです。
- markmin構文かWYSIWYGエディタを選択してHTMLを編集できます。
- ウィジェットコレクション:  コンポーネントとして実装されていて、セルフドキュメント化されおり、普通のweb2pyビューに通常のコンポーネントとして埋め込まれたり、単純な構文でwikiページに埋め込まれたりできます。
- プラグイン(例えば、実行するべきプラグインコードの定義、カスタマイズメニュー、他)のカスタマイズに使われる特別なページ(``meta-code``、``meta-menu``、他.)の設定。

------
**plugin_wiki**を加えた**welcome**アプリケーションはブログのような簡単なWebアプリケーションを構築するための適切な開発環境と考えることができます。
------

ここからは**plugin_wiki**を**welcome**雛形アプリケーションのコピーへ適用します。

始めに、プラグインをインストールすると''pages''と呼ばれる新しいメニューアイテムが追加されることに注意してください。

メニューアイテム''pages''をクリックするとプラグインアクションにリダイレクトされます:

``
http://127.0.0.1:8000/myapp/plugin_wiki/index
``:code

[[image @///image/en9400.png center 480px]]

プラグインのインデックスページはプラグイン自身を使い作成されたページ一覧を表示し、``slug``を選択することで新規ページを作成することができます。``home``ページを作ってみましょう。ここにリダイレクトされます。

``
http://127.0.0.1:8000/myapp/plugin_wiki/page/home
``:code

''create page''をクリックし内容を編集します。

[[image @///image/en9500.png center 480px]]

-----
デフォルトで、プラグインはレベル3になっており、ページのコードと同等にウィジェットの挿入もできることを意味しています。デフォルトではページ内容を表現するためにmarkmin構文を使用しています。
-----

#### Markmin構文
``Markmin構文``:inxx

markmin構文の代表的なものを示します:

------
**markmin** | **html**
``# title`` | ``<h1>title</h1>``
``## subtitle`` | ``<h2>subtitle</h2>``
``### subsubtitle`` | ``<h3>subsubtitle</h3>``
``**bold**`` | ``<b>bold</b>``
``''italic''`` | ``<i>italic</i>``
``http://...com`` | ``<a href="http://...com">http:...com</a>``
``[[name http://example.com]]`` | ``<a href="http://example.com">name</a>``
``[[name http://...png left 200px]]`` | ``<img src="http://...png" alt="name"``
`` `` | ``    align="left" width="200px" />``
------

このように書くことで他のページへのリンクを追加できます。

``
[[mylink name page:slug]]
``:code

もしページが存在していない場合、そのページを作成するかを尋ねられます。

編集ページはページに添付ファイル(つまり静的ファイル)を追加できます。

[[image @///image/en9600.png center 480px]]

このように書くことで静的ファイルへリンクできます。

``
[[mylink name attachment:3.png]]
``:code

またはページに埋め込むこともできます。

``
[[myimage attachment:3.png center 200px]]
``:code

画像サイズ(``200px``)はオプションです。``center``はオプションではありませんが``left``や``right``で置き換えられます。

引用テキストを組込めます。

``
-----
this is blockquoted
-----
``:code

テーブルも同様に組込めます

``
-----
0 | 0 | X
0 | X | 0
X | 0 | 0
-----
``:code

そして逐語的なテキスト

``
!`!!`!
verbatim text
!`!!`!
``:code

オプションで``-----``か``!`!!`!``の一番最後に:クラスを追加ることもできます。引用テキストやテーブルでは、タグのクラスクラスに変換されます。例えば:

``
-----
test
-----:abc
``:code

この様に反映されます

``
<blockquote class="abc">test</blockquote>
``:code

逐語的なテキストのためクラスは異なるタイプの組込みコンテンツとして使用されます。

例えば、``code_``''language''で言語を明確にすることでシンタックスハイライトされたコードを組込めます。

``
!`!!`!
def index(): return 'hello world'
!`!!`!:code_python
``:code

ウィジェットを組み込めます:

``
!`!!`!
name: widget_name
attribute1: value1
attribute2: value2
!`!!`!:widget
``:code

編集ページから、"widget builder"をクリックし、リストからウィジェットフォームを対話的に追加できます:

[[image @///image/en9700.png center 480px]]

(ウィジェットのリストについては次のサブセクションを見てください)。

web2pyテンプレート言語のコードを組み込むこともできます:

``
!`!!`!
{{for i in range(10):}}<h1>{{=i}}</h1>{{pass}}
!`!!`!:template
``:code

#### ページの権限

ページを編集するときは次のフィールドを使用します:
- **active**(デフォルトは``True``)。もしページが有効でないなら、訪問者にアクセスさせません(たとえパブリックでも)。
- **public**(デフォルトは`True``)。ページが有効なら、ログイン無しで訪問者はアクセスできます。
- **Role**(デフォルトはNone)。ページにロールがあれば、ページはログインやロールに対応するグループメンバーの訪問者がアクセス可能となります。

#### スペシャルページ
``plugin_wikiのメニュー``:inxx

**meta-menu**はメニューを含みます。ページが存在していなかったら、web2pyは"models/menu.py"の``response.menu'' defined定義を使用します。meta-menuページの内容はメニューを上書きします。構文は次のようになります：

``
Item 1 Name http://link1.com
   Submenu Item 11 Name http://link11.com
   Submenu Item 12 Name http://link12.com
   Submenu Item 13 Name http://link13.com
Item 2 Name http://link1.com
   Submenu Item 21 Name http://link21.com
      Submenu Item 211 Name http://link211.com
      Submenu Item 212 Name http://link212.com
   Submenu Item 22 Name http://link22.com
   Submenu Item 23 Name http://link23.com
``:code 

インデントはサブメニュー構造化させるためです。それぞれのアイテムはテキスト、その後にリンクで構成されます。リンクは``page:``''slug''にできます。``None``リンクはどのページにもリンクしません。余計なスペースは無視されます。

他の例です:

``
Home             page:home
Search Engines   None
   Yahoo         http://yahoo.com
   Google        http://google.com
   Bing          http://bing.com
Help             page:help
``:code

次のように表示されます:

[[image @///image/en9800.png center 480px]]

``meta-menu``:inxx ``meta-code``inxx ``meta-header``:inxx ``meta-sidebar``:inxx ``meta-footer``:inxx
**meta-code**は別のスペシャルページであり、web2pyのコードを含まなくてはなりません。これはあなたのモデルを拡張したもので、実際ここにモデルコードも書けます。"models/plugin_wiki.py"コードが実行されるときにそれが実行されます。

``meta-code``でテーブルを定義できます。

例えば、``meta-code``にこのコードを書くことで単純な"friends"テーブルを定義できます:

``
db.define_table('friend',Field('name',requires=IS_NOT_EMPTY()))
``:code

そして、 次のコードを選択するページに組み込むことでfriend-managementインターフェイスを製作できます:
``jqGrid``:inxx ``CRUD``:inxx

``
## List of friends
!`!!`!
name: jqgrid
table: friend
!`!!`!:widget

## New friend
!`!!`!
name: create
table: friend
!`!!`!:widget

``:code

"List of fiends"と"New friend"という2つのヘッダーページ(#で開始) があります。ページはfriendsの一覧を表示するjqgridウィジェットと新たなfriendを追加するウィジェットを生成するcrudという2つのウィジェット(ヘッダーに対応する) を持ちます。

[[image @///image/en9900.png center 480px]]

``meta-header``, ``meta-footer``, ``meta-sidebar``は"welcome/views/layout.html"のデフォルトレイアウトでは使用されません。これらを使用したい場合、**admin**を使い"layout.html"を編集し適当な場所に次のタグを置きましょう:

``
{{=plugin_wiki.embed_page('meta-header') or ''}}
{{=plugin_wiki.embed_page('meta-sidebar') or ''}}
{{=plugin_wiki.embed_page('meta-footer') or ''}}
``:code

この方法で、これらのページの内容はレイアウトのヘッダー、サイドバーやフッターに書かれます。

#### plugin_wikiの設定

"models/db.py"の他のプラグインと同様で下記のように書けます。

``
from gluon.tools import PluginManager
plugins = PluginManager
plugins.wiki.editor = auth.user.email == mail.settings.sender
plugins.wiki.level = 3
plugins.wiki.mode = 'markmin' or 'html'
plugins.wiki.theme = 'ui-darkness'
``

それぞれ
- **editor**がtrueの場合、現在のログインユーザがplugin_wikiページを編集するために認証されます
- **level権限**: ページ編集は1を、ウィジェットをページに埋め込むには2を、コードの埋め込みには3を指定してください
- **mode**は"markmin"エディタかWYSIWYG"html"エディタのどちらを使用するかを決定します ``WYSIWYG``:inxx
- **theme**はjQuery UIテーマの名前を指定します。デフォルトで"ui-darkness"のみがインストールされています

ここにテーマを追加してください。

``
static/plugin_wiki/ui/%(theme)s/jquery-ui-1.8.1.custom.css
``:code

#### 現行のウィジェット

どのウィジェットもplugin_wikiページや普段使用するweb2pyテンプレートに組込むことができます。

例えば、plugin_wikiにYouTubeビデオを組み込めます。

``
!`!!`!
name: youtube
code: l7AWnfFRc7g
!`!!`!:widget
``

同じことをweb2pyビューでも可能です:

``
{{=plugin_wiki.widget('youtube',code='l7AWnfFRc7g')}}
``:code

どちらの場合でも、この様な結果になります:

[[image @///image/en10000.png center 480px]]

デフォルト値が無いウィジェットの引数が必要です。

全ての現行ウィジェットのリストです:

``
read(table,record_id=None)
``:code

レコードを読み込み、表示します
- ``table`` is the name of a table
- ``record_id`` is a record number


``
create(table,message='',next='',readonly_fields='',
       hidden_fields='',default_fields='')
``:code

レコード生成フォームとして表示
- ``table``はテーブル名
- ``message``レコードが生成された後に表示するためのメッセージ
- ``next``はリダイレクトする場所で、例として"page/index/[id]"
- ``readonly_fields``はフィールドをカンマで区切ったリスト
- ``hidden_fields``はフィールドをカンマで区切ったリスト
- ``default_fields``は"fieldname=value"をカンマで区切ったリスト

``
update(table,record_id='',message='',next='',
       readonly_fields='',hidden_fields='',default_fields='')
``:code

レコードアップデートフォームを表示
- ``table``はテーブル名
- ``record_id``はアップデートされるレコードか{{=request.args(-1)}}
- ``message``はレコードが生成された後に表示されるメッセージ
- ``next``はリダイレクトする場所で、例として"page/index/[id]"
- ``readonly_fields``はフィールドをカンマで区切ったリスト
- ``hidden_fields``はフィールドをカンマで区切ったリスト
- ``default_fields``は"fieldname=value"をカンマで区切ったリスト

``
select(table,query_field='',query_value='',fields='')
``:code

テーブルに全レコードをリスト
- ``table``はテーブル名
- ``query_field``と``query_value``について、クエリ``query_field == query_value``によりレコードをフィルタリングします。
- ``fields``は提示されたカンマで区切ったフィールドのリスト

``
search(table,fields='')
``:code

レコードを選択するためのウィジェット
- ``table``はテーブル名
- ``fields``は提示されたカンマで区切ったフィールドのリスト

``jqGrid``:inxx

``
jqgrid(table,fieldname=None,fieldvalue=None,col_widths='',
       _id=None,fields='',col_width=80,width=700,height=300)
``:code

jqGridプラグインの組込み
- ``table``はテーブル名
- ``fieldname``, ``fieldvaluea``はオプションフィルター(fieldname==fieldvalue)
- ``col_widths``はカラムの幅
- ``colnames``は表示されたコラム名のリスト
- ``_id``はjqGridを含むDIVタグの"id"
- ``fields``は表示されたカラムのリスト
- ``col_width``はカラムの幅のデフォルト値
- ``height``はjqGridの高さ
- ``width``はjqGridの幅

一度plugin_wikiをインストールしたら、他のビューにもjqGridを簡単に使用できます。使用例(fk_id==47でyrtableをフィルタリングしたものを表示します)

``latex``:inxx

``
latex(expression)
``:code

LaTeXを組込むためにGoogle charting APIを使用します

``pie chart``:inxx

``
pie_chart(data='1,2,3',names='a,b,c',width=300,height=150,align='center')
``:code

円グラフを組込みます
- ``data``はコンマで区切られた値のリスト
- ``names``はラベルをカンマで区切ったリスト(データアイテム内の1つ)
- ``width``は画像の幅
- ``height``は画像の高さ
- ``align``は画像の位置を決定

``bar chart``:inxx

``
bar_chart(data='1,2,3',names='a,b,c',width=300,height=150,align='center')
``:code

棒グラフを組み込むためにGoogle charting APIを使用します
- ``data``は値をカンマで区切ったリスト
- ``names``はラベルをカンマで区切ったリスト(データアイテム内の1つ)
- ``width``は画像の幅
- ``height``は画像の高さ
- ``align``は画像の位置を決定

``slideshow``:inxx

``
slideshow(table, field='image', transition='fade', width=200, height=200)
``:code

スライドショーを組込みます。テーブルから画像を取得します。

- ``table``はテーブル名
- ``field``はフィールドを画像を含むテーブルにアップロード
- ``transition``は画像が移り変わる際のエフェクトを決定、(例, フェード、他)
- ``width``は画像の幅
- ``height``は画像の高さ

``YouTube``:inxx

``
youtube(code, width=400, height=250)
``:code

YouTubeビデオの組込み(コードで)
- ``code``はビデオのコード
- ``width``はビデオの幅
- ``height``はビデオの高さ

``Vimeo``:inxx

``
vimeo(code, width=400, height=250)
``:code

Vimeoビデオの組込み(コードで)
- ``code``はビデオのコード
- ``width``はビデオの幅
- ``height``はビデオの高さ

``flash mediaplayer``:inxx

``
mediaplayer(src, width=400, height=250)
``:code

メディアファイル(Flashビデオやmp3ファイルなど)を組込みます
- ``src``はビデオのソース
- ``width``は画像の幅
- ``height``は画像の高さ

``comments``:inxx

``
comments(table='None', record_id=None)
``:code

Commentsページにテーブル/レコードへリンクされたコメントを組み込みます

- ``table``はテーブル名
- ``record_id``はレコードのid

``tags``:inxx

``
tags(table='None', record_id=None)
``:code

tagsページにテーブル/レコードへリンクされたタグを組込みます
- ``table``はテーブル名
- ``record_id``はレコードのid

``tag could``:inxx

``
tag_cloud()
``:code

タグクラウドを組込みます

``Google map``:inxx

``
map(key='....', table='auth_user', width=400, height=200)
``:code
テーブルからGoogle map上に位置取得したものを組込みます

- ``key``はgoogle map apiキー(127.0.0.1でデフォルト動作)
- ``table``はテーブル名
- ``width``は地図の幅
- ``height``は地図の高さ

``
The table must have columns: latitude, longitude and map_popup.
When clicking on a dot, the map_popup message will appear. 
``:code

``
iframe(src, width=400, height=300)
``:code

``<iframe></iframe>``にページを組込みます

``
load_url(src)
``:code

LOAD関数を使ってURLの内容を読み込みます

``
load_action(action, controller='', ajax=True)
``:code

LOAD関数を使うURL(request.application, controller, action)の内容を読み込みます


#### ウィジェットの拡張

"models/plugin_wiki_"の後に任意の名前をつけたファイルを新しく生成することでplugin_wikiへのウィジェットを追加でき、それは以下のようなコードを含んだファイルです:

``
class PluginWikiWidgets(PluginWikiWidgets):
    @staticmethod
    def my_new_widget(arg1, arg2='value', arg3='value'):
        """
        document the widget
	"""
        return "body of the widget"
``:code

1行目はウィジェットのリストを拡張することを示します。クラスの中に、必要なだけ関数を定義できます。アンダースコアで始まる関数は除き、それぞれの静的関数は新しいウィジェットです。関数はデフォルト値の有無に関わらない任意の数を取ります。Markmin構文を使い関数のドキュメントを書きましょう。

plugin_wikiページにウィジェットが組込みまれる場合、引数は文字列でウィジェットに渡されます。これが意味するのは、ウィジェット関数はどの引数も文字列で受け取り、最終的には必要な形式に変換できるようにしなくてはなりません。どの形式に変換する必要があるかはdocstringでドキュメントしておくようにしてください。

ウィジェットはweb2pyヘルパーの文字列を返すことができます。後述する場合は、それらは``.xml()``でシリアライズされています。

新しいウィジェットはグローバル名前空間で他の宣言済み変数にアクセスできることに注意してください。

例として、このチャプターの始めに製作した"contact/ask"フォームを表示する新しいウィジェットを製作しましょう。これは以下のコードが書かれた"models/plugin_wiki_contact"ファイルを生成することで可能です。

``
class PluginWikiWidgets(PluginWikiWidgets):
    @staticmethod
    def ask(email_label='Your email', question_label='question'):
        """
	This plugin will display a contact us form that allows
	the visitor to ask a question.
	The question will be emailed to you and the widget will
	disappear from the page.
	The arguments are

	- email_label: the label of the visitor email field
	- question_label: the label of the question field	

	"""
        form=SQLFORM.factory(
           Field('your_email', requires=IS_EMAIL(), label=email_label),
           Field('question', requires=IS_NOT_EMPTY()), label=question_label)
        if form.accepts(request.vars,session):
           if mail.send(to='admin@example.com',
                        subject='from %s' % form.vars.your_email,
                        message = form.vars.question):
	                      command="jQuery('#%s').hide()" % div_id
               response.flash = 'Thank you'
               response.js = "jQuery('#%s').hide()" % request.cid
        else:
            form.errors.your_email="Unable to send the email"
        return form.xml()
``:code

-------
``response.render(...)``関数がウィジェットにより明示的に呼ばれない限り、plugin_wikiウィジェットはレンダリングされません。
-------
