## Introducción

Web2py es libre, es un marco de desarrollo de código abierto para el desarrollo ágil y seguro de aplicaciones web; está escrito y programado en idioma Python ``python``:cite.

Web2py es un marco de desarrollo completo, lo que significa que contiene todos los componentes que se necesitan para construir aplicaciones web completamente funcionables.

Web2py ha sido diseñado para guiar al desarrollador a seguir las buenas prácticas en desarrollo orientado a la web, dichas prácticas como el patrón de desarrollo (MVC) Modelo Vista Controlado, en el cual separa la representación de datos (modelo), de la presentación de los datos (la vista), y también de la lógica de la aplicación (controlador). Además provee librerías para ayudar al desarrollador, ha diseñar, implementar y probar estas tres partes separadas y hacerlas funcionar todas juntas.

Ha sido construído para ser seguro. Esto significa que automáticamente identifica muchos de los problemas que puedan llevar a vulnerabilidades de seguridad, siguiendo buenas prácticas establecidas. Por ejemplo, valida todas las entradas, (para prevenir injertos de código "injections"), comillando todas las salidas (para prevenir "cross-site scripting"), renombra los archivos subidos al servidor (para prevenir "traversal attacks").

Web2py incluye una Capa de Abstracción de la Base de Datos llamada "DAL" que escribe SQL``sql:w``:cite dinámicamente así el desarrollador no tiene que hacerlo. El DAL sabe como generar el SQL transparentemente para SQLite``sqlite``:cite, MySQL``mysql``:cite, PostgreSQL``postgres``:cite, MSSQL``mssql``:cite,
FireBird``firebird``:cite, Oracle``oracle``:cite, IBM DB2``db2``:cite, Informix``informix``:cite, and
Ingres``ingresdb``:cite.

El DAL también soporta llamadas a las funciones del almacén de datos de Google, cuando corre en "Google App Engine (GAE)" ``gae``:cite. Experimentalmente soportamos más bases de datos. Por favor verifique en el sitio de web2py y en la lista de correo para adapatadores más recientes. También una vez que una o más tablas de una base de datos son definidas, web2py genera una interfaz de administración de dichas tablas o base de datos. 

Web2py difiere de otros marcos de desarrollo web, en que es el único que adopta el paradigma de la web 2.0, dónde la web es la computadora. De hecho, web2py no requiere instalación ni configuración alguna; corre en cualquier arquitectura, que corra python (Windows, Windows CE, Mac OS X, iOS, and Unix/Linux), y el desarrollo, implementación y fases de mantenimiento para la aplicación pueden ser hechas de manera local o de manera remota. web2py corre con CPython (implementación del lenguaje C) y Jython (implementación del lenguaje java), en versiones de python 2.5, 2.6, y 2.7.

web2py incluye control de errores por ticket. Si se produce un error, el usuario recibe un ticket,
y el detalle se almacena en un reporte para el administrador.

web2py es open source y se distribuye según los términos de la licencia LGPL versión 3.

Otra característica de web2py es que nosotros, sus desarrolladores, nos comprometemos a mantener la compatibilidad hacia atrás en versiones futuras.
Así lo venimos haciendo desde la primer publicación de web2py, en octubre del 2007.

Se han agregado nuevas funcionalidades y reparado bugs, pero si un programa funcionaba con web2py 1.0, ese programa también funcionará actualmente.

Aquí se muestran algunos ejemplos de comandos de web2py que ilustran su potencia y simplicidad. El siguiente código:

``
db.define_table('persona', Field('nombre'), Field('imagen', 'upload'))
``:code

Crea una tabla de base de datos llamada "persona" con dos campos: "nombre", un string; e "imagen", algo que
necesita ser subido (la imagen en sí). Si la tabla en la base de datos ya existe pero no refleja la nueva definición, se modificará apropiadamente y en forma automática.

Para la tabla definida arriba, el siguiente código:
``
form = crud.create(db.persona)
``:code

crea un formulario de alta/inserción para esa tabla que permite a los usuarios subir imágenes. Además
realiza la validación del formulario enviado, modifica el nombre de la imagen subida en una forma segura, almacena la imagen en un archivo,
inserta el registro correspondiente en la base de datos, evita los formularios duplicados y auto-modifica
el formulario mismo agregando mensajes de error si la información provista por el usuario no valida.

El siguiente código:
``
@auth.requires_permission('read','persona')
def f(): ....
``:code

impide a los visitantes el acceso a la función ``f`` a menos que el visitante sea miembro de un grupo cuyos mienbros tengan permisos de "lectura" de los registros de la tabla "persona". Si el visitante no está autenticado, es redirigido a una página de acceso (incluída por defecto con web2py).

El siguiente código incrusta un componente en una página.
``
{{=LOAD('otro_controlador','function.load',ajax=True, ajax_trap=True)}}
``:code

Esto ordena a web2py que cargue en una vista el contenido generado por la otra función del controlador (esto es válido para cualquier función). Carga el contenido con Ajax, lo incrusta en la página actual (utilizando la plantilla de diseño de la página actual, no el diseño de la función en otro_controlador), y aísla todos los formularios incluídos en el contenido descargado para que también puedan ser enviados con Ajax sin necesidad de actualizar la página. Además puede cargar (``LOAD``) contenidos desde páginas no realizadas con web2py.

El ayudante LOAD permite un diseño realmente modular para las aplicaciones; se explica con mayor detalle en el último capítulo de este libro.


### Fundamentos

La programación con Python típicamente se basa en estos principios básicos:
- No repetirse (DRY)
- Debería de haber una única forma de hacer algo
- Lo explícito es mejor que lo implícito

web2py sigue al pie de la letra los primeros dos principios obligando al desarrollador a que utilice buenas prácticas en
ingeniería de software que desalientan el código repetitivo. web2py guía al desarrollador a través de casi toda
tarea común de programación de aplicaciones (creación y procesamiento de formularios, manejo
de sesiones, cookie, errores, etc.).

``request``:inxx
En cuanto al tercer principio, que en ocasiones entra en conflicto con los dos anteriores, web2py se diferencia de
otros framework. Particularmente, web2py no importa aplicaciones de usuario, sino que las ejecuta en un contexto preconfigurado. Este contexto expone los keyword de Python, así como también los keyword de web2py.

Para algunos esto podría representar el uso de ``magia``, pero no debería ser así.
Es sólo que, en la práctica, algunos módulos ya se han importado sin necesidad de que tu lo hagas.
web2py intenta evitar la molesta característica de
otros framework que obligan al desarrollador a importar los mismos módulos al inicio de cada modelo y
controlador

web2py, al importar sus propios módulos, ahorra tiempo y evita equivocaciones, con lo cual se respeta el espíritu de "no repetirse"
y "debería de haber una única forma de hacer algo".

Si el desarrollador quisiera utilizar otros módulos de Python (stdlib) o módulos de terceros, esos
módulos deben importarse en forma explícita, como en cualquier otro programa en Python.

### Los framework para la web
``PHP``:inxx ``ASP``:inxx ``JSP``:inxx

En esencia, una aplicación web consiste de un conjunto de programas (o funciones) que se
ejecutan cuando se visita el correspondiente URL.
La salida/resultado (``output``) del programa es devuelta al visitante y procesada para ser visualizada por el navegador (``render``).

El objeto de un framework web es permitir a los desarrolladores la construcción de nuevas aplicaciones velozmente, con facilidad y evitando equivocaciones.
Esto se logra implementando interfaces (API) y herramientas que reduzcan y simplifiquen la cantidad de escritura de código fuente necesaria.

Las dos estrategias clásicas para desarrollar aplicaciones web son:
- Generar HTML``html:w,html:o``:cite en "al vuelo"
- Incrustar código fuente en páginas HTML.

El primer modo se adoptó, por ejemplo, para los antiguos script en CGI
El segundo modo es utilizado, por ejemplo, por PHP``php``:cite
(donde el código está en PHP, un lenguaje estilo C), ASP (donde el código es Visual Basic), y JSP (escrito en Java).

Aquí se muestra un ejemplo de programa en PHP que, cuando se ejecuta, recupera información desde una base de datos y
devuelve una página HTML mostrando los registros seleccionados:

``
<html><body><h1>Registros</h1><?
  mysql_connect(localhost,usuario,clave);
  @mysql_select_db(basededatos) or die( "No se pudo consultar la base de datos");
  $consulta="SELECT * FROM contactos";
  $resultado=mysql_query($consulta);
  mysql_close();
  $i=0;
  while ($i < mysql_numrows($resultado)) {
    $nombre=mysql_result($resultado,$i,"nombre");
    $telefono=mysql_result($resultado,$i,"telefono");
    echo "<b>$nombre</b><br>Teléfono:$telefono<br /><br /><hr /><br />";
    $i++;
  }
?></body></html>
``:code

El problema con este modo de trabajo es que el código fuente es incrustado en el HTML, pero el mismo código además necesita
generar más HTML e instrucciones SQL
para hacer la consulta a la base de datos, confundiendo múltiples capas de
la aplicación y tornándola difícil de leer y mantener. La situación es
peor aún para aplicaciones Ajax, y la complejidad aumenta con el número de páginas (archivos) que conforman
la aplicación.

La funcionalidad del ejemplo citado arriba puede expresarse en web2py con dos líneas de código Python:
``
def index():
    return HTML(BODY(H1('Registros'), db().select(db.contactos.ALL)))
``:code

En este sencillo ejemplo, la estructura de la página HTML se representa al vuelo por medio de objetos ``HTML``, ``BODY``, and ``H1``; la base de datos ``db`` se consulta con el comando ``select``; finalmente, todo
se convierte secuencialmente en HTML.
Nótese que ``db`` no es un keyword sino una variable definida por el usuario. En adelante, mantendremos esta nomenclatura para hacer referencia a una conexión de base de datos, evitando la confusión.

Los framework web o armazones son típicamente categorizados en dos grupos: Un framework ``glued`` (pegado) se
construye ensamblando (pegando) varios componentes de terceros. Un framework "full-stack" se arma
creando componentes diseñados específicamente para ser estrechamente integrados y funcionar en conjunto.

web2py es un framework "full-stack". Prácticamente todos sus componentes fueron creados "de cero" y se diseñaron para trabajar
conjuntamente, pero igualmente utilizables fuera del dominio del framework. Por ejemplo, la
Capa de Abstracción de la Base de Datos (DAL) o el lenguaje de plantillas puede utilizarse independientemente del
framework de web2py importando ``gluon.dal`` o ``gluon.template`` en tus propias aplicaciones Python. ``gluon`` es el nombre del módulo que contiene las librerías del sistema. Algunas librerías de web2py,
como por ejemplo las de formularios para altas bajas y modificaciones, tienen dependencias en otras secciones
de web2py. web2py puede además trabajar con librerías Python de terceros, incluyendo otros lengujes de plantillas
y capas de abstracción de datos, pero no se integrarán tan consitentemente como los componentes originales.


### Modelo-Vista-Controlador
``Modelo-Vista-Controlador``:inxx

web2py ayuda al desarrollador a separar la representación de datos (el modelo), la
presentación de datos (la vista) y el flujo de trabajo (el controlador). Volvamos al ejemplo anterior
para ver cómo crear una aplicación de web2py tomándolo como base. Este es un ejemplo de la interfaz de edición de MVC:

[[image @///image/en0.png center 480px]]

El flujo de trabajo típico de una solicitud en web2py está ilustrado en el siguiente diagrama:

[[image @///image/en100.png center 480px]]

En el diagrama:
- El servidor web puede ser el incorporado por web2py o un software de terceros, como Apache. El servidor maneja maneja múltiples hilos
- "main" es la aplicación principal WSGI. Realiza todas las tareas comunes y envuelve las aplicaciones del usuario. Se encarga del manejo de cookie, sesiones, transacciones, enrutamiento de URL y enrutamiento reverso, y transferencia de datos (``dispatching``)
Puede servir y procesar la transferencia de archivos estáticos (streaming) si el servidor web no está configurado para hacerlo
- Los componentes de los Modelos, Vistas y Controladores conforman la aplicación del usuario
- Múltiples aplicaciones se pueden alojar en la misma instancia de web2py
- Las flechas discontinuas representan la comunicación con el/los motor/es de la base de datos. Las consultas a la base de datos se pueden escribir en SQL puro (no recomendado) o utilizando la Capa de Abstracción de la Base de Datos (recomendado), para que el código de la aplicación no dependa de un motor de base de datos específico
- El ``dispatcher`` asocia las URL solicitadas a una llamada de función en el controlador. La salida de la función puede ser una cadena o un diccionario de símbolos (una tabla hash). Los datos en el diccionario son procesados (``render``) por una vista. Si el visitante solicita una página HTML (la opción por defecto), el diccionario es traducido como página HTML. Si el visitante solicita la misma página en XML, web2py busca una vista que convierta el diccionario en XML. El desarrollador puede crear vistas que conviertan las páginas a cualquiera de los protocolos soportados por defecto (HTML, XML, JSON, RSS, CSV, RTF) o protocolos adicionales personalizados
- Todas las llamadas se envuelven en una transacción, y toda excepción no manejada hace que la transacción regrese a su estado inicial (``roll back``). Si la solicitud es exitosa, se aplican los cambios a la base de datos (``commit``)
- web2py además maneja sesiones y los cookie de la sesión automáticamente, y cuando una transacción se aplica, la sesión también se almacena, a menos que se especifique otra cosa.
- Es posible llevar un registro de tareas recurrentes (a través de cron) a correr en tiempos programados y/o luego de haberse completado ciertas acciones. De esta forma es posible correr tareas de larga duración y exigentes para el servidor en segundo plano conservando la velocidad de navegación

He aquí una aplicación MVC minimalista y completa, que consiste de tres archivos:

-----
"db.py" es el modelo:
-----

``
db = DAL('sqlite://storage.sqlite')
db.define_table('contacto',
   Field('nombre'),
   Field('telefono'))
``:code

Esto conecta a la base de datos (en el ejemplo una base de datos SQLite almacenada en el archivo ``storage.sqlite``) y
define una tabla llamada ``contacto``. Si la tabla no existe, web2py la crea y, en forma transparente
y en segundo plano, genera el código SQL en el dialecto apropiado para el motor de base de datos específico utilizado.
El desarrollador puede
ver el código SQL generado pero no necesita cambiar del código si la base de datos implementada, que por defecto es
SQLite, se reemplaza con MySQL, PostgreSQL, MSSQL, FireBird, Oracle, DB2, Informix, Interbase, Ingres, o el Google App Engine (tanto SQL como NoSQL).

Una vez que la tabla se haya definido y creado, web2py también genera una interfaz web de admnistración de
la base de datos completamente funcional, llamada **appadmin**, para acceder a la base de datos y las tablas.

-----
"default.py" es el controlador:
-----

``
def contactos():
    grid=SQLFORM.grid(db.contacto, user_signature=False)
    return locals()
``:code

En web2py, los URL se asocian a módulos Python y llamadas a funciones. En este caso, el controlador contiene
una sóla función (o "acción") llamada ``contactos``. Una acción puede
devolver una cadena (la página web devuelta) o un diccionario (un conjunto de
pares ``nombre:valor``) o el conjunto de variables locales (como en el ejemplo).
Si la función devuelve un diccionario, esta es pasada a una vista con el mismo
nombre que el controlador/función, que a su vez convierte la página (``render``).
En este ejemplo, la función ``contactos`` genera una grilla con las opciones listar/buscar/crear/actualizar/borrar para la tabla ``db.contacto`` 
y devuelve la grilla a la vista.

-----
"default/contactos.html" es la vista:
-----

``
{{extend 'layout.html'}}
<h1>Administrar Mis Contactos</h1>
{{=grid}}
``:code

Esta vista es llamada automáticamente por web2py luego de que la función del controlador asociada (acción) se ejecute.
El objeto de esta vista es la conversión de las variables en el diccionario devuelto (en nuestro caso ``grid``) en HTML.
El archivo de la vista está escrito en HTML, pero incrusta código Python delimitado por los separadores especiales ``{{`` y ``}}``.
Esto es muy diferente al ejemplo de código PHP, porque el único código
incrustado en el HTML es código de la "capa de presentación". El archivo "layout.html" referido al inicio de la
vista es creado por web2py y constituye la plantilla de diseño base para todas las aplicaciones. El archivo de la plantilla puede
ser fácilmente modificado o reemplazado.


### ¿Por qué web2py?

web2py is uno entre varios framework de aplicaciones web, pero tiene características únicas y atractivas.
web2py se desarrolló inicialmente como una herramienta para enseñanza, con las siguientes motivaciones básicas:
- Que fuera fácil para los usuarios aprender desarrollo web "server-side" sin comprometer la funcionalidad. Por esa razón, web2py no requiere instalación ni configuración, no tiene dependencias (excepto la distribución de código fuente, que requiere Python 2.5 y los módulos de las librerías estándar), y expone la mayor parte de su funcionalidad a través de una interfaz de navegador web.
- web2py se ha mantenido estable desde el primer día porque sigue un diseño ``top-down``; por ejemplo, su API fue diseñada antes de ser implementada. Incluso si nuevas funcionalidades fueron agregadas, web2py nunca ha introducido incompatibilidades hacia atrás, y no va a introducir incompatibilidades cuando se agreguen nuevas características en el futuro.
- web2py resuelve proactivamente los problemas de seguridad más importantes que plagan a muchas aplicaciones web modernas, según el análisis de OWASP``owasp``:cite abajo.
- web2py es liviano. Su núcleo de librerías, incluyendo la Capa de Abstracción de la Base de Datos, el lenguaje de plantillas, y los ayudantes pesan 1.4MB. El código fuente completo incluyendo aplicaciones de ejemplo e imágenes pesa 10.4MB.
- web2py tiene una huella pequeña y es realmente rápido. Utiliza el servidor WSGI Rocket ``rocket``:cite desarrollado por Timothy Farrell. Es tan rápido como Apache con mod_wsgi. Nuestros test también indican que, en una PC promedio, sirve una página dinámica media sin acceso a la base de datos en unos 10ms. El DAL tiene una sobrecarga muy baja, típicamente menos de 3%.
- web2py usa sintaxis Python para modelos, controladores y vistas, pero no importa modelos y controladores (a diferencia del resto de los demás framework) - sino que los ejecuta. Esto significa que las app pueden instalarse, desinstalarse y modificarse sin tener que reiniciar el servidor web (incluso en producción), y aplicaciones diferentes pueden coexistir sin que sus módulos interfieran entre sí.
- web2py utiliza una Capa de Abstracción de la Base de Datos (DAL) en lugar de un Mapeador Relacional de Objetos (ORM). Desde un punto de vista conceptual, esto significa que distintas tablas de bases de datos se asocian (``map``) en diferentes instancias de una clase ``Table`` y no en distintas clases, mientras que los registros se asocian/mapean a instancias de una clase ``Row``, no a instancias de la clase de la tabla correspondiente. Desde un punto de vista práctico, significa que la sintaxis SQL asocia uno-a-uno en la sintaxis de DAL, y es necesaria una "caja negra" con programación compleja de metaclases como es común en los ORM más populares, que implicaría una mayor latencia.

WSGI ``wsgi:w,wsgi:o``:cite (Web Server Gateway Interface) es un estándar emergente de Python para comunicaciones entre un servidor web y aplicaciones Python.

Aquí se puede ver una captura de la interfaz **admin** de web2py:

[[image @///image/en200.png center 480px]]


### Seguridad
``security``:inxx

El Open Web Application Security Project``owasp``:cite  (OWASP) es una comunidad gratuita y abierta enfocada en las mejoras en seguridad para aplicaciones de software.

OWASP ha listado los problemas mayores de seguridad que ponen en peligro a las apliaciones web.
Esa lista se reproduce a continuación, junto con una descripción de cómo cada problema se resuelve en web2py:

- ``cross site scripting``:inxx "Cross Site Scripting (XSS): las vulnerabilidades de XSS ocurren cuando una aplicación toma datos provistos por el usuario y los envía a un navegador web sin previamente validar o codificar el contenido. XSS permite a los atacantes ejecutar script en el navegador de la víctima que pueden tomar control de la sesión del usuario, desfigurar sitios web, probablemente introducir ``gusanos``, etc." ''web2py, por defecto, ``escapa`` todas las variables procesadas en la vista, previniendo XSS.''
- ``injection flaws``:inxx "Injection Flaws (vulnerabilides de inyección): La inyección, en particular la de SQL, es común en las aplicaciones web. Las inyecciones ocurren cuando información provista por el usuario es enviada como parte de una instrucción o consulta. La información hostil del atacante engaña al intérprete para que ejecute comandos no esperados o para que modique información." ''web2py incluye una Capa de Abstracción de la Base de Datos que hace imposible la inyección de SQL. Normalmente, las instrucciones SQL no son escritas por el desarrollador. En cambio, el SQL es generado dinámicamente por el DAL, asegurando que toda información ingresada se haya escapado correctamente.''
- ``malicious file execution``:inxx "Malicious File Execution (ejecución maliciosa de archivos): El código vulnerable a la inclusión remota de archivos (RFI) permite a los atacantes incluír código hostil e información, dando como resultado ataques devastadores, como el compromiso total del servidor." ''web2py permite únicamente la ejecución de funciones expuestas, previniendo la ejecución maliciosa de archivos. Las funciones importadas nunca se exponen; sólo se exponen las acciones. web2py utiliza una interfaz administrativa web que hace muy fácil el seguimiento de las acciones que se han expuesto.''
- ``insecure object reference``:inxx "Insecure Direct Object Reference (referencias directas a objetos inseguros): una referencia directa a un objeto ocurre cuando un desarrollador expone una referencia a un objeto de implementación interna, como un archivo, directorio, registro de la base de datos o clave, como URL o parámetro de formulario. Los atacantes pueden manipular esas referencias para acceder a otros objetos sin autorización." ''web2py no expone ningún objeto interno; es más, web2py valida toda URL, previniendo de esa forma los denominados ``directory traversal attacks``. web2py también provee un mecanismo simple para la creación de formularios que automáticamente valida todas los datos ingresados.''
- ``CSRF``:inxx "Cross Site Request Forgery (CSRF) o Suplantación de identidad entre servidores: Un ataque CSRF fuerza al navegador de una víctima autenticada a que envíe una solicitud pre-autenticada a una aplicación web vulnerable, que entonces fuerza al navegador de la víctima a realizar una acción hostil en beneficio del atacante. El CSFR puede ser tan importante como la apliación web a la que ataca." ''web2py previene el CSRF tanto como los envíos de formularios duplicadas por error asignando una clave única aleatoria a cada formulario. Incluso, web2py utiliza UUID para la cookie de la sesión.''
- ``information leakage``:inxx ``improper error handling``:inxx "Information Leakage and Improper Error Handling (Filtrado de información y manejo inapropiado de errores): Las aplicaciones pueden filtrar inadvertidamente información sobre su configuración, constitución interna, o violar la privacidad a través de una serie de problemas en la aplicación misma. Los atacantes utilizan estas debilidades para hurtar información sensible, o perpetrar ataques más peligrosos." ''web2py incluye un sistema de ticket de reporte. Ningún error puede resultar en código expuesto al usuario. Todos los errores se almacenan y se envía el ticket al usuario para permitir su seguimiento. Pero el detalle de los errores sólo es accesible para el administrador.''
- "Broken Authentication and Session Management (Fallos de autenticación y manejo de sesiones): Las credenciales y claves de sesión a menudo no se protegen apropiadamente. Los atacantes pueden acceder a contraseñas, claves o referencias cifradas para falsificar la identidad del usuario (por ejemplo autenticándose como un usuario registrado)." ''web2py incorpora un mecanismo para autenticación administrativa, y maneja las sesiones en forma independiente para cada aplicación. La interfaz administrativa además fuerza el uso de cookie seguras cuando el cliente no está en "localhost". Para las aplicaciones, incluye una poderosa API para Control de Acceso Basada en Roles (``RBAC``)''
- ``cryptographic store``:inxx "Insecure Cryptographic Storage (Almacenamiento criptográfico inseguro): Las aplicaciones web raramente utilizan funciones criptográficas apropiadamente para proteger datos y credenciales. Los atacantes utilizan los datos débilmente protegida para el robo de identidad y otros crímenes, como el fraude con tarjetas de crédito." ''web2py usa los algoritmos MD5 o el HMAC+SHA-512 para proteger las contraseñas almacenadas. Existen otros algoritmos también disponibles.
- ``secure communications``:inxx "Insecure Communications (inseguridad de transferencias): Las aplicaciones frecuentemente omiten la encripción del tráfico de red cuando es necesario para proteger comunicaciones sensibles." ''web2py incluye el ``ssl``:cite servidor Rocket WSGI con soporte para SSL, pero también puede utilizar Apache o Lighthttpd y mod_ssl para servir comunicaciones con cifrado SSL.
- ``access restriction``:inxx "Failure to Restrict URL Access (Acceso irrestricto con URL): Con frecuencia una aplicación sólo protege las funcionalidades sensibles evitando mostrar links o direcciones URL a usuarios no autorizados. Los atacantes poueden utilizar esta debilidad para acceder y realizar operaciones no autorizadas accediendo a esos URL directamente." ''web2py asocia las solicitudes URL a módulos y funciones de Python. web2py provee de un mecanismo para declarar cuáles funciones son públicas y cuáles requieren autenticación y autorización. La API de Control de Acceso Basado en Roles incorporada permite a los desarrolladores la restricción de acceso a cualquier función basada en autenticación simple (``login``), pertenencia a grupo o permisos basados en grupos. La permisología es minuciosa y se puede combinar con ``CRUD`` (ABM) para permitir, por ejemplo, el acceso a un conjunto específico de tablas y/o registros. web2py además permite el uso de direcciones URL con firma digital y provee de una API para firmar digitalmente solicitudes con ajax.''

Las características de seguridad de web2py fueron analizadas y los resultados se pueden consultar en ref.``pythonsecurity``:cite.


### Con esta entrega

Puedes descargar web2py desde el sitio web oficial:

``
http://www.web2py.com
``:code

web2py está compuesto por los siguientes componentes:
- **librerías**: proveen el núcleo de la funcionalidad de web2py y pueden utilizarse directamente desde el código fuente.
- **servidor web**: el servidor web Rocket WSGI.
- La aplicación **admin**: se usa para crear, diseñar y administrar otras aplicaciones web2py. **admin** provee un Entorno de Desarrollo Integrado (IDE) basado en web para la creación de aplicaciones. También incluye otras funcionalidades, como la shell y herramientas para testing basados en web.
- la aplicación de **ejemplos**: contiene documentación y ejemplos interactivos. **examples** es un clon del sitio oficial de web2py.com, e incluye la documentación ``epydoc``.
- la aplicación **welcome**: es la plantilla básica de andamiaje para cualquier aplicación. Por defecto incluye un menú en cascada basado en CSS y autenticación para usuarios (tratado en el capítulo 9).

web2py se distribuye como código fuente, y en forma binaria para Microsoft Windows y para Mac OS X.

La distribución de código fuente puede ser utilizada en cualquier plataforma que corra Python e incluye los componentes mencionados arriba. Para ejecutar el código fuente, debes tener Python 2.5 pre-instalado en el sistema. También necesitas tener instalado uno de los motores de base de datos soportados.
Para testing y aplicaciones livianas, puedes usar una base de datos SQLite, que viene incluído en Python 2.5

Las versiones binarias de web2py (para Windows y Mac OS X) incluyen el intérprete de Python 2.5 y la base de datos SQLite. Técnicamente, estos últimos no son componentes de web2py. Su inclusión en la distribución binaria te permite tener web2py funcionando en el acto.

La siguiente imagen ilustra la estructura general de web2py:

[[image @///image/en300.png center 480px]]

### License
``license``:inxx

El uso de web2py se rige según la licencia LGPL versión 3. El texto completo de la licencia está disponible en ref.``lgpl3``:cite.

En conformidad con LGPL es posible:

- redistribuír web2py con aplicaciones del usuario (incluyendo las versiones binarias oficiales de web2py)
- publicar aplicaciones del usuario que utilizan librerías oficiales de web2py bajo la licencia que se elija.

Por otra parte, es condición:

- Declarar apropiadamente en la documentación que la aplicación utiliza web2py
- Publicar toda modificación de las librerías de web2py bajo la licencia LGPLv3

La licencia incluye el usual aviso sobre responsabiliades:

NO HAY GARANTÍAS PARA EL PROGRAMA, EN LA MEDIDA PERMITIDA POR LA LEY APLICABLE.
EXCEPTO CUANDO SE INDIQUE LO CONTRARIO POR ESCRITO, LOS TITULARES DEL COPYRIGHT
Y/U OTRAS PARTES PROPORCIONAN EL PROGRAMA "TAL CUAL" SIN GARANTÍAS DE NINGÚN TIPO,
YA SEAN EXPRESAS O IMPLICADAS, INCLUYENDO, PERO NO LIMITADO A, LAS GARANTÍAS
IMPLÍCITAS DE COMERCIALIZACIÓN Y APTITUD PARA UN PROPÓSITO PARTICULAR. EL RIESGO EN
CUANTO A LA CALIDAD Y RENDIMIENTO DEL PROGRAMA QUEDA BAJO SU RESPONSABILIDAD.
SI EL PROGRAMA ES DEFECTUOSO, USTED ASUME EL COSTO DE TODO SERVICIO, REPARACIÓN O
CORRECCIÓN.

EN NINGÚN CASO, A MENOS QUE LO EXIJA LA LEY APLICABLE O QUE SEA ACORDADO POR ESCRITO,
UN TITULAR DE DERECHO DE AUTOR O CUALQUIER OTRA PARTE QUE MODIFIQUE Y/O
TRANSMITA EL PROGRAMA COMO SE PERMITE ARRIBA, SERÁ RESPONSABLE ANTE USTED POR
DAÑOS, INCLUYENDO CUALQUIER DAÑO GENERAL, ESPECIAL, INCIDENTAL O DAÑOS DERIVADOS DEL
USO O IMPOSIBILIDAD DE USAR EL PROGRAMA, INCLUYENDO PERO NO LIMITADO A, LA PÉRDIDA O
DAÑO DE DATOS, LAS PÉRDIDAS SUFRIDAS POR USTED O TERCEROS O UN FALLO DEL PROGRAMA PARA
OPERAR CON CUALQUIER OTRO PROGRAMA, INCLUSO SI EL PROPIETARIO O PARTE DE OTRO TIPO FUE
INFORMADA SOBRE LA POSIBILIDAD DE TALES DAÑOS.

**Primeras versiones**

Anteriores versiones de web2py, 1.0.*-1.90.*, se publicaron con licencia GPL2 con una
excepción comercial que, por motivos prácticos, era muy similar a la actual licencia LPGLv3.

**Software de terceros distribuído con web2py**

web2py contiene software de terceros bajo la carpeta gluon/contrib/ y varios archivos JavaScrpt y CSS.
Estos archivos se distibuyen con web2py bajo sus licencias originales, como se detalla en cada archivo.

### Reconocimientos

web2py fue originalmente desarrollado y registrado por Massimo Di Pierro.
La primera versión (1.0) fue lanzada en Octubre, 2007. Desde entonces ha sido adoptado por muchos usuarios, que en ocasiones han contribuído también con reportes de bugs, testing, depuración, parches y la revisión de este libro.

Algunos de los colaboradores destacados son, en orden alfabético por el primer nombre:

Alexey Nezhdanov,
Alvaro Justen,
Andrew Willimott,
Angelo Compagnucci,
Anthony Bastardi,
Antonio Ramos,
Arun K. Rajeevan,
Attila Csipa,
Bill Ferret,
Boris Manojlovic,
Branko Vukelic,
Brian Meredyk,
Bruno Rocha,
Carlos Galindo,
Carsten Haese,
Chris Clark,
Chris Steel,
Christian Foster Howes,
Christopher Smiga,
CJ Lazell,
Cliff Kachinske,
Craig Younkins,
Daniel Lin,
David Harrison,
David Wagner,
Denes Lengyel,
Douglas Soares de Andrade,
Eric Vicenti,
Falko Krause,
Farsheed Ashouri,
Fran Boon,
Francisco Gama,
Fred Yanowski,
Gilson Filho,
Graham Dumpleton,
Gyuris Szabolcs,
Hamdy Abdel-Badeea,
Hans Donner,
Hans Murx,
Hans C. v. Stockhausen,
Ian Reinhart Geiser,
Ismael Serratos,
Jan Beilicke,
Jonathan Benn,
Jonathan Lundell,
Josh Goldfoot,
Jose Jachuf,
Josh Jaques,
José Vicente de Sousa,
Keith Yang,
Kenji Hosoda,
Kyle Smith,
Limodou,
Lucas D'Ávila,
Marcel Leuthi,
Marcel Hellkamp,
Marcello Della Longa,
Mariano Reingart,
Mark Larsen,
Mark Moore,
Markus Gritsch,
Martin Hufsky,
Martin Mulone,
Mateusz Banach,
Miguel Lopez,
Michael Willis,
Michele Comitini,
Nathan Freeze,
Niall Sweeny,
Niccolo Polo,
Nicolas Bruxer,
Olaf Ferger,
Omi Chiba,
Ondrej Such,
Ovidio Marinho Falcao Neto,
Pai,
Paolo Caruccio,
Patrick Breitenbach,
Phyo Arkar Lwin,
Pierre Thibault,
Ramjee Ganti,
Robin Bhattacharyya,
Ross Peoples,
Ruijun Luo,
Ryan Seto,
Scott Roberts,
Sergey Podlesnyi,
Sharriff Aina,
Simone Bizzotto,
Sriram Durbha,
Sterling Hankins,
Stuart Rackham,
Telman Yusupov,
Thadeus Burgess,
Tim Michelsen,
Timothy Farrell,
Yair Eshel,
Yarko Tymciurak,
Younghyun Jo,
Vidul Nikolaev Petrov,
Vinicius Assef,
Zahariash.

Seguramente me he olvidado de alguien, así que pido disculpas.

Quiero agradecer especialmente a Jonathan, Mariano, Bruno, Martín, Nathan, Simone, Thadeus, Tim, Iceberg, Denes, Hans, Christian, Fran and Patrick for their major contributions to web2py and Anthony, Alvaro, Bruno, Denes, Felipe, Graham, Jonathan, Hans, Kyle, Mark, Michele, Richard, Robin, Roman, Scott, Shane, Sharriff, Sriram, Sterling, Stuart, Thadeus (and others) por la revisión de varias versiones de este libro. Sus contribuciones fueron invaluables. Si encuentras errores en este libro, son exclusivamente míos, probablemente introducidos por ediciones del último minuto. También quiero agradecer a Ryan Steffen de Wiley Custom Learning Solutions por su ayuda con la publicación de la primer versión de este libro.

web2py contiene código de los siguientes autores, a quienes también quiero agradecer a:

Guido van Rossum por Python``python``:cite, Peter Hunt, Richard Gordon, Timothy Farrell por el servidor web Rocket``rocket``:cite  , Christopher Dolivet por EditArea``editarea``:cite, Bob Ippolito por simplejson``simplejson``:cite, Simon Cusack y Grant Edwards por pyRTF``pyrtf``:cite, Dalke Scientific Software por pyRSS2Gen``pyrss2gen``:cite, Mark Pilgrim por feedparser``feedparser``:cite, Trent Mick por markdown2``markdown2``:cite, Allan Saddi por fcgi.py, Evan Martin por el módulo de memcache para Python``memcache``:cite, John Resig por jQuery``jquery``:cite.

La tapa de este libro fue diseñada por Peter Kirchner en Young Designers.

Agradezco a Helmut Epp (rector de la Universidad de DePaul), David Miller (Decano del College of Computing and Digital Media de la Universidad DePaul), y Estia Eichten (Miembro de MetaCryption LLC), por su continua confianza y ayuda.


Por último, quiero agradecer a mi esposa, Claudia, y a mi hijo, Marco, por soportarme durante todo el tiempo que he empleado desarrollando web2py, intercambiando email con usuarios y colaboradores, y escribiendo este libro. Este libro está dedicado a ellos.


### Acerca del libro

Este libro incluye los siguientes capítulos, sin contar esta introducción:

- Capítulo 2 es una introducción minimalista a Python. Se asumen conocimientos tanto de programación estructurada como de programación orientada a objetos como por ejemplo bucles, condiciones, llamadas a funciones y clases, y cubre la sintaxis básica de Python. Además incluye ejemplos de módulos Python que se utilizarán en otros capítulos. Si ya conoces Python, puedes saltarte este capítulo.
- Capítulo 3 muestra cómo iniciar web2py, habla acerca de la interfaz administrativa, y guía al lector a través de varios ejemplos que van creciendo en complejidad: una aplicación que devuelve una cadena, una aplicación de conteo, un blog de imágenes, y una aplicación wiki completa que permite subir imagenes y hacer comentarios, con autenticación y autorización, servicios web y una fuente RSS. Mientras lees este capítulo, puedes consultar el capítulo 2 para la sintaxis general de Python o los capítulos siguientes para una referencia más detallada acerca de las funciones utilizadas.
- Capítulo 4 cubre más sistemáticamente la estructura central y las librerías: mapeo de URL, request, response, session, cache, cron, internacionalización y el flujo de trabajo general o``workflow``.
- Capítulo 5 es una referencia del lenguaje de plantillas utilizado para construír las vistas. Muestra cómo se incrusta código Python en HTML, y describe el uso de ayudantes (objetos que generan HTML)
- Capítulo 6 trata sobre la Capa de Abstracción de la Base de Datos, o DAL. La sintaxis de la DAL se presenta a través de una serie de ejemplos.
- Capítulo 7 trata sobre formularios, validación de formularios y procesamiento de formularios. FORM es el ayudante de bajo nivel para la creación de formularios. SQLFORM es el constructor de formularios de alto nivel. En el capítulo 7 también discutimos la API para altas, bajas y modificaciones (CRUD).
- Capítulo 8 es sobre comunicación con mensajes como el envío de email y SMS.
- Capítulo 9 cubre autenticación, autorización y el mecanismo ampliable para Control de Acceso Basado en Roles (RBAC) disponible con web2py. También se discute sobre la configuración de Mail y CAPTCHA, ya que se utilizan para el sistema de autenticación. En la tercera edición del libro hemos agregado un tratamiento extenso de la integración con servicios de autenticación de terceros como OpenID, OAuth, Google, Facebook, LikedIn, etc.
- Capítulo 10 es sobre la creación de servicios web en web2py. Damos ejemplos de integración con el Kit de Herramientas Web de Google por medio de Pyjamas, y con Adobe Flash a través de PyAMF.
- Capítulo 11 tiene recetas para web2py y jQuery. web2py se ha diseñado principalmente para programación del lado del servidor, pero incluye jQuery, porque consideramos que es la mejor librería open source de JavaScript disponible para efectos y Ajax. En este capítulo, veremos cómo utilizar eficazmente jQuery con web2py.
- Capítulo 12 habla sobre los componentes y plugin de web2py como medio para producir aplicaciones modulares. Damos un ejemplo de plugin que implementa varias funcionalidades comúnmente utilizadas, como cartografía, comentarios, etiquetas y wiki.
- Capítulo 13 es sobre despliegue en producción de aplicaciones web2py. Principalmente resolvemos tres posibles escenarios en producción: en un servidor web Linux o un conjunto de servidores (que creemos es la alternativa de despliegue de más peso), corriendo como servicio en un entorno de Microsoft Windows, y despliegue en Google App Engine. En este capítulo, además tratamos problemas de seguridad y escalabilidad.
- Capítulo 14 contiene variedad de recetas para resolver tareas específicas, incluyendo actualizaciones, geocoding, paginación, la API de Twitter, y más.

Este libro solamente cubre las funcionalidades básicas de web2py y la API que viene con web2py.
Este libro no cubre las ``appliances`` de web2py (i.e. aplicaciones listas para usar)

Puedes descargar appliances de web2py desde su sitio web ``appliances``:cite.
Puedes encontrar más temas desarrollados en AlterEgo``alterego``:cite, el sitio interactivo de Preguntas Frecuentes de web2py.

Este libro se ha escrito utilizando la sintaxis ``MARKMIN``:inxx y automáticamente convertido a HTML, LaTeX y PDF.

### Elementos de estilo

PEP8 ``style``:cite contiene buenas prácticas de estilo para programar con Python. Notarás
que web2py no siempre sigue estas reglas. Esto no es por omisiones o negligencia; nosotros
creemos que los usuarios de web2py deberían seguir estas reglas y los alentamos a hacerlo. A veces
elegimos no seguir algunas reglas al definir objetos de ayudantes para minimizar la probabilidad
de conflictos con objetos definidos por el usuario.

Por ejemplo, la clase que representa un ``<div>`` se llama ``DIV``, mientras que de acuerdo con
la referencia de estilo de Python debería de haberse nombrado ``Div``. Creemos que, para este ejemplo específico
utilizar un "DIV" todo en mayúsculas es una elección más natural. Es más, esta estrategia da libertad a
los programadores para crear una clase llamada "Div" si así lo eligen.
Nuestra sintaxis también sigue naturalmente la notación de DOM para la mayoría de los navegadores (incluyendo, por ejemplo, Firefox).

De acuerdo con la guía de estilo de Python, las cadenas de sólo mayúsculas deberían usarse para constantes y no
para variables. Siguiendo con nuestro ejemplo, incluso considerando que ``DIV`` es una clase,
se trata de una clase especial que nunca debería ser modificada por
el usuario porque al hacerlo introduciría incompatibiliades con otras aplicaciones web2py.
Por esa razón, creemos que esto hace de la clase ``DIV``
algo que debería ser tratado como una constante y que por lo tanto justifica nuestra notación.

En resumen, se siguen las siguientes convenciones:
- Los ayudantes para HTML y los validadores son definidos con mayúsculas por lo descripto arriba (por ejemplo ``DIV``, ``A``, ``FORM``, ``URL``).
- El objeto para traducción ``T`` se define con mayúscula aunque no se trate de una clase sino de una instancia. Lógicamente el objeto para traducción realiza una acción similar a la de un ayudante de HTML, modificando la parte de conversión o "render" de la presentación. Además, ``T`` necesita ser fácilmente reconocible en el código y debe tener un nombre corto.
- Las clases de la DAL siguen la guía de estilo de Python (sólo la primera letra es mayúscula), por ejemplo ``Table``, ``Field``, ``Query``, ``Row``, ``Rows``, etc.

En todos los demás casos creemos haber seguido, tanto como nos fue posible,
la Guía de Estilo de Python (POP8)
Por ejemplo todas las instancias de objetos usan minúsculas (request, response, session, cache) y todas las clases internas usan mayúscula en la primer letra.

En todos los ejemplos de este libro, las keyword de web2py se muestran en negrita, mientras que las cadenas de texto y comentarios tienen letra cursiva.

