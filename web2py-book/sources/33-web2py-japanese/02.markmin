## Python言語
``Python``:inxx

### Pythonについて
Pythonは高水準で凡用性の高いプログラミング言語です。開発者の生産性と可読性に重きを置いて設計されています。 その設計思想は、プログラマの生産性とコードの読みやすさを強調しています。簡単なセマンティックと基礎的なコマンドを最小限の核となる構文を持ちます。一方で、大規模で総括的な標準ライブラリを有し、多くのオペレーティングシステム(OS)の機能を基礎としたアプリケーション・プログラム・インターフェース(API)を含んでいます。Pythonのコードは最小主義ですが、リンクリスト(``list``)、タプル(``tuple``)、ハッシュテーブル(``dict``)、任意長の整数(``long``)などの組み込みオブジェクトを定義しています。

Pythonは、オブジェクト指向(``class``)、命令型(``def``)、関数型(``lambda``)などの複数のプログラミングパラダイムをサポートしています。動的型付けシステムと、参照カウントを利用した自動メモリ管理を有しています(Ruby、Perl、Schemeと同様です)。

Pythonは、1991年にGuido Van Rossumによって初めてリリースされました。非営利のPythonソフトウェア財団が管理する、オープンなコミュニティベースの開発モデルになっています。Python言語を実装している多くのインタプリタとコンパイラがあります。1つはJava(Jython)によるものですが、ここでの簡単な説明ではGuidoによって開発されたC実装に言及します。

PythonのオフィシャルWebサイト``python``:citeでは多くのチュートリアル、ライブラリーリファレンスや公式ドキュメントを見ることができます。

上記のドキュメントに加えて、参照``guido``:citeや参照``lutz``:citeといった書籍も参考になるかもしれません。

すでにPython言語に精通している場合は、本章を飛ばしてもかまわないでしょう。

### Starting up
``shell``:inxx
Microsoft WindowsやMac版のweb2pyのバイナリ配布は、Pythonのインタープリターを同梱しています。

以下のように(DOSプロンプトで)入力するとWindows上で起動することができます。
``
web2py.exe -S welcome
``:code

Mac OSXでは、ターミナルウィンドウで以下のコマンドを入力します(web2py.appと同じフォルダにいる必要があります)。
``
./web2py.app/Contents/MacOS/web2py -S welcome
``:code

Linuxや他のUnixコンピュータでは、Pythonがすでにインストールされているかを確認し、以下のようにシェルコマンドを入力してください。
``
python web2py.py -S welcome
``:code

もしPython2.5以降がインストールされていない場合は、web2pyを起動する前にpythonのダウンロードとインストールが必要です。

``-S welcome``は、**welcome**アプリケーションのコントローラー内でコマンドが実行されているかのように、対話型のシェルを動作することをweb2pyに指示します。web2pyの対話型のコマンドラインと通常のPythonコマンドラインの違いはこれだけです。

管理インターフェースはアプリケーション毎にWebベースのシェルを提供します。次のURLで"welcome"アプリケーション用のシェルにアクセスできます。
``
http://127.0.0.1:8000/admin/shell/index/welcome
``:code

本章におけるすべての例題は、通常のシェルかWebベースのシェルで試すことができます。

### help, dir
``help``:inxx ``dir``:inxx

Python言語には、組み込みおよびユーザ定義両方の現在のスコープにおいて、定義されたオブジェクトに関するドキュメントを取得する2つのコマンドが用意されています。

たとえば"1"というオブジェクトに関するhelpを尋ねることができます：
``
>>> help(1)
Help on int object:

class int(object)
 |  int(x[, base]) -> integer
 |
 |  Convert a string or number to an integer, if possible.  A floating point
 |  argument will be truncated towards zero (this does not include a string
 |  representation of a floating point number!)  When converting a string, use
 |  the optional base.  It is an error to supply a base when converting a
 |  non-string. If the argument is outside the integer range a long object
 |  will be returned instead.
 |
 |  Methods defined here:
 |
 |  __abs__(...)
 |      x.__abs__() <==> abs(x)
...
``:code

"1"は整数なので、intクラスとそのすべてのメソッドに関する説明が得られます。上記の例では出力結果が長いため、切り取られています。

同様に、dirコマンドを用いることで、"1"オブジェクトのメソッドのリストを得ることができます。
``
>>> dir(1)
['__abs__', '__add__', '__and__', '__class__', '__cmp__', '__coerce__',
'__delattr__', '__div__', '__divmod__', '__doc__', '__float__',
'__floordiv__', '__getattribute__', '__getnewargs__', '__hash__', '__hex__',
'__index__', '__init__', '__int__', '__invert__', '__long__', '__lshift__',
'__mod__', '__mul__', '__neg__', '__new__', '__nonzero__', '__oct__',
'__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdiv__',
'__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__',
'__rlshift__', '__rmod__', '__rmul__', '__ror__', '__rpow__', '__rrshift__',
'__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__',
'__str__', '__sub__', '__truediv__', '__xor__']
``:code

### 型
``type``:inxx
Pythonは動的型付け言語です。つまり、変数に特定の型はなく、それゆえ宣言する必要がありません。一方で、値は特定の型を持っています。以下のようにして、変数に対して、そこに格納された値の型について問い合わせることができます。
``
>>> a = 3
>>> print type(a)
<type 'int'>
>>> a = 3.14
>>> print type(a)
<type 'float'>
>>> a = 'hello python'
>>> print type(a)
<type 'str'>
``:code

Pythonはまた、最初からリストや辞書などのデータ構造を内包しています。

#### ``str``
``str``:inxx ``ASCII``:inxx ``UTF8``:inxx ``Unicode``:inxx ``encode``:inxx

Pythonは、ASCII文字列とUnicode文字列の2つの異なる型の文字列の使用をサポートしています。ASCII文字列は'...'、"..."、'''..'''、"""..."""で区切られたものです。トリプルクォートは、複数行の文字列を区切ります。Unicode文字列は``u``で始まり、Unicode文字列がその後に続きます。次のようにエンコーディングを選択することで、Unicode文字列をASCII文字列に変換することができます。
``
>>> a = 'this is an ASCII string'
>>> b = u'This is a Unicode string'
>>> a = b.encode('utf8')
``:code

上記のコマンド実行により、``a``の結果はUTF8でエンコードされた文字列を格納するASCII文字列になります。web2pyは意図的に、UTF8でエンコードされた文字列を内部で使用します。

また、さまざまな方法で、変数を文字列で記述することが可能です：
``
>>> print 'number is ' + str(3)
number is 3
>>> print 'number is %s' % (3)
number is 3
>>> print 'number is %(number)s' % dict(number=3)
number is 3
``:code

最後の表記はより明示的でエラーが起きにくいので、推奨される書き方です。

多くのPythonオブジェクトは、たとえば数字は、``str``または``repr``を用いて文字列にシリアライズすることができます。これら2つのコマンドは非常に似ていますが、若干異なる出力結果を生成します。例：
``
>>> for i in [3, 'hello']:
        print str(i), repr(i)
3 3
hello 'hello'
``:code

ユーザー定義クラスにおいて、``str``や``repr``は``__str__``と``__repr__``という特別な演算子を用いて定義/再定義できます。これらは後ほど簡単に説明します。より詳細についてはPython公式ドキュメント``pydocs``:citeを参照してください。なお、``repr``は常に​​デフォルトの値を持っています 。

Python文字列のもう1つの重要な特徴は、リストのように反復可能なオブジェクトであるという点です。
``
>>> for i in 'hello':
        print i
h
e
l
l
o
``:code

#### ``list``
``list``:inxx

Pythonリストの主要なメソッドは追加(append)、挿入(insert)、削除(delete)です：
``
>>> a = [1, 2, 3]
>>> print type(a)
<type 'list'>
>>> a.append(8)
>>> a.insert(2, 7)
>>> del a[0]
>>> print a
[2, 7, 3, 8]
>>> print len(a)
4
``:code

リストは次のようにスライスできます：
``
>>> print a[:3]
[2, 7, 3]
>>> print a[1:]
[7, 3, 8]
>>> print a[-2:]
[3, 8]
``:code

連結することも可能です：
``
>>> a = [2, 3]
>>> b = [5, 6]
>>> print a + b
[2, 3, 5, 6]
``:code

リストは反復可能です。つまり、それをループで回すことができます：
``
>>> a = [1, 2, 3]
>>> for i in a:
        print i
1
2
3
``:code

リストの要素は同じ型にする必要はありません。任意のPythonオブジェクトをとることができます。

''list comprehension''を使用できる典型的な状況があります。次のコードを考えて見ましょう。
``
>>> a = [1,2,3,4,5]
>>> b = []
>>> for x in a:
        if x % 2 == 0:
            b.append(x * 3)
>>> b
[6, 12]
``:code

このコードはアイテムリストを処理し、入力リストのサブセットを選択、編集し、新しい結果のリストを作成しています。このコードは次のようにリスト内包表記で完全に置き換えられます。
``
>>> a = [1,2,3,4,5]
>>> b = [x * 3 for x in a if x % 2 == 0]
>>> b
[6, 12]
``:code

#### ``tuple``
``tuple``:inxx

タプルはリストに似ていますが、そのサイズと要素は、リストは変更可能なのに対し、タプルは変更不可能です。タプルの要素がオブジェクトである場合、オブジェクトの属性は変更可能です。タプルは丸括弧で区切られます。
``
>>> a = (1, 2, 3)
``:code

したがって、以下のコードはリストに対しては動作しますが、
``
>>> a = [1, 2, 3]
>>> a[1] = 5
>>> print a
[1, 5, 3]
``:code

タプルに対しては、要素の割り当てが機能しません。
``
>>> a = (1, 2, 3)
>>> print a[1]
2
>>> a[1] = 5
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
``:code

タプルはリストと同様に反復可能なオブジェクトです。注意として、単一の要素でタプルを構成する際は、以下のように末尾にコンマをつけなければいけません：
``
>>> a = (1)
>>> print type(a)
<type 'int'>
>>> a = (1,)
>>> print type(a)
<type 'tuple'>
``:code

タプルはその不変性と括弧の利用が省略可能であることから、オブジェクトを効率的に格納するのにとても便利です。
``
>>> a = 2, 3, 'hello'
>>> x, y, z = a
>>> print x
2
>>> print z
hello
``:code

#### ``dict``
``dict``:inxx

Pythonの``dict``-ionary(辞書)はキーオブジェクトを値オブジェクトにマッピングするハッシュテーブルです。例:
``
>>> a = {'k':'v', 'k2':3}
>>> a['k']
v
>>> a['k2']
3
>>> a.has_key('k')
True
>>> a.has_key('v')
False
``:code

キーは任意の型のハッシュ可能な型(int、string、他、``__hash__``メソッド実装したクラスのオブジェクト)をとることができます。値は任意の型を使用できます。同じ辞書内の異なるキーと値は、同じ型にする必要はありません。キーが英数字の場合は、辞書は次のような代替の構文を用いて宣言することができます：
``
>>> a = dict(k='v', h2=3)
>>> a['k']
v
>>> print a
{'k':'v', 'h2':3}
``:code

便利なメソッドは、``has_key``、 ``keys``、``values``、``items`` です。
``
>>> a = dict(k='v', k2=3)
>>> print a.keys()
['k', 'k2']
>>> print a.values()
['v', 3]
>>> print a.items()
[('k', 'v'), ('k2', 3)]
``:code

``items``メソッドはタプルのリストを生成し、各タプルはキーとそれに対応付けられた値を格納しています。

辞書の要素とリストの要素は、``del``コマンドで削除することができます。
``
>>> a = [1, 2, 3]
>>> del a[1]
>>> print a
[1, 3]
>>> a = dict(k='v', h2=3)
>>> del a['h2']
>>> print a
{'k':'v'}
``:code

内部的には、Pythonは、``hash``演算子でオブジェクトを整数に変換し、その整数によってどこに値を格納するかを決めています。
``
>>> hash("hello world")
-1500746465
``:code

### インデントについて

Pythonはインデントをコードブロックの区切りに利用しています。ブロック1つはコロンで終了する行から始まって、同じかそれより高いインデントが次の行として現れるまで続きます。例：
``
>>> i = 0
>>> while i < 3:
>>>    print i
>>>    i = i + 1
>>>
0
1
2
``:code

各インデントのレベルには4つのスペースを使うのが一般的です。 (不可視の)混乱を招かないように、スペースとタブを混在しないことが得策です。

### ``for...in``
``for``:inxx
Pythonでは反復可能なオブジェクトをループで回すことができます。
``
>>> a = [0, 1, 'hello', 'python']
>>> for i in a:
        print i
0
1
hello
python
``:code

``xrange``は一般的なショートカットの1つで、すべてのリスト要素を格納せずに、反復可能な範囲オブジェクトを生成します。
``
>>> for i in xrange(0, 4):
        print i
0
1
2
3
``:code

これは、次のC / C + + / C＃の/ Javaの構文と等価です：
``
for(int i=0; i<4; i=i+1) { print(i); }
``:code

もう1つの有用なコマンドは``enumerate``です。次のようにカウントしながらループ処理を行います：
``
>>> a = [0, 1, 'hello', 'python']
>>> for i, j in enumerate(a):
        print i, j
0 0
1 1
2 hello
3 python
``:code

また、``range(a, b, c)``というキーワードがあります。これは、``a``で始まり``c``ずつ増加し、``b``より小さい最後の値で終わる整数のリストを返します。``a``はデフォルト値で0で、``c``はデフォルトで1です。xrangeも似ていますが実際にリストを作ることはなく、そのリストに対するイテレータを生成します。これはループ処理にとってより良いです。

``break``を利用してループから抜けることができます。
``
>>> for i in [1, 2, 3]:
         print i
         break
1
``:code

``continue``を利用して、すべてのコードブロックを実行せずに、次のループ処理へ飛ぶことができます：
``
>>> for i in [1, 2, 3]:
         print i
         continue
         print 'test'
1
2
3
``:code

### ``while``
``while``:inxx
Pythonにおいて``while``ループは他の多くのプログラミング言語と同じように、無限にループ処理を行い、また、各反復の前に条件のテストを行います。条件が``False``になると、ループは終わります。
``
>>> i = 0
>>> while i < 10:
        i = i + 1
>>> print i
10
``:code

Pythonでは``loop...until``の構造は存在しません。

### ``if...elif...else``
``if``:inxx ``elif``:inxx ``else``:inxx
Pythonにおける条件文の使用は直感的です：
``
>>> for i in range(3):
>>>     if i == 0:
>>>         print 'zero'
>>>     elif i == 1:
>>>         print 'one'
>>>     else:
>>>         print 'other'
zero
one
other
``:code

"elifは""else if"の意味です。``elif``句と``else``句はどちらも省略可能です。``elif``は何回も利用可能ですが、``else``は一度だけです。 複雑な条件文は``not``、``and``、``or``の演算子を利用し作成することができます。
``
>>> for i in range(3):
>>>     if i == 0 or (i == 1 and i + 1 == 2):
>>>         print '0 or 1'
``:code

### ``try...except...else...finally``
``try``:inxx ``except``:inxx ``finally``:inxx ``Exception``:inxx
Pythonは、割り込みを投げる、例外を起こすことができます:
``
>>> try:
>>>     a = 1 / 0
>>> except Exception, e:
>>>     print 'oops: %s' % e
>>> else:
>>>     print 'no problem here'
>>> finally:
>>>     print 'done'
oops: integer division or modulo by zero
done
``:code

例外が発生したときは、``except``句で補足され、その句が実行されますが、``else``句は実行されません。例外が発生しなかった場合は、``except``句は実行されず、``else``句が実行されます。``finally``句は常に実行されます。

異なる例外が発生する可能性があるために複数の``except``句をとることができます:
``
>>> try:
>>>     raise SyntaxError
>>> except ValueError:
>>>     print 'value error'
>>> except SyntaxError:
>>>     print 'syntax error'
syntax error
``:code

``else``句と``finally``句は省略可能です。

以下は、組み込みのPython例外のリストと(web2pyで定義されている)HTTP例外です。
``
BaseException
 +-- HTTP (defined by web2py)
 +-- SystemExit
 +-- KeyboardInterrupt
 +-- Exception
      +-- GeneratorExit
      +-- StopIteration
      +-- StandardError
      |    +-- ArithmeticError
      |    |    +-- FloatingPointError
      |    |    +-- OverflowError
      |    |    +-- ZeroDivisionError
      |    +-- AssertionError
      |    +-- AttributeError
      |    +-- EnvironmentError
      |    |    +-- IOError
      |    |    +-- OSError
      |    |         +-- WindowsError (Windows)
      |    |         +-- VMSError (VMS)
      |    +-- EOFError
      |    +-- ImportError
      |    +-- LookupError
      |    |    +-- IndexError
      |    |    +-- KeyError
      |    +-- MemoryError
      |    +-- NameError
      |    |    +-- UnboundLocalError
      |    +-- ReferenceError
      |    +-- RuntimeError
      |    |    +-- NotImplementedError
      |    +-- SyntaxError
      |    |    +-- IndentationError
      |    |         +-- TabError
      |    +-- SystemError
      |    +-- TypeError
      |    +-- ValueError
      |    |    +-- UnicodeError
      |    |         +-- UnicodeDecodeError
      |    |         +-- UnicodeEncodeError
      |    |         +-- UnicodeTranslateError
      +-- Warning
           +-- DeprecationWarning
           +-- PendingDeprecationWarning
           +-- RuntimeWarning
           +-- SyntaxWarning
           +-- UserWarning
           +-- FutureWarning
	   +-- ImportWarning
	   +-- UnicodeWarning
``:code

各項目の詳細については、Python公式ドキュメントを参照してください。

web2pyは、``HTTP``と呼ばれる新しい例外を1つだけ公開しています。その例外が発生すると、プログラムはHTTPエラーページを返すようになります(詳細は第4章を参照してください)。

任意のオブジェクトは例外として発生させることができますが、それには組み込みのexceptionクラスを拡張したオブジェクトの利用を推奨します。

### ``def...return``
``def``:inxx ``return``:inxx

関数は``def``を使って宣言されます。以下は典型的なPythonの関数です。
``
>>> def f(a, b):
        return a + b
>>> print f(4, 2)
6
``:code

引数や戻り値の型を指定する必要（または方法）はありません。この例では関数``f``は2つの引数を取るように定義されています。

関数はこの章で初めて''scope''や''namespace''という概念を紹介する記述です。上記の例で、``a``と``b``の変数は``f``関数のスコープの外では未定義になります。
``
>>> def f(a):
        return a + 1
>>> print f(1)
2
>>> print a
Traceback (most recent call last):
  File "<pyshell#22>", line 1, in <module>
    print a
NameError: name 'a' is not defined
``:code

関数のスコープの外で定義された変数は関数内でも使用可能です;次の例で変数``a``がどのように扱われているかを検証してみてください。
``
>>> a = 1
>>> def f(b):
        return a + b
>>> print f(1)
2
>>> a = 2
>>> print f(1) # new value of a is used
3
>>> a = 1 # reset a
>>> def g(b):
        a = 2 # creates a new local a
        return a + b
>>> print g(2)
4
>>> print a # global a is unchanged
1
``:code

もし``a``が編集されると、後続の関数はグローバル変数``a``の値を使用します。これは関数定義が宣言時の変数``a``の値ではなく、変数``a``の保管場所と紐づいているためです。しかし、``g``関数内部で``a``が割り振られた場合、新しいローカル変数``a``がグローバルの値を隠すため、グローバル変数``a``は影響を受けません。外部スコープ参照は''closures''の作成で実現できます。
``
>>> def f(x):
        def g(y):
            return x * y
        return g
>>> doubler = f(2) # doubler is a new function
>>> tripler = f(3) # tripler is a new function
>>> quadrupler = f(4) # quadrupler is a new function
>>> print doubler(5)
10
>>> print tripler(5)
15
>>> print quadrupler(5)
20
``:code

関数``f``が新しい関数を作成し、``g``のスコープは完全に``f``の内部にあります。Closuresは非常に強力です。

関数の引数はデフォルト値を取ることができ、複数の結果を返すことができます。
``
>>> def f(a, b=2):
        return a + b, a - b
>>> x, y = f(5)
>>> print x
7
>>> print y
3
``:code

引数を明示的に名称で渡すこともできます。これは呼び出し側で指定された引数の順序が関数で定義された引数の順序と異なってもよいことを意味します。
``
>>> def f(a, b=2):
        return a + b, a - b
>>> x, y = f(b=5, a=2)
>>> print x
7
>>> print y
-3
``:code

関数はまた、可変数の引数を取ることができます。
``
>>> def f(*a, **b):
        return a, b
>>> x, y = f(3, 'hello', c=4, test='world')
>>> print x
(3, 'hello')
>>> print y
{'c':4, 'test':'world'}
``:code

ここで、名前付きで渡されなかった引数（3、'hello'）はリスト``a``に格納され、名前付きで渡された(``c``と``test``)は辞書``b``に格納されます。

逆に、リストやタプルは、展開しながら、個別の位置引数を要求する関数に渡すことができます：
``
>>> def f(a, b):
        return a + b
>>> c = (1, 2)
>>> print f(*c)
3
``:code

辞書もまた、展開しながら、キーワード引数に引き渡すことができます。
``
>>> def f(a, b):
        return a + b
>>> c = {'a':1, 'b':2}
>>> print f(**c)
3
``:code

#### ``lambda``
``lambda``:inxx

``lambda``を使用することでとても簡単で簡潔な無名関数を作成することができます。
``
>>> a = lambda b: b + 2
>>> print a(3)
5
``:code

"lambda [a]：[b]"式は、文字通り"引数[a]を持ち[b]を返す関数"として読みます。``lambda``式自体は無名関数ですが、変数に保存されることで名前を獲得しています。``def``のスコープの法則は``lambda``にも同様に適用され、上記の例にある``a``に関していうと``def``を使った関数宣言と全く同じです。
``
>>> def a(b):
        return b + 2
>>> print a(3)
5
``:code

``lambda``の長所はその簡潔さだけです。しかし、簡潔さはある状況で非常に便利です。リスト上の要素全てに関数を適用し新しいリストを作成する``map``という名前の関数を考えて見ましょう。
``
>>> a = [1, 7, 2, 5, 4, 8]
>>> map(lambda x: x + 2, a)
[3, 9, 4, 7, 6, 10]
``:code

``lambda``の代わりに``def``を使用した場合、コード量は2倍になります。``lambda``の主な欠点（Pythonの実装で）は単一式しか許可しない点です。長い記述の関数の場合は関数名を指定する手間のある``def``使用することで、関数の記述量が増えていっても対応できます。
``def``や``lambda``が関数を''curry''（ネスト）することができるように、既存の関数を包括した新しい関数を作成することで新しい関数が異なる変数セットを持つことができます。
``
>>> def f(a, b): return a + b
>>> g = lambda a: f(a, 3)
>>> g(2)
5
``:code

関数をネストすることが便利な状況はいろいろありますが、以下で挙げるキャッシュの例はweb2pyで特に便利な使用方法です。引数が素数であるかを確認する高負荷な関数を考えて見ましょう。
``
def isprime(number):
    for p in range(2, number):
        if (number % p) == 0:
            return False
    return True
``:code

この関数は明らかに多くの時間を必要とします。

key、関数、秒数の3つの引数を受け取る``cache.ram``というキャッシュ関数があると仮定しましょう。
``
value = cache.ram('key', f, 60)
``:code

初回の実行時は、``f()``関数を呼び出し、メモリ上の辞書（仮に"d"とします）に結果を保存し値を返します。このため値は以下のようになります。
``
value = d['key']=f()
``:code

2回目の実行時は、もしkeyが辞書に存在し、指定された秒数(60)よりデータが古くない場合、関数を実行しないで対応する値を返します。
``
value = d['key']
``:code

入力値に対応する**isprime**関数の結果をキャッシュするにはどのようにすればよいでしょうか？
これは以下のようになります:
``
>>> number = 7
>>> seconds = 60
>>> print cache.ram(str(number), lambda: isprime(number), seconds)
True
>>> print cache.ram(str(number), lambda: isprime(number), seconds)
True
``:code

結果は同じですが、初回に``cache.ram``が実行された場合だけ``isprime``が呼ばれ、2回目は呼ばれません。

-------
``def``や``lambda``で作成されたPython関数は異なる引数の組み合わせの観点から既存の関数をリファクタリングすることができます。``cache.ram``と``cache.disk``はweb2pyのキャッシュ関数です。
-------

### ``class``
``class``:inxx

Pythonは動的型付けなので、Pythonのクラスとオブジェクトは少し変わったものに見えるかもしれません。実際、クラスを宣言する際にメンバ変数(属性)を必ずしも定義する必要はなく、同じクラスから作られた異なるインスタンスはそれぞれ違うメンバ変数(属性)を持つことができます。一般的に属性は、クラスではなくインスタンスに関連付けられます(ただし、クラス属性として宣言された場合は別です。これはC++/Javaでの"静的メンバ変数と同じです)。

例を示します：
``
>>> class MyClass(object): pass
>>> myinstance = MyClass()
>>> myinstance.myvariable = 3
>>> print myinstance.myvariable
3
``:code

ここで、``pass``は何もしないというコマンドであることに注意してください。この場合、何も含んでいない``MyClass``というクラスを定義するために用いられています。``MyClass()``はクラスのコンストラクタを呼び出し(この場合、デフォルトのコンストラクタ)、オブジェクト、つまり、このクラスのインスタンスを返します。クラス定義における``(object)``の部分は、このクラスが組み込みの``object``クラスを拡張したものであることを示しています。これは必須ではないですが、推奨される書き方です。

次により複雑なクラスの例を示します：
``
>>> class MyClass(object):
>>>    z = 2
>>>    def __init__(self, a, b):
>>>        self.x = a, self.y = b
>>>    def add(self):
>>>        return self.x + self.y + self.z
>>> myinstance = MyClass(3, 4)
>>> print myinstance.add()
9
``:code

クラスの内部で定義された関数はメソッドになります。いくつかのメソッドは、特別な予約済みの名前を持ちます。たとえば、``__init__``はコンストラクタです。すべての変数は、メソッドの外で定義されたものでない限り、メソッドのローカル変数です。たとえば、``z``はクラス変数です。これは、C++の静的メンバ変数と同じで、そのクラスのすべてのインスタンスに対して同じ値を保持します。

ここで、``__init__``は3つの引数をとり、``add``は1つの引数をとっているのに対し、それらはそれぞれ2つの引数と、0個の引数によって呼ばれている点に注意してください。最初の引数は、慣例的に、メソッド内で利用されるローカルな名前を示していて、現在のオブジェクトを参照します。ここでは、``self``を現在のオブジェクトを参照するのに利用しています。ただし、任意の他の名前を用いることも可能です。``self``はC++の``*this``やJavaの``this``と同じ役割を担います。ただし、``self``は予約語ではありません。


この構文は、ネストしたクラス、たとえばあるクラス内のメソッドにおいてローカルなクラス、を宣言するときに、曖昧さを避けるために必要です。

### 特殊属性、メソッド、演算子

2つのアンダスコアから始まるクラス属性、メソッド、演算子は、一般にプライベート（クラス内でのみ使用し、クラス外から呼び出されない）であることを意図しますが、これはインタプリタによって強制される慣例ではありません。

そのうちのいくつかは予約されたキーワードで、特別な意味を持っています。

例として、そのなかの3つを示します。
- ``__len__``
- ``__getitem__``
- ``__setitem__``
これらは、たとえば、リストのように振舞うコンテナオブジェクトの作成に利用できます：
``
>>> class MyList(object):
>>>     def __init__(self, *a): self.a = list(a)
>>>     def __len__(self): return len(self.a)
>>>     def __getitem__(self, i): return self.a[i]
>>>     def __setitem__(self, i, j): self.a[i] = j
>>> b = MyList(3, 4, 5)
>>> print b[1]
4
>>> b.a[1] = 7
>>> print b.a
[3, 7, 5]
``:code

他の特殊演算子としては、クラスにおいて属性の取得と設定を定義する``__getattr__``と``__setattr__``や、算術演算子をオーバーロードする``__sum__``や``__sub__``などがあります。 これらの演算子の利用についてもっと知りたい場合は、より高度な書籍を参照してください。また、``__str__``と``__repr__``演算子についてはすでに言及してあります。

### ファイル入力/出力
``file.read``:inxx ``file.write``:inxx

Pythonでは、以下のようにしてファイルを開き、書き込むことができます。
``
>>> file = open('myfile.txt', 'w')
>>> file.write('hello world')
>>> file.close()
``:code

同様に、以下のようにしてファイルを読み出すことができます。
``
>>> file = open('myfile.txt', 'r')
>>> print file.read()
hello world
``:code

もう一つの方法として、"rb"を用いてバイナリモードで読むことが可能で、"wb"を用いてバイナリモードで書き込むことが可能です。さらに、追記モード"a"においてファイルを開くこともできます。標準のC言語表記と同じです。

``read``コマンドは省略可能な引数であるバイト数を取ります。また、ファイル内の任意の箇所に飛ぶ場合は、``seek``を利用します。
``file.seek``:inxx

``read``を利用して飛んだ場所からファイルを読むことができます。
``
>>> print file.seek(6)
>>> print file.read()
world
``:code

ファイルを閉じるときは次のようにします。
``
>>> file.close()
``:code

-------
CPythonとして知られるPythonの標準実装では、変数は参照カウントを使用しており、使用しているファイルもこれで扱っています。このため、CPythonは参照カウントの開いているファイル数がゼロになると、ファイルはクローズされていると判断し変数を破棄します。しかしPyPyなどの別の実装では参照カウントの代わりにガベージコレクションが使用されます。これはもし大量のファイルが一度にオープンされた場合、''gc''（ガベージコレクション）がそれをクローズして破棄する前にはエラーが発生する可能性があります。このため、もう使用しない場合は明示的にファイルをクローズするのが推奨されます。''web2py''は``read_file()``と``write_file()``の2つのヘルパ関数を提供します。これは``gluon.fileutils``名前空間の内部でファイルアクセスをカプセル化し、使用されたファイルが適切にクローズされているかを確認します。
-------

-------
web2pyを使用している場合、カレントディレクトリの場所を知る必要はありません。なぜなら、それはweb2pyの設定に依存するからです。``request.folder``変数は、現在のアプリケーションへのパスを保持しています。パスは、後述する``os.path.join``コマンドによって連結することができます。
-------

### ``exec``, ``eval``
``exec``:inxx ``eval``:inxx

Javaと異なり、Pythonは真のインタプリンタ言語です。つまり、文字列として格納されたPythonコードを実行する能力があります。例:
``
>>> a = "print 'hello world'"
>>> exec(a)
'hello world'
``:code

何が起こったのでしょうか？関数``exec``は、インタープリンタに自分自身を呼び出すように命令し、引数として渡された文字列の中身を実行します。また、辞書のシンボルによって定義されたコンテキストの中で、文字列の中身を実行することも可能です：
``
>>> a = "print b"
>>> c = dict(b=3)
>>> exec(a, {}, c)
3
``:code

ここでは、インタプリタが、文字列``a``を実行したときに、``c``で定義されたシンボル(この例では``b``)を参照しています。ただし、``c``や``a``自身を参照することはありません。これは制限された環境とは大きく異なります。execは内部コードができることに制限を加えないからです。コードが利用出来る変数セットを単に定義しているだけです。

関連する関数として``eval``があります。これは、``exec``と非常に似た動きをしますが、評価される引数が値になることを想定し、その値を返すという点で異なります。
``
>>> a = "3*4"
>>> b = eval(a)
>>> print b
12
``:code

### ``import``
``import``:inxx ``random``:inxx
Pythonoが本当に強力なのは、そのライブラリモジュールがあるからです。それらは、大規模で一貫性のあるアプリケーション・プログラム・インターフェース(API)を多くの（大抵オペレーティング・システムから独立した）システムライブラリに提供します。

たとえば、乱数ジェネレーターを利用する必要がある場合、次のようにします：
``
>>> import random
>>> print random.randint(0, 9)
5
``:code

この例では、0から9の間のランダムな整数を表示します(ここでは5が表示されています)。``randint``関数は``random``モジュール内で定義されています。モジュールからオブジェクトを現在の名前空間にインポートすることも可能です：
``
>>> from random import randint
>>> print randint(0, 9)
``:code

もしくは、モジュールからすべてのオブジェクトを現在の名前空間にインポートすることも可能です：
``
>>> from random import *
>>> print randint(0, 9)
``:code

さらに、すべてを新しく定義した名前空間にインポートすることも可能です：
``
>>> import random as myrand
>>> print myrand.randint(0, 9)
``:code

本書の残りの部分では、 ``os``、``sys``、``datetime``、``time``、``cPickle``といったモジュールに定義されたオブジェクトをよく利用します。

-------
すべてのweb2pyオブジェクトは、``gluon``と呼ばれるモジュールを介してアクセスすることができます。これは、後述の章にて扱います。内部的には、web2pyは多くのPythonモジュール(たとえば``thread``など)を使用しています。しかし、利用者が直接それらにアクセスする必要はほとんどないでしょう。
-------

以下の小節では、最も利用されるそれらのモジュールを考えます。

#### ``os``
``os``:inxx ``os.path.join``:inxx ``os.unlink``:inxx

このモジュールは、オペレーティング・システムAPIへのインターフェイスを提供します。例：
``
>>> import os
>>> os.chdir('..')
>>> os.unlink('filename_to_be_deleted')
``:code

-------
``chdir``のような``os``のいくつかの関数は、web2pyのおいて使用しないでください。スレッドセーフではないからです。
-------
``os.path.join``はとても便利で、OSに依存しない形でパスの連結が可能になります。
``
>>> import os
>>> a = os.path.join('path', 'sub_path')
>>> print a
path/sub_path
``:code

システム環境変数はos.environを介してアクセスできます。
``
>>> print os.environ
``:code

これは読み取り専用の辞書です。

#### ``sys``
``sys``:inxx ``sys.path``:inxx

``sys``モジュールは多くの変数と関数を持ちますが、最も利用するのはsys.pathです。これは、Pythonがモジュールを探すためのパスのリストを保持しています。モジュールをインポートしようとしたとき、Pythonは``sys.path``内にリストされたすべてのフォルダーをチェックします。どこかの場所において追加のモジュールをインストールして、それをPythonに探させたい場合、その場所へのパスを``sys.path``に追加しなければなりません。
``
>>> import sys
>>> sys.path.append('path/to/my/modules')
``:code

web2pyが実行されている時は、Pythonはメモリ内に常駐し、多くのスレッドがHTTPリクエストを処理している一方、sys.pathは1つしかありません。 メモリリークを回避するにためには、パスを追記する前に、それがすでに存在しているかを確認するのが最良です。
``
>>> path = 'path/to/my/modules'
>>> if not path in sys.path:
        sys.path.append(path)
``:code

#### ``datetime``
``date``:inxx ``datetime``:inxx ``time``:inxx

datetimeモジュールの使い方を説明するいくつかの例を紹介します。
``
>>> import datetime
>>> print datetime.datetime.today()
2008-07-04 14:03:90
>>> print datetime.date.today()
2008-07-04
``:code

ローカルタイムではなく、UTCタイムに基づいたタイムスタンプデータが必要になるかもしれません。その場合、次のような関数を用いることができます：その場合では、次の関数を使用することができます：
``
>>> import datetime
>>> print datetime.datetime.utcnow()
2008-07-04 14:03:90
``:code

datetimeのモジュールには、date、datetime、time、timedeltaなど、さまざまなクラスが含まれています。2つのdate、2つのdatetime、2つのtimeオブジェクト間の差は、timedeltaになります：
``
>>> a = datetime.datetime(2008, 1, 1, 20, 30)
>>> b = datetime.datetime(2008, 1, 2, 20, 30)
>>> c = b - a
>>> print c.days
1
``:code

web2pyにおいて、dateとdatetimeは、データベースへ渡すときや戻されるときに、対応するSQLの型を格納するのに利用されます。

#### ``time``
``time``:inxx

timeモジュールは``date``や``datetime``と異なり、(1970年から始まる)エポックからの秒数として時間を表現します。
``
>>> import time
>>> t = time.time()
1215138737.571
``:code

秒の時間と``datetime``の時間とを変換する関数についてはPythonドキュメントを参照してください。

#### ``cPickle``
``cPickle``:inxx

cPickleはとても強力なモジュールです。cPickleは自己参照オブジェクトを含む、ほぼすべてのPythonオブジェクトをシリアライズすることができる関数を提供します。たとえば、次のような奇妙なオブジェクトを構築します：
``
>>> class MyClass(object): pass
>>> myinstance = MyClass()
>>> myinstance.x = 'something'
>>> a = [1 ,2, {'hello':'world'}, [3, 4, [myinstance]]]
``:code

そして以下のようにします：
``
>>> import cPickle
>>> b = cPickle.dumps(a)
>>> c = cPickle.loads(b)
``:code

ここで、``b``は``a``の文字列表現で、``c``は``b``をデシリアライズして生成されたaのコピーです。

cPickleは、ファイルへシリアライズ、ファイルからデシリアライスすることも可能です：
``
>>> cPickle.dump(a, open('myfile.pickle', 'wb'))
>>> c = cPickle.load(open('myfile.pickle', 'rb'))
``:code

##### 第3版 - 翻訳: 細田謙二　レビュー: Omi Chiba
##### 第4版 - 翻訳: Omi Chiba　レビュー: Fumito Mizuno
